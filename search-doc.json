[{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":""},{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"index","type":0,"sectionRef":"#","url":"/docs/data-collection/","content":"index .. _data-collection: Data Collection web/index.rstmobile/index.rstapi/index.rstother_integrations/index.rstprocessing/index.rst","keywords":""},{"title":"Google Search Console","type":0,"sectionRef":"#","url":"/docs/analytics/integrations/google_search_console","content":"","keywords":""},{"title":"Metrics​","type":1,"pageTitle":"Google Search Console","url":"/docs/analytics/integrations/google_search_console#metrics","content":"The table below lists metrics provided by Google Search Console integration. Metric Name\tColumn ID\tScope\tTypeClicks (search engine)\tsearch_engine_clicks\texternal\tint Impressions (search engine)\tsearch_engine_impressions\texternal\tint CTR (search engine)\tsearch_engine_ctr\texternal\tfloat Average position (search engine)\tsearch_engine_average_position\texternal\tfloat Google Search Console Metrics "},{"title":"Dimensions​","type":1,"pageTitle":"Google Search Console","url":"/docs/analytics/integrations/google_search_console#dimensions","content":"The table below lists dimensions provided by Google Search Console integration. Note &quot;Database type&quot; column presents the type of source column of the dimension (in case of enum - type of the ID, in case of dynamic dimensions - not applicable). Dimension Name\tColumn ID\tScope\tType\tDatabase Type\tNullable\tNotesSource\tsource\tsession\tstr\tstring\tFalse Medium\tmedium\tsession\tstr\tstring\tFalse Source/Medium\tsource_medium\tsession\tstr\tstring\tFalse Channel\treferrer_type\tsession\t[int, str]\tuint8\tFalse\treferrer_type.json &lt;/_static/json/enum/referrer_type.json&gt; Referrer URL\treferrer_url\tsession\tstr\tstring\tFalse Device type\tdevice_type\tsession\t[int, str]\tuint8\tTrue\tdevice_type.json &lt;/_static/json/enum/device_type.json&gt; Continent\tlocation_continent_iso_code\tsession\t[str, str]\tstring(2)\tTrue\tlocation_continent_iso_code.json &lt;/_static/json/enum/location_continent_iso_code.json&gt; Country\tlocation_country_name\tsession\t[str, str]\tstring\tTrue\tISO 3166-2 codes (e.g. &quot;PL&quot;) Session entry URL\tsession_entry_url\tsession\tstr\tstring\tFalse Timestamp\ttimestamp\tsession\tdate\tnot applicable\tFalse\tby default in Raw data API Search engine keyword\tsearch_engine_keyword\texternal\tstr\tstring\tFalse\tnot available in Raw data API Website Name\twebsite_name\tsession\t[str, str]\tnot applicable\tFalse\twebsite UUID Google Search Console Dimensions "},{"title":"Mixed Queries​","type":1,"pageTitle":"Google Search Console","url":"/docs/analytics/integrations/google_search_console#mixed-queries","content":"It is possible to request both internal analytics and Google Search Console metrics in a single query (for example: &quot;Sessions&quot; and &quot;Clicks (search engine)&quot;), however only the common dimensions listed belowmay be used in such queries. Note &quot;Database type&quot; column presents the type of source column of the dimension (in case of enum - type of the ID, in case of dynamic dimensions - not applicable). Dimension Name\tColumn ID\tScope\tType\tDatabase Type\tNullable\tNotesSource\tsource\tsession\tstr\tstring\tFalse Medium\tmedium\tsession\tstr\tstring\tFalse Source/Medium\tsource_medium\tsession\tstr\tstring\tFalse Channel\treferrer_type\tsession\t[int, str]\tuint8\tFalse\treferrer_type.json &lt;/_static/json/enum/referrer_type.json&gt; Referrer URL\treferrer_url\tsession\tstr\tstring\tFalse Device type\tdevice_type\tsession\t[int, str]\tuint8\tTrue\tdevice_type.json &lt;/_static/json/enum/device_type.json&gt; Continent\tlocation_continent_iso_code\tsession\t[str, str]\tstring(2)\tTrue\tlocation_continent_iso_code.json &lt;/_static/json/enum/location_continent_iso_code.json&gt; Country\tlocation_country_name\tsession\t[str, str]\tstring\tTrue\tISO 3166-2 codes (e.g. &quot;PL&quot;) Session entry URL\tsession_entry_url\tsession\tstr\tstring\tFalse Timestamp\ttimestamp\tsession\tdate\tnot applicable\tFalse\tby default in Raw data API Website Name\twebsite_name\tsession\t[str, str]\tnot applicable\tFalse\twebsite UUID Common Dimensions Warning Using dimensions that are not explicitly listed in the table above in such queries (either as query columns or as filters) will result in aBad Request response. "},{"title":"SharePoint","type":0,"sectionRef":"#","url":"/docs/analytics/integrations/sharepoint","content":"","keywords":""},{"title":"Metrics​","type":1,"pageTitle":"SharePoint","url":"/docs/analytics/integrations/sharepoint#metrics","content":"The table below lists metrics available with SharePoint integration. Metric Name\tColumn ID\tScope\tTypeSharePoint shares\tsharepoint_shares\tsession\tint SharePoint likes\tsharepoint_likes\tsession\tint SharePoint comments\tsharepoint_comments\tsession\tint SharePoint promotions\tsharepoint_promotions\tsession\tint SharePoint creations\tsharepoint_creations\tsession\tint SharePoint edits\tsharepoint_edits\tsession\tint SharePoint deletions\tsharepoint_deletions\tsession\tint SharePoint opens\tsharepoint_opens\tsession\tint SharePoint uploads\tsharepoint_uploads\tsession\tint SharePoint item views\tsharepoint_item_views\tsession\tint SharePoint item attachment views\tsharepoint_item_attachment_views\tsession\tint SharePoint item shares\tsharepoint_item_shares\tsession\tint SharePoint Metrics "},{"title":"Dimensions​","type":1,"pageTitle":"SharePoint","url":"/docs/analytics/integrations/sharepoint#dimensions","content":"The table below lists dimensions available with SharePoint integration. Note: &quot;Database type&quot; column presents the type of source column of the dimension (in case of enum - type of the ID, in case of dynamic dimensions - not applicable). Dimension Name\tColumn ID\tScope\tType\tDatabase Type\tNullable\tNotesSharePoint display name\tsharepoint_display_name\tsession\tstr\tstring\tTrue SharePoint office\tsharepoint_office\tsession\tstr\tstring\tTrue SharePoint department\tsharepoint_department\tsession\tstr\tstring\tTrue SharePoint job title\tsharepoint_job_title\tsession\tstr\tstring\tTrue SharePoint shares in session\tsession_total_sharepoint_shares\tsession\tint\tuint16\tFalse SharePoint likes in session\tsession_total_sharepoint_likes\tsession\tint\tuint16\tFalse SharePoint comments in session\tsession_total_sharepoint_comments\tsession\tint\tuint16\tFalse SharePoint promotions in session\tsession_total_sharepoint_promotions\tsession\tint\tuint16\tFalse SharePoint creations in session\tsession_total_sharepoint_creations\tsession\tint\tuint16\tFalse SharePoint edits in session\tsession_total_sharepoint_edits\tsession\tint\tuint16\tFalse SharePoint deletions in session\tsession_total_sharepoint_deletions\tsession\tint\tuint16\tFalse SharePoint opens in session\tsession_total_sharepoint_opens\tsession\tint\tuint16\tFalse SharePoint uploads in session\tsession_total_sharepoint_uploads\tsession\tint\tuint16\tFalse SharePoint item views in session\tsession_total_sharepoint_item_views\tsession\tint\tuint16\tFalse SharePoint item attachment views in session\tsession_total_sharepoint_item_attachment_views\tsession\tint\tuint16\tFalse SharePoint item shares in session\tsession_total_sharepoint_item_shares\tsession\tint\tuint16\tFalse SharePoint action\tsharepoint_action\tevent\t[int, str]\tuint8\tTrue\tsharepoint_action.json &lt;/_static/json/enum/sharepoint_action.json&gt; SharePoint object type\tsharepoint_object_type\tevent\t[int, str]\tuint8\tTrue\tsharepoint_object_type.json &lt;/_static/json/enum/sharepoint_object_type.json&gt; SharePoint content type\tsharepoint_content_type\tevent\tstr\tstring\tTrue SharePoint author\tsharepoint_author\tevent\tstr\tstring\tTrue SharePoint author's display name\tsharepoint_author_display_name\tevent\tstr\tstring\tTrue SharePoint author's office\tsharepoint_author_office\tevent\tstr\tstring\tTrue SharePoint author's department\tsharepoint_author_department\tevent\tstr\tstring\tTrue SharePoint author's job title\tsharepoint_author_job_title\tevent\tstr\tstring\tTrue SharePoint file url\tsharepoint_file_url\tevent\tstr\tstring\tTrue SharePoint file type\tsharepoint_file_type\tevent\tstr\tstring\tTrue\t SharePoint Dimensions "},{"title":"Metrics Mapping","type":0,"sectionRef":"#","url":"/docs/analytics/metrics_mapping","content":"","keywords":""},{"title":"Progressive Web Applications integration","type":0,"sectionRef":"#","url":"/docs/data-collection/other_integrations/PWA_Integration","content":"","keywords":""},{"title":"Enabling the Piwik PRO module for Progressive web applications​","type":1,"pageTitle":"Progressive Web Applications integration","url":"/docs/data-collection/other_integrations/PWA_Integration#enabling-the-piwik-pro-module-for-progressive-web-applications","content":"To enable collecting data from your PWAs using Piwik PRO Analytics, call the initialize() method in your service worker: import PiwikPro from '@piwikpro/pwa-piwik-pro'; PiwikPro.initialize({ containerURL: 'example.com', containerId: '12345678-1234-1234-1234-1234567890ab' });  This is all that's required to queue and retry failed requests to Piwik PRO, and it's the simplest way to get Piwik PRO working offline. However, if using only the code above, the retried requests are indistinguishable from requests that succeed on the first try. This means you'll receive all the interaction data from offline users, but you won't be able to tell which interactions occurred while the user was offline. To address this concern, you can use one of the optional methods described below. "},{"title":"Enable automatic tracking of the status of the user's Internet connection​","type":1,"pageTitle":"Progressive Web Applications integration","url":"/docs/data-collection/other_integrations/PWA_Integration#enable-automatic-tracking-of-the-status-of-the-users-internet-connection","content":"If you want to be able to differentiate retried requests from non-retried requests, you can use a command that will start automatic tracing of the internet connection status. With this solution, when the internet is lost, a Custom Event will be generated containing information about the status of the internet connection. In your application, include the default PiwikPro object in the highest level application module. ie index. import PiwikPro from '@piwikpro/pwa-piwik-pro'; PiwikPro.enableInternetConnectionTracking();  "},{"title":"Enable automatic tracking of the app install event​","type":1,"pageTitle":"Progressive Web Applications integration","url":"/docs/data-collection/other_integrations/PWA_Integration#enable-automatic-tracking-of-the-app-install-event","content":"If you want to additionally track as a Custom Event the information about when your customers have installed the application, you can do so using the method: import PiwikPro from '@piwikpro/pwa-piwik-pro'; PiwikPro.enableInstallTracking();  "},{"title":"Simple Metrics​","type":1,"pageTitle":"Metrics Mapping","url":"/docs/analytics/metrics_mapping#simple-metrics","content":"+----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Metric name | Legacy API | New API | +==================================+=============================================+=====================================================+ | Events | nb_actions | {&quot;column_id&quot;: &quot;events&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Sessions | nb_visits | {&quot;column_id&quot;: &quot;sessions&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Visitors | nb_uniq_visitors | {&quot;column_id&quot;: &quot;visitors&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Users | nb_users | {&quot;column_id&quot;: &quot;users&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Page views | nb_pageviews | {&quot;column_id&quot;: &quot;page_views&quot;} | | | nb_hits | | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique page views | nb_uniq_pageviews | {&quot;column_id&quot;: &quot;unique_page_views&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Outlinks | nb_outlinks | {&quot;column_id&quot;: &quot;outlinks&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique outlinks | nb_uniq_outlinks | {&quot;column_id&quot;: &quot;unique_outlinks&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Downloads | nb_downloads | {&quot;column_id&quot;: &quot;downloads&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique downloads | nb_uniq_downloads | {&quot;column_id&quot;: &quot;unique_downloads&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Searches | - | {&quot;column_id&quot;: &quot;searches&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique searches | nb_searches | {&quot;column_id&quot;: &quot;unique_searches&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Custom events | nb_events | {&quot;column_id&quot;: &quot;custom_events&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique custom events | - | {&quot;column_id&quot;: &quot;unique_custom_events&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Content impressions | nb_impressions | {&quot;column_id&quot;: &quot;content_impressions&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique content impressions | - | {&quot;column_id&quot;: &quot;unique_content_impressions&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Content interactions | nb_interactions | {&quot;column_id&quot;: &quot;content_interactions&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique content interactions | - | {&quot;column_id&quot;: &quot;unique_content_interactions&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Content interaction rate | interaction_rate | {&quot;column_id&quot;: &quot;content_interaction_rate&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Goal conversions | nb_conversions | {&quot;column_id&quot;: &quot;goal_conversions&quot;} | | | | | +----------------------------------+ .. warning:: +-----------------------------------------------------+ | Ecommerce conversions | ecommerce conversion was reported |{&quot;column_id&quot;: &quot;ecommerce_conversions&quot;} | | | as goal conversion for goal_id 0 | | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Goal conversions (specific goal) | goal_\\&lt;idGoal&gt;_nb_conversions | {&quot;column_id&quot;: &quot;goal_conversions&quot;, &quot;goal_id&quot;: 1} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Ecommerce abandoned carts | - | {&quot;column_id&quot;: &quot;ecommerce_abandoned_carts&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Goal conversion rate | conversion_rate | {&quot;column_id&quot;: &quot;goal_conversion_rate&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Ecommerce conversion rate | - | {&quot;column_id&quot;: &quot;ecommerce_conversion_rate&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Entries | entry_nb_visits | {&quot;column_id&quot;: &quot;entries&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Entry rate | - | {&quot;column_id&quot;: &quot;entry_rate&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Exits | exit_nb_visits | {&quot;column_id&quot;: &quot;exits&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Exit rate | exit_rate | {&quot;column_id&quot;: &quot;exit_rate&quot;} | | | | | +----------------------------------+ .. warning:: +-----------------------------------------------------+ | Exit rate (events) | definition switches depending on report | {&quot;column_id&quot;: &quot;exit_rate_events&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Bounces | bounce_count | {&quot;column_id&quot;: &quot;bounces&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Bounce rate | bounce_rate | {&quot;column_id&quot;: &quot;bounce_rate&quot;} | | | | | +----------------------------------+ .. warning:: +-----------------------------------------------------+ | Bounce rate (events) | definition switches depending on report | {&quot;column_id&quot;: &quot;bounce_rate_events&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | % of returning visitors | - | {&quot;column_id&quot;: &quot;returning_visitors_rate&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Visitor IPs | - | {&quot;column_id&quot;: &quot;visitor_ips&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Events per session | nb_actions_per_visit | {&quot;column_id&quot;: &quot;events_per_session&quot;} | | | | | | | .. warning:: | | | | does not include all event types | | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ | Unique purchases | - | {&quot;column_id&quot;: &quot;unique_purchases&quot;} | +----------------------------------+---------------------------------------------+-----------------------------------------------------+ "},{"title":"Calculated Metrics​","type":1,"pageTitle":"Metrics Mapping","url":"/docs/analytics/metrics_mapping#calculated-metrics","content":"Warning This table does not include every single possible combination of a dimension and a transformation, just some common examples. +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Metric name | Legacy API | New API | +=====================================+=================================+=============================================================================+ | Sum of goal revenue | revenue | {&quot;column_id&quot;: &quot;goal_revenue&quot;, &quot;transformation_id&quot;: &quot;sum&quot;} | +-------------------------------------+ ecommerce revenue was reported +-----------------------------------------------------------------------------+ | Sum of ecommerce revenue | as goal revenue for goal_id 0 |{&quot;column_id&quot;: &quot;revenue&quot;, &quot;transformation_id&quot;: &quot;sum&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Sum of goal revenue (specific goal) | goal_\\&lt;idGoal&gt;_revenue |{&quot;column_id&quot;: &quot;goal_revenue&quot;, &quot;transformation_id&quot;: &quot;sum&quot;, &quot;goal_id&quot;: 1} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Average generation time | avg_time_generation | {&quot;column_id&quot;: &quot;page_generation_time&quot;, &quot;transformation_id&quot;: &quot;average&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Max generation time | max_time_generation | {&quot;column_id&quot;: &quot;page_generation_time&quot;, &quot;transformation_id&quot;: &quot;max&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Average time on page | avg_time_on_page | {&quot;column_id&quot;: &quot;time_on_page&quot;, &quot;transformation_id&quot;: &quot;average&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Sum of time on page | sum_time_spent | {&quot;column_id&quot;: &quot;time_on_page&quot;, &quot;transformation_id&quot;: &quot;sum&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Sum of session time | sum_visit_length | {&quot;column_id&quot;: &quot;session_total_time&quot;, &quot;transformation_id&quot;: &quot;sum&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Average session time | avg_time_on_site | {&quot;column_id&quot;: &quot;session_total_time&quot;, &quot;transformation_id&quot;: &quot;average&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Max events in session | max_actions | {&quot;column_id&quot;: &quot;session_total_events&quot;, &quot;transformation_id&quot;: &quot;max&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Sum of custom events value | sum_event_value | {&quot;column_id&quot;: &quot;custom_event_value&quot;, &quot;transformation_id&quot;: &quot;sum&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ | Average custom events value | avg_event_value | {&quot;column_id&quot;: &quot;custom_event_value&quot;, &quot;transformation_id&quot;: &quot;average&quot;} | +-------------------------------------+---------------------------------+-----------------------------------------------------------------------------+ "},{"title":"Not available​","type":1,"pageTitle":"Metrics Mapping","url":"/docs/analytics/metrics_mapping#not-available","content":"+--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Name | Legacy API | Closest equivalent in Analytics new | +====================================================================+==================================+======================================================================+ | Number of sessions that converted a goal | nb_visits_converted | Sessions metric with filter goal_conversions &gt; 0 | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Number of custom events which had a value set | nb_events_with_value | Custom events metric with filter custom event value &gt; 0 | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Number of hits that included generation time information | nb_hits_with_time_generation | Page views metric with filter page_generation_time &gt; 0 | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Number of unique visitors that started their visit on this page | entry_nb_uniq_visitors | - | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Number of page views for sessions that started on this page | entry_nb_actions | Entries metric (all entries are page views now) | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Time spent, in seconds, by sessions that started on this page | entry_sum_visit_length | - | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Number of sessions that started on this page, and bounced | entry_bounce_count | Bounces metric | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Number of unique visitors that ended their visit on this page | exit_nb_uniq_visitors | - | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Sum of daily unique visitors over days in the period | sum_daily_nb_uniq_visitors | No longer relevant, unique visitors are calculated across any period | +--------------------------------------------------------------------+----------------------------------+ | | Sum of daily unique visitors that started their visit on this page | sum_daily_entry_nb_uniq_visitors | | | | sum_daily_exit_nb_uniq_visitors | | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ | Number of times this action was done after a site search | nb_hits_following_search | - | +--------------------------------------------------------------------+----------------------------------+----------------------------------------------------------------------+ "},{"title":"index","type":0,"sectionRef":"#","url":"/docs/data-collection/web/frameworks/","content":"index Frameworks ====== Piwik_PRO_Library_for_Angular.md Piwik_PRO_Library_for_React.md Piwik_PRO_Library_for_NextJS.md","keywords":""},{"title":"Analytics","type":0,"sectionRef":"#","url":"/docs/analytics/","content":"Analytics columnsintegrations/index.rsthttp_api/http_apiobject_management_api/object_management_apimetrics_mapping","keywords":""},{"title":"web_log_analytics","type":0,"sectionRef":"#","url":"/docs/data-collection/other_integrations/web_log_analytics","content":"","keywords":""},{"title":"Set up log import​","type":1,"pageTitle":"web_log_analytics","url":"/docs/data-collection/other_integrations/web_log_analytics#set-up-log-import","content":"You need to run the Log Importer tool with the correct parameters. Some of them must be present, while others are optional. Sample command: Python package piwik_pro_log_analytics --url=https://demo.piwik.pro --client-id=*** --client-secret=*** --enable-static --enable-bots --show-progress --idsite=*** --recorders=2 sample.log Python script ./import_logs.py --url=https://demo.piwik.pro --client-id=*** --client-secret=*** --enable-static --enable-bots --show-progress --idsite=*** --recorders=2 sample.log  --url=https://demo.piwik.pro This is a mandatory parameter which points to the location of your Piwik instance --client-id=*** Part of API credentials. They can be obtained from PPAS (check how to do it). --client-secret=*** Part of API credentials. They can be obtained from PPAS (check how to do it). --idsite=*** Defines the Site ID of the website (eg. 99e33528-8da4-46d8-be90-a62bfb3a7bba). There are many other options that can be added to this script, which are described in the Tracker-log-import-add-parameters-to-log-import. If you plan to import logs on a regular basis it is advised to setup a scheduled job using a tool such as CRON. "},{"title":"Exclude log lines​","type":1,"pageTitle":"web_log_analytics","url":"/docs/data-collection/other_integrations/web_log_analytics#exclude-log-lines","content":"There are several methods allowing you to exclude particular log lines or visitors from being tracked: You can exclude specific IP addresses or IP ranges from being tracked. To configure excluded IPs, log into Piwik as a superuser, then click Administration &gt; Websites.Excluding lines from specific IP or IP ranges - this can be done the same way as in the default tracking method in Piwik (by adding an excluded IP or IP range in the Administration -&gt; Websites menu)You can exclude visitors based on their User Agent HTTP headers by using --useragent-excludeYou can also provide a sole hostname that you would like to import from. This means that all the logs from other hosts will be ignored. The parameter allowing this is: --hostnameIt is also possible to exclude specific log lines where the URL path matches a particular URL path. See the option --exclude-path If you need to add multiple paths or hostnames, you will need to add these parameters multiple times. "},{"title":"Add parameters to log import​","type":1,"pageTitle":"web_log_analytics","url":"/docs/data-collection/other_integrations/web_log_analytics#add-parameters-to-log-import","content":"The Web Log Analytics script does not track static files (JS, CSS, images, etc.). It also excludes all bot traffic. Use the following commands to enable tracking of these elements: --enable-bots This enables tracking of search/spam bots via Piwik. Just add a custom variable with the bot’s name. The User-agent field is examined to determine whether a log line comes from a bot or a real user.--enable-static Specifies tracking of all static files (images, JS, CSS) in Piwik PRO.--enable-http-redirects This tracks HTTP redirects as page views, with a custom title and custom variable.--enable-reverse-dns Activates reverse DNS, which is used in generating the Visitors &gt; Providers report. NOTE: this may lead to a serious drop in performance as reverse DNS is very slow.--recorders=N Sets a specific number of threads. We recommend matching it to the number of CPU cores in the system.--enable-bulk-tracking Enables bulk tracking mode. Tracking requests will be bunched up and send using bulk request.--recorder-max-payload-size=N When importer uses the Piwik PRO bulk tracking feature in order to boost speed (option--enable-bulk-tracking), this option configures max number of tracking requests that bulk request can contain. Adjust the number of pageviews (or log lines) to see what generates the best performance. More information about log import parameters can be found using the help parameter: Python package piwik_pro_log_analytics --help Python script ./import_logs.py --help  "},{"title":"Import data with server log analytics and standard JavaScript simultaneously​","type":1,"pageTitle":"web_log_analytics","url":"/docs/data-collection/other_integrations/web_log_analytics#import-data-with-server-log-analytics-and-standard-javascript-simultaneously","content":"JavaScript Tracking Client and web server log file analytics can be used at the same time, on the condition that data is recorded for each method in a separate Piwik PRO website. To avoid double counts of visits, follow these steps: Create a new website in Piwik PRO with a name, for example, example.com (log files).Record the website ID of this new website. The website ID will be used for importing log file data.In the command line, force all requests from log files to be recorded in a specific website ID via the command --idsite=X. "},{"title":"Technical requirements​","type":1,"pageTitle":"web_log_analytics","url":"/docs/data-collection/other_integrations/web_log_analytics#technical-requirements","content":"Technical requirements for running Web Log Analytics: Access to the server or server logs - for example via SSHPython 3.6+ - older versions (e.g. 2.6, 2.7 or 3.5) are not supported. Most often you'll want to import your data straight from the server where it is created. To do this, you’ll need to be able to run a Python script on the machine that will send the logs to Piwik PRO.Log Analytics script - this is a script written in Python ensuring that logs are sent to your Piwik PRO instance, available onGitHub Supported log formats: all default log formats for: Nginx, Apache, IIS, Tomcatall common log formats like: NCSA Common log format, Extended log format, W3C Extended log files, Nginx JSONlog files of some popular Cloud Saas services: Amazon CloudFront logs, Amazon S3 logsstreaming media server log files such as: Icecastlog files with and without the virtual host will be imported This script does not directly support importing logs from log aggregation tools, like Grafana Loki or ELK. If you'd like to import logs from one of those, you need to download them to the disk first. Performance considerations &amp; rate limiting ---------------------- The script needs CPU to read and parse the log files, but it is usually Piwik PRO server itself which will limit the import speed due to network latency. To improve performance, you can use the --recorders option to specify the number of parallel threads which will import hits into Piwik PRO. By default we are using one recorder, but you can increase this value until you achieve satisfying speed. If you are Piwik PRO Core user, please make sure, that you are not hitting rate limits, by using --sleep-between-requests-ms flag to slow down the import process. "},{"title":"Channel detection","type":0,"sectionRef":"#","url":"/docs/data-collection/processing/channel_detection","content":"","keywords":""},{"title":"Campaign​","type":1,"pageTitle":"Channel detection","url":"/docs/data-collection/processing/channel_detection#campaign","content":"First we analyze the URL of the tracked event trying to find any campaign related parameters in it. We recognize 6 campaign dimensions: campaign namecampaign keywordcampaign sourcecampaign mediumcampaign IDcampaign contentpaid campaign ID (like gclid) Names for the GET query parameters can be configured for each of the 5 first dimensions. The last one (paid campaign ID) is pre-configured and can't be changed in the application settings. You can configure multiple parameter names for each dimension but in case where more then 1 exists in the tracked URL the last configured is the meaningful one. Note Example: you've configured following parameters for the campaign name: utm_campaign,pk_campaign,somecustom_campaign_param, when you track URL likehttp://a.tld/index?somecustom_campaign_param=abc&amp;pk_campaign=123 the campaign name assigned to the processed Event will be abc becausesomecustom_campaign_param was the last one on the configured list. The same rule apply in case where some configured parameter is present twice in the tracked URL. Note Example: you've configured following parameter for the campaign name: pk_campaign, when you track URL likehttp://a.tld/index?pk_campaign=abc&amp;pk_campaign=123 the campaign name assigned to the processed Event will be 123 because this was the last occurence of the pk_campaign in the URL. When detecting campains we don't consider only the GET query parameters but also a URL fragment. URL fragmetns has higher priority, so if a configured campaign parameter is present in both a query and a fragment then it's value from the fragment is the meaningful one. Note Example: you've configured following parameter for the campaign name: pk_campaign, when you track URL likehttp://a.tld/index?pk_campaign=abc#pk_campaign=123 the campaign name assigned to the processed Event will be 123 because this was the value of the pk_campaign nested in the URL fragment. Maximum allowed length for each of the campaign dimensions is 1024 characters . "},{"title":"Direct​","type":1,"pageTitle":"Channel detection","url":"/docs/data-collection/processing/channel_detection#direct","content":"Next we analyze the Referer HTTP header. If it's empty or contains one of your configured site domains then the event is accounted as Direct, bothmedium and source are set to Direct Direct is also a fallback when all of the detection steps descibed below failed. "},{"title":"Search Engine​","type":1,"pageTitle":"Channel detection","url":"/docs/data-collection/processing/channel_detection#search-engine","content":"If the Referer HTTP header matches any URL pattern of search engines we recognize it's accounted as Search Engine , `medium` is set to Organic and `source` is set to the name of recognized search engine. We recognize following services as search engines: 1.cz118 700123people360searchAbachoABCsøkAcoonAgueaAllaverksamheterAlexaAlice AdslAll.byAllesklarAllTheInternetAllTheWebAlohaFindAltaVistaAOLApollo lvApollo7AportAramaArcorAriannaAskAvira SafeSearchAtlasauoneauone ImagesAustronautBabylonBaiduBiglobeBiglobe ImagesBingBing ImagesblekkoBlogdiggerBlogpulseBluewinBraveCanoe.caCentrumCharterClaro SearchClixCốc CốcComcastCompuserve.com (Enhanced by Google)Conduit.comCrawlerCuilDaemon searchDasOertlicheDasTelefonbuchDaumDelfi EEDelfi lvDiggdir.comDisconnectSearchdmozDuckDuckGoEarthlinkEcosiaEl MundoEniroEntirewebeoEpicSearch.inEuripEuroseekEveryclickExaleadExciteFacebookFast Browser SearchFindhurtigFireballFirstsfindFixsucheFlix.deFoooooForestleFranciteFreeFreeCauseFreenetFriendFeedFrontierGAISGenieoGeonaGibiruGigablastGigablast (Directory)GnadenmeerGomeogooGoogleGoogle BlogsearchGoogle Custom SearchGoogle ImagesGoogle MapsGoogle NewsGoogle ScholarGoogle ShoppingGoogle syndicated searchGoogle TranslationsGoogle VideoGoYellow.deGule SiderHaosouHighBeamHit-ParadeHolmesHooseekHotbotI-playIcerocketICQIlse NLiMeshInboxInfoSpaceInteriaIsodelenIxQuickJungle KeyJungle SpiderJyxoK9 Safe SearchKatawebKensaqKvasirLa Toile Du Québec (Google)LabanLatneLiloLo.stLookAnyLookseekLooksmartLycosmaailm.comMailruMammaMeinestadt.deMeta.uaMetaCrawler DEMetagerMetager2Mister WongMojeekMonstercrawlermozbotMySpaceMyWebSearchNajdi.siNateNaverNeedtofindNetiNiftyNifty VideosNigmaOnet.plOnline.noOnlySearchOpplysningen 1881OrangePaperballPeopleCheckPeoplePCPicsearchPlazooPlusNetworkPoisk.Ruqip.ruQualigoQwantRakutenRamblerRiksdelenRoad RunnerrpmfindSapoScour.comSearch.chSearch.comSearchalotSearchCanvasSearchLockSearchySeeSaaSetoozSeznamSeznam VideaSharelookSkynetsm.cnsm.deSmartAddressbarSmartShoppingSnap.doSo-netSo-net VideosSoftonicSogouSosoSputnikstart.fyiStartPageStartpagina (Google)StartsidenSuche.infoSuchmaschine.comSuchnaseSurf CanyonT-OnlinetalimbaTalkTalkTarmotTechnoratiTeomaTerraTiscaliTixumaToolbarhomeToppreise.chTrouvez.comTrovaRapidoTrusted SearchTwinglyuol.com.brURL.ORGanzierVindenVindexVirgilioVoilaVolnyWalhelloWeb.deWeb.nlweboramaWebSearchWedooWinampWirtualna PolskaWitchWoopiewww väravX-RechercheYahoo!Yahoo! DirectoryYahoo! ImagesYahoo! JapanYahoo! Japan ImagesYahoo! Japan VideosYamYandexYandex ImagesYasniYatedoYellowmapYippyYouGooZapmetaZhongsouZoekZoekenZoohooZoznamZxuso묻지마 검색 "},{"title":"Social​","type":1,"pageTitle":"Channel detection","url":"/docs/data-collection/processing/channel_detection#social","content":"Similar thing happens when it comes to social media. If the Referer HTTP header matches a URL pattern of the Social Media services that we recognize then the event is accounted as Social , `medium` is set to Referral and `source` is set to then name of detected social media service. We recognize following services as social media: BadooBeboBlackPlanetBuzznetClassmates.comCyworldGaia OnlineGeni.comGitHubGoogle%2BDoubanDribbbleFacebookFetlifeFlickrFlixsterFotologFoursquareFriends ReunitedFriendstergreeHabooHacker Newshi5Hyvesidenti.caInstagramlang-8Last.fmLinkedInLiveJournalMastodonMeinVZMixiMoiKrug.ruMultiplymy.mail.ruMyHeritageMyLifeMyspacemyYearbookNasza-klasa.plNetlogOdnoklassnikiOrkutOzonePeepethPinterestPlaxoredditRenrenSkyrockSonico.comStackOverflowStudiVZTaggedTaringa!TelegramTuentitumblrTwitterSourceforgeStumbleUponVkontakteYouTubeV2EXViadeoVimeovkrugudruzei.ruWAYNWeiboWeeWorldWindows Live SpacesXangaXING "},{"title":"Website​","type":1,"pageTitle":"Channel detection","url":"/docs/data-collection/processing/channel_detection#website","content":"Finally when Referer HTTP header exists and contains some URL but it's not configured as one of your website domains and it neither matches a search engine nor a social media service then it's accounted as just Website , `medium` is set to Referral and `source` is set to the domain name extracted from the referrer URL. "},{"title":"event_type_detection","type":0,"sectionRef":"#","url":"/docs/data-collection/processing/event_type_detection","content":"","keywords":""},{"title":"Conversion​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#conversion","content":"First step in the event type detection process is a check for conversion signs in the tracked event. If your tracked event had an idgoalparameter with the ID value other than 0 then it will be marked asGoalConversion type. "},{"title":"Ping​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#ping","content":"Then the ping parameter is analyzed. Depending on it's value one of the following ping types will be assigned: values 1, 2 and 3 result in Heartbeat ping typevalue of 4 results in Deanonymization ping typevalue of 5 results in PagePerformance ping typevalue of 6 results in CustomPing ping type Values outside of that range will cause an error which results in BrokenEvent. "},{"title":"Download​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#download","content":"Event will be categorized as Download when download parameter of the tracked event is provided. "},{"title":"Outlink​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#outlink","content":"Event will be categorized as Outlink when link parameter of the tracked event is provided. Consent form impression ~~~~~~~~~~~~~~~~~~ Event will be categorized as ConsentFormImpression when e_cparameter of the tracked event has value consent_form_impressionassigned. "},{"title":"Consent form click​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#consent-form-click","content":"Event will be categorized as ConsentFormClick when e_c parameter of the tracked event has value consent_form_click assigned. "},{"title":"Consent decision​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#consent-decision","content":"Event will be categorized as ConsentDecision when e_c parameter of the tracked event has value consent_decision assigned. "},{"title":"SharePoint​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#sharepoint","content":"SharePoint event type detection is a bit more complicated. For the event to be categorized as SharePoint type two things must occur: Custom Variable 1 key has to be equal to ppas.sharepoint.plugine_c parameter has to be equal to either download or search "},{"title":"Custom event​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#custom-event","content":"Event will be categorized as Custom when e_c and e_a parameters of the tracked event are provided. Content interaction ~~~~~~~~~~~~~~~~~~ Event will be categorized as ContentInteraction when c_i and c_nparameters of the tracked event are provided. "},{"title":"Content impression​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#content-impression","content":"Event will be categorized as ContentImpression when only c_nparameter of the tracked event is provided (and c_i is not). "},{"title":"Cart update​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#cart-update","content":"Event will be categorized as CartUpdated when idgoal parameter of the tracked event is equal to 0 and ec_id parameter is NOT provided. "},{"title":"Order completed​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#order-completed","content":"Event will be categorized as OrderCompleted when idgoal parameter of the tracked event is equal to 0 but also ec_id parameter is provided. "},{"title":"Site search​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#site-search","content":"Event will be categorized as Search when either search parameter of the tracked event is provided or a search term was detected in the tracked url (provided as the url parameter). "},{"title":"Page view​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#page-view","content":"When every other detection step failed then your event will be categoried as a simple PageView. Special cases As you have probly noticed already, there are 3 event types missing in the detection process steps. AbandonedCartExcludedEventBrokenEvent That is because those type are not &quot;detected&quot; but rather are a result of the post-processing of an event or a session. "},{"title":"Abandoned Cart​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#abandoned-cart","content":"When a session did not track a OrderCompleted event, the last event ofCartUpdate type will be converted to AbandonedCart. "},{"title":"Excluded Event​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#excluded-event","content":"There are several ways of excluding an event (e.g. by blacklisting source IP or User-Agent header matching). If an event matches given criteria it will be excluded from the reports but is still tracked and receives ExcludedEvent type. If you experience any report abnormalities you may check Tracker Debugger if any of the legitimate traffic is not excluded by mistake. "},{"title":"Broken Event​","type":1,"pageTitle":"event_type_detection","url":"/docs/data-collection/processing/event_type_detection#broken-event","content":"The last type is assigned to the tracked event when any error occurs during the processing (e.g. you provided incorrect value in the idgoalparameter, provided idsite does not exist, etc). That way you can still check it in the Tracker Debugger and attached error message will tell you what is wrong with it. "},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":""},{"title":"Integrations","type":0,"sectionRef":"#","url":"/docs/analytics/integrations/","content":"Integrations Documents in this section describe the structure of data provided by third-party integrations. google_ads google_search_console sharepoint","keywords":""},{"title":"JavaScript Tracking Client","type":0,"sectionRef":"#","url":"/docs/data-collection/web/javascript_tracking_client/","content":"JavaScript Tracking Client installation.rst api.rst reserved_names.rst","keywords":""},{"title":"reserved_names","type":0,"sectionRef":"#","url":"/docs/data-collection/web/javascript_tracking_client/reserved_names","content":"reserved_names js Reserved names The following global names are used by JavaScript Tracking Client. Websites that will use this library should avoid using variables with identical names. Piwik_paqJSON_PIWIKpiwikPluginAsyncInitpiwikAsyncInitAnalyticsTrackerpiwik_install_trackerpiwik_tracker_pausepiwik_download_extensionspiwik_hosts_aliaspiwik_ignore_classespiwik_logpiwik_tracksevenTag","keywords":""},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/create-a-blog-post","content":"","keywords":""},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/docs/tutorial/tutorial-basics/create-a-blog-post#create-your-first-post","content":"Create a file at blog/2021-02-28-greetings.md: blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much you like.  A new blog post is now available at http://localhost:3000/blog/greetings. "},{"title":"Piwik PRO Library for Angular","type":0,"sectionRef":"#","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#installation","content":""},{"title":"NPM​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#npm","content":"To use this package in your project, run the following command. npm install @piwikpro/ngx-piwik-pro  "},{"title":"Basic setup​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#basic-setup","content":"In your Angular Project, include the NgxPiwikProModule in the highest level application module. ie AddModule. To set up the Piwik PRO Tag Manager container in the app, the easiest way is to call the forRoot() method. In the arguments, pass your app ID and your account URL as parameters (marked 'container-id' and 'container-url' in the example below). import { NgxPiwikProModule } from '@piwikpro/ngx-piwik-pro'; @NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, NgxPiwikProModule.forRoot('container-id', 'container-url') // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ], providers: [], bootstrap: [AppComponent] }) export class AppModule { }  "},{"title":"Set up the Routing Module​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#set-up-the-routing-module","content":"We provide a second Module Dependency to configure Router Event Bindings and perform automatic page views every time your application navigates to another page. Add NgxPiwikProRouterModule on AppModule to enable auto track Router events. IMPORTANT: This Module subscribes to Router events when the bootstrap component is created, and then cleans up any subscriptions related to previous component when it is destroyed. You may get some issues if using this module with server side rendering or multiple bootstrap components. If that's the case, we recommend subscribing to the page view events manually. import { NgxPiwikProModule, NgxPiwikProRouterModule } from '@piwikpro/ngx-piwik-pro'; ... @NgModule({ ... imports: [ ... NgxPiwikProModule.forRoot('container-id'), NgxPiwikProRouterModule // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ] }) export class AppModule {}  "},{"title":"Advanced setup for the Routing Module​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#advanced-setup-for-the-routing-module","content":"You can customize some rules to include/exclude routes on NgxPiwikProRouterModule. The include/exclude settings allow: Simple route matching: { include: [ '/full-uri-match' ] };Wildcard route matching: { include: [ '*/public/*' ] };Regular Expression route matching: { include: [ /^\\/public\\/.*/ ] }; import { NgxPiwikProModule, NgxPiwikProRouterModule } from '@piwikpro/ngx-piwik-pro'; ... @NgModule({ ... imports: [ ... NgxPiwikProModule.forRoot('container-id'), NgxPiwikProRouterModule.forRoot({ include: [...], exclude: [...] }) // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ] }) export class AppModule {}  "},{"title":"Piwik PRO Services​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#piwik-pro-services","content":""},{"title":"Send Custom Events​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#send-custom-events","content":"@Component( ... ) export class TestFormComponent { constructor( private customEventsService: CustomEventsService ) {} onUserInputName() { ... this.customEventsService.trackEvent('user_register_form', 'enter_name', 'Name', 'Value'); } onUserInputEmail() { ... this.customEventsService.trackEvent('user_register_form', 'enter_email', 'Email', 'Value'); } onSubmit() { ... this.customEventsService.trackEvent('user_register_form', 'submit', 'Sent'); } }  "},{"title":"Send page views and virtual page views​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#send-page-views-and-virtual-page-views","content":"@Component(...) export class TestPageComponent implements OnInit { constructor( protected pageViewsService: PageViewsService ) {} ngOnInit() { this.pageViewsService.trackPageView('Title') } }  "},{"title":"API​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#api","content":""},{"title":"Page Views Service​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#page-views-service","content":"A page view is the most basic type of a tracked event. It represents a single page viewing action. Methods​ trackPageView(customPageTitle?: string) - Tracks a visit on the page that the function was run on. "},{"title":"User Management​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#user-management","content":"Methods​ getUserId() - The function that will return user ID.setUserId(userId: string) - user ID is an additional parameter that allows you to aggregate data. When set up, you will be able to search through sessions by this parameter, filter reports through it or create Multi attribution reports using User ID.resetUserId() - Clears previously set userID, e.g. when visitor logs out.getVisitorId() - Returns 16-character hex ID of the visitor.getVisitorInfo() - Returns visitor information in an array: new visitor flag indicating new (1) or returning (0) visitorvisitor ID (UUID)first visit timestamp (Unix epoch time)previous visit count (0 for first visit)current visit timestamp (Unix epoch time)last visit timestamp (Unix epoch time or '' if N/A)last e-commerce order timestamp (Unix epoch time or '' if N/A) "},{"title":"Custom Events​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#custom-events","content":"Custom events enable tracking visitor actions that are not predefined in the existing JavaScript Tracking Client API, allowing web analysts to accurately measure and analyze any domain. Methods​ trackEvent(category: string, action: string, name?: string, value?: number) - Tracks a custom event, e.g. when a visitor interacts with the page. "},{"title":"Site search Service​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#site-search-service","content":"Site search tracking gives you insights into how visitors interact with the search engine on your website - what they search for and how many results they get back. Methods​ trackSiteSearch(keyword: string, category?: string, searchCount?: number, dimensions?: Object) - Tracks search requests on a website. "},{"title":"E-Commerce Service​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#e-commerce-service","content":"Methods​ addEcommerceItem(productSKU: string, productName: string, productCategory: string | string[], productPrice: number, productQuantity: number) - Adds a product to a virtual shopping cart. If a product with the same SKU is in the cart, it will be removed first. Does not send any data to the Collecting &amp; Processing Pipeline.removeEcommerceItem(productSKU: string) - Removes a product with the provided SKU from a virtual shopping cart. If multiple units of that product are in the virtual cart, all of them will be removed. Does not send any data to the Collecting &amp; Processing Pipeline.clearEcommerceCart() - Removes all items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing Pipeline.getEcommerceItems() - Returns a copy of items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing PipelinetrackEcommerceOrder() - Tracks a successfully placed e-commerce order with items present in a virtual cart (registered using addEcommerceItem).trackEcommerceCartUpdate(cartAmount: number) - Tracks items present in a virtual shopping cart (registered with addEcommerceItem)setEcommerceView(productSKU: string, productName?: string, productCategory?: string[], productPrice?: string) - Tracks product or category view. Must be followed by a page view. "},{"title":"Content Tracking Service​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#content-tracking-service","content":"Content Tracking lets you track what content is visible on your site and how users interact with it. "},{"title":"Methods​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#methods-5","content":"trackContentImpression(contentName: string, contentPiece: string, contentTarget: string) - Tracks manual content impression event.trackContentInteraction(contentInteraction: string, contentName: string, contentPiece: string, contentTarget: string) - Tracks manual content interaction event. "},{"title":"Download and outlink Service​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#download-and-outlink-service","content":"trackLink(url: string, linkType: string, customData?: object, callback?: (params: any) =&gt; void) - Manually tracks outlink or download event with provided values.enableLinkTracking(enable: boolean) - Enables or disables automatic link tracking. If enabled, left, right and middle clicks on links will be treated as opening a link. Opening a links to an external site (different domain) creates an outlink event. Opening a link to a downloadable file creates a download event.setLinkClasses(classes: string[]) - Sets a list of class names that indicate whether a link is an outlink and not download.setDownloadClasses(classes: string[]) - Sets a list of class names that indicate whether a list is a download and not an outlink.setDownloadExtensions(extensions: string[]) - Overwrites the list of file extensions indicating that a link is a download.addDownloadExtensions(extensions: string[]) - Adds new extensions to the download extensions list.removeDownloadExtensions(extensions: string[]) - Removes extensions from the download extensions list.setLinkTrackingTimer(time: number) - When a visitor produces an events and closes the page immediately afterwards, e.g. when opening a link, the request might get cancelled. To avoid loosing the last event this way, JavaScript Tracking Client will lock the page for a fraction of a second (if wait time hasn’t passed), giving the request time to reach the Collecting &amp; Processing Pipeline.getLinkTrackingTimer() - Returns lock/wait time after a request set by setLinkTrackingTimer.setIgnoreClasses(classes: string[]) - Set a list of class names that indicate a link should not be tracked. "},{"title":"Goal Conversions​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#goal-conversions","content":"Goals let you define important actions registered in your application and track conversions when the conditions for the action are fulfilled. trackGoal(goalId: number | string, conversionValue: number, dimensions?: Object) - Tracks manual goal conversion. "},{"title":"Custom Dimensions​","type":1,"pageTitle":"Piwik PRO Library for Angular","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_Angular#custom-dimensions","content":"setCustomDimensionValue(customDimensionId: string | number, customDimensionValue: string) - Sets a custom dimension value to be used later.deleteCustomDimension(customDimensionId: string) - Removes a custom dimension with the specified ID.getCustomDimensionValue(customDimensionId: string | number) - Returns the value of a custom dimension with the specified ID. "},{"title":"Create a Page","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/create-a-page","content":"","keywords":""},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial/tutorial-basics/create-a-page#create-your-first-react-page","content":"Create a file at src/pages/my-react-page.js: src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); }  A new page is now available at http://localhost:3000/my-react-page. "},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial/tutorial-basics/create-a-page#create-your-first-markdown-page","content":"Create a file at src/pages/my-markdown-page.md: src/pages/my-markdown-page.md # My Markdown page This is a Markdown page  A new page is now available at http://localhost:3000/my-markdown-page. "},{"title":"Create a Document","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/create-a-document","content":"","keywords":""},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial/tutorial-basics/create-a-document#create-your-first-doc","content":"Create a Markdown file at docs/hello.md: docs/hello.md # Hello This is my **first Docusaurus document**!  A new document is now available at http://localhost:3000/docs/hello. "},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial/tutorial-basics/create-a-document#configure-the-sidebar","content":"Docusaurus automatically creates a sidebar from the docs folder. Add metadata to customize the sidebar label and position: docs/hello.md --- sidebar_label: 'Hi!' sidebar_position: 3 --- # Hello This is my **first Docusaurus document**!  It is also possible to create your sidebar explicitly in sidebars.js: sidebars.js module.exports = { tutorialSidebar: [ 'intro', 'hello', { type: 'category', label: 'Tutorial', items: ['tutorial-basics/create-a-document'], }, ], };  "},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/deploy-your-site","content":"","keywords":""},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial/tutorial-basics/deploy-your-site#build-your-site","content":"Build your site for production: npm run build  The static files are generated in the build folder. "},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial/tutorial-basics/deploy-your-site#deploy-your-site-1","content":"Test your production build locally: npm run serve  The build folder is now served at http://localhost:3000/. You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). "},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/congratulations","content":"","keywords":""},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"/docs/tutorial/tutorial-basics/congratulations#whats-next","content":"Read the official documentationModify your site configuration with docusaurus.config.jsAdd navbar and footer items with themeConfigAdd a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community "},{"title":"installation","type":0,"sectionRef":"#","url":"/docs/data-collection/web/javascript_tracking_client/installation","content":"","keywords":""},{"title":"Installing tracking code via code snippet​","type":1,"pageTitle":"installation","url":"/docs/data-collection/web/javascript_tracking_client/installation#installing-tracking-code-via-code-snippet","content":"Installation via snippet should only be carried out if the Tag Manager is not available or when options of &quot;Piwik PRO Analytics template&quot; do not let you configure your use case. Note We highly recommend using the template from the Tag Manager to set up tracking for the Analytics module (including customizations). Note Basic configuration will setup a single domain configuration. For other options, see: jtc-installation-alternative-configurations. This code should be added in the head section of the page just before the closing &lt;/head&gt; tag. Additionally, the snippet must be configured in the following way: String XXX-XXX-XXX-XXX-XXX should be replaced with app ID(e.g. efcd98a5-335b-48b0-ab17-bf43f1c542be).String https://your-instance-name.piwik.pro/ should be replaced with your PPAS instance address. &lt;!-- Piwik --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var _paq = _paq || []; _paq.push([&quot;trackPageView&quot;]); _paq.push([&quot;enableLinkTracking&quot;]); (function() { var u=&quot;https://your-instance-name.piwik.pro/&quot;; _paq.push([&quot;setTrackerUrl&quot;, u+&quot;ppms.php&quot;]); _paq.push([&quot;setSiteId&quot;, &quot;XXX-XXX-XXX-XXX-XXX&quot;]); var d=document, g=d.createElement(&quot;script&quot;), s=d.getElementsByTagName(&quot;script&quot;)[0]; g.type=&quot;text/javascript&quot;; g.async=true; g.defer=true; g.src=u+&quot;ppms.js&quot;; s.parentNode.insertBefore(g,s); })(); &lt;/script&gt;  This code initializes the JavaScript Tracking Client in following ways: Initializes the global _paq command queue that schedules commands to be run when the JavaScript Tracking Client library is loaded.Schedules basic configuration of JavaScript Tracking Client using_paq.push.Creates a &lt;script&gt; tag that asynchronously loads the JavaScript Tracking Client library. When loading, the snippet is added on the page. The JavaScript Tracking Client will start tracking visitor actions starting with page view. "},{"title":"Alternative configurations​","type":1,"pageTitle":"installation","url":"/docs/data-collection/web/javascript_tracking_client/installation#alternative-configurations","content":""},{"title":"Tracking domains and all subdomains​","type":1,"pageTitle":"installation","url":"/docs/data-collection/web/javascript_tracking_client/installation#tracking-domains-and-all-subdomains","content":"To track all data between domain and all its subdomains, we must use cookies configured with the following snippet: _paq.push([&quot;setTrackerUrl&quot;, u+&quot;ppms.php&quot;]); _paq.push([&quot;setSiteId&quot;, &quot;XXX-XXX-XXX-XXX-XXX&quot;]); // Share the tracking cookie across example.com, www.example.com, subdomain.example.com, ... _paq.push([&quot;setCookieDomain&quot;, &quot;*.example.com&quot;]); // Tell Piwik the website domain so that clicks on these domains are not tracked as &quot;Outlinks&quot; _paq.push([&quot;setDomains&quot;, &quot;*.example.com&quot;]); _paq.push([&quot;trackPageView&quot;]);  "},{"title":"Tracking multiple domains as one site​","type":1,"pageTitle":"installation","url":"/docs/data-collection/web/javascript_tracking_client/installation#tracking-multiple-domains-as-one-site","content":"To set up tracking between multiple domains, you must use multiple functions: setDomains&lt;jtc-api-setDomains&gt; to set a list of domains andenableCrossDomainLinking&lt;jtc-api-enableCrossDomainLinking&gt; to enable cross domain linking: // specify which domains should be linked _paq.push([&quot;setDomains&quot;, [&quot;*.example.com&quot;, &quot;otherdomain.com&quot;]]); // enable cross domains linking _paq.push([&quot;enableCrossDomainLinking&quot;]);  Note For cross-domain linking to work, you have to enable link tracking usingenableLinkTracking&lt;jtc-api-enableLinkTracking&gt; function. Remember that links added dynamically to the HTML document won't be tracked unless you call enableLinkTracking&lt;jtc-api-enableLinkTracking&gt; again. You can learn more about tracking dynamically added linkshere&lt;guide_tracking_link_clicks_on_pages_with_dynamically_generated_content&gt;. "},{"title":"Tracking subdirectories of domain as separate websites​","type":1,"pageTitle":"installation","url":"/docs/data-collection/web/javascript_tracking_client/installation#tracking-subdirectories-of-domain-as-separate-websites","content":"To differentiate parts of a website as another site, you must configure JavaScript Tracking Client this way: _paq.push([&quot;setSiteId&quot;, &quot;App1&quot;]); _paq.push([&quot;setTrackerUrl&quot;, u+&quot;ppms.php&quot;]); _paq.push([&quot;trackPageView&quot;]);  Afterwards, you can change configuration for selected paths and track them as another site: _paq.push([&quot;setSiteId&quot;, &quot;App2&quot;]); _paq.push([&quot;setCookiePath&quot;, &quot;/data/something_useful&quot;]); _paq.push([&quot;setDomains&quot;, &quot;example.com/data/something_useful&quot;]); _paq.push([&quot;setTrackerUrl&quot;, u+&quot;ppms.php&quot;]); _paq.push([&quot;trackPageView&quot;]);  This way, all actions tracked on /data/something_useful will be tracked for App2 instead of App1. If you wish to track a group of pages as separate site, you can use the wildcard in the setDomains&lt;jtc-api-setDomains&gt; function. "},{"title":"Collecting page performance metrics​","type":1,"pageTitle":"installation","url":"/docs/data-collection/web/javascript_tracking_client/installation#collecting-page-performance-metrics","content":"To set up page performance metrics gathering use thesetTimingDataSamplingOnPageLoad&lt;jtc-api-setTimingDataSamplingOnPageLoad&gt;function: // measure performance on 33% of page loads _paq.push([&quot;setTimingDataSamplingOnPageLoad&quot;, 33]); // track page view and potentially measure page performance _paq.push([&quot;trackPageView&quot;]);  "},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/docs/tutorial/intro","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#getting-started","content":"Get started by creating a new site. Or try Docusaurus immediately with docusaurus.new. "},{"title":"What you'll need​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#what-youll-need","content":"Node.js version 16.14 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies. "},{"title":"Generate a new site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#generate-a-new-site","content":"Generate a new Docusaurus site using the classic template. The classic template will automatically be added to your project after you run the command: npm init docusaurus@latest my-website classic  You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor. The command also installs all necessary dependencies you need to run Docusaurus. "},{"title":"Start your site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#start-your-site","content":"Run the development server: cd my-website npm run start  The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there. The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/. Open docs/tutorial/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. "},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-extras/manage-docs-versions","content":"","keywords":""},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial/tutorial-extras/manage-docs-versions#create-a-docs-version","content":"Release a version 1.0 of your project: npm run docusaurus docs:version 1.0  The docs folder is copied into versioned_docs/version-1.0 and versions.json is created. Your docs now have 2 versions: 1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs "},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial/tutorial-extras/manage-docs-versions#add-a-version-dropdown","content":"To navigate seamlessly across versions, add a version dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };  The docs version dropdown appears in your navbar:  "},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial/tutorial-extras/manage-docs-versions#update-an-existing-version","content":"It is possible to edit versioned docs in their respective folder: versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello "},{"title":"Piwik PRO SDK for iOS","type":0,"sectionRef":"#","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS","content":"","keywords":""},{"title":"SDK configuration​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#sdk-configuration","content":""},{"title":"Server​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#server","content":"You need a Piwik PRO account on the cloud or an on-premises setup which your mobile app will communicate with. For details, please visit the Piwik PRO website.Create a new website (or app) in the Piwik PRO web interface.Copy and note the Website ID from &quot;Administration &gt; Websites &amp; apps &gt; Installation&quot; and your server address. "},{"title":"Client​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#client","content":"SDK integration - CocoaPods​ Use the following in your Podfile: pod 'PiwikPROSDK', '~&gt; VERSION'  Replace VERSION with the latest release name, e.g. '~&gt; 1.1.5'. You can check the latest version of the SDK on the project page. Then run pod install. In every file you wish to use the PiwikPROSDK, don't forget to import it. SDK integration - Swift Package Manager​ Before you start, make sure you are using Xcode version 12 or later. Starting with version 1.1.4 of the Piwik Pro SDK for iOS, we have introduced support for Swift Package Manager for use with Xcode. If you are migrating a project from a CocoaPods, run the command pod deintegrate to remove CocoaPods from your Xcode project. Then remove the remaining Piwik Pro SDK files. To install the Piwik Pro SDK, in Xcode navigate to File &gt; Add Packages. Altermatively, go to your project's settings, select Package Dependencies tab and click on the + button. Enter the URL of our Piwik PRO SDK GitHub repository https://github.com/PiwikPRO/piwik-pro-sdk-framework-ios Select the version of Piwik Pro SDK you would like to use. For new projects, we recommend using the latest version. Bear in mind that Piwik Pro SDK is supporting Swift Package Manager since version 1.1.4. Click on &quot;Add Package&quot; button and wait for Xcode to finish downloading the Swift Package into your project. Next, select project in the Project Navigator. In the target list, select the target that builds the application and then click on the Build Settings tab. Find Other Linker Flags setting and double-click on it. If the -ObjC flag is not in the list, click + and add it. If you do not add the -ObjC flag, some parts of the API may not be visible and unexpected Piwik PRO SDK behaviour may occur while the application is running. You may experience some difficult to understand crash messages &quot;+[NSString visitorID]: unrecognized selector sent to class 0x1ef0739a8&quot; and other difficult to predict issues. Configuration​ To configure the tracker you will need the URL address of your tracking server and website ID (you can find it in Administration &gt; Websites &amp; apps &gt; Installation on the web interface). Open the AppDelegate.m file and add sdk import: #import &lt;PiwikPROSDK/PiwikPROSDK.h&gt;  Configure the tracker with your website ID and URL in the application delegate: - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { // Configure the tracker in your application delegate [PiwikTracker sharedInstanceWithSiteID:@&quot;01234567-89ab-cdef-0123-456789abcdef&quot; baseURL:[NSURL URLWithString:@&quot;https://your.piwik.pro.server.com&quot;]]; return YES; }  Using Piwik PRO SDK with the Swift programming language​ The Piwik PRO SDK is written in the Objective-C programming language. However, after installing the library from cocoapods, Xcode automatically generates Swift syntax for Objective-C calls. When you edit a Swift file and type in an Objective-C class name, Swift version of the header file will be displayed. Example of using the method to track a view in Objective-c: [[PiwikTracker sharedInstance] sendView:@&quot;Menu&quot;];  Same example in Swift: import PiwikPROSDK PiwikTracker.sharedInstance()?.sendView(view: &quot;Menu&quot;)  If there is a need to create the bridging header, see the apple tutorial &quot;Importing Objective-C into Swift&quot; for additional information. "},{"title":"Using Piwik PRO SDK​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#using-piwik-pro-sdk","content":"SDK supports several different types of actions which can be tracked. If the event dispatch was unsuccessful (network error, server error, etc), the event will be saved in the disk cache and processing will be retried during the next dispatch attempt (in configured dispatch interval). Each event is stored in the disk cache for a specified cache age - the time which defines the maximum time for which event is saved locally. "},{"title":"Data anonymization​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#data-anonymization","content":"Anonymization is the feature that allows tracking a user's activity for aggregated data analysis even if the user doesn't consent to track the data. If a user does not agree to be tracked, he will not be identified as the same person across multiple sessions. Personal data will not be tracked during the session (user ID, email and device ID) If the anonymization is enabled, a new visitor ID will be created each time the application starts. Anonymization is enabled by default. You can turn the anonymization on and off by setting the value of the variable isAnonymizationEnabled: [PiwikTracker sharedInstance].isAnonymizationEnabled = NO;  "},{"title":"Tracking screen views​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-screen-views","content":"Requires Analytics The basic functionality of the SDK is the tracking screen views which represent the content the user is viewing in the application. To track a screen you only need to provide the name of the screen. This name is internally translated by the SDK to an HTTP URL as the Piwik PRO server uses URLs for tracking views. Additionally, Piwik PRO SDK uses prefixes which are inserted in generated URLs for various types of action(s). For tracking screen views it will use prefix screen by default however automatic prefixing can be disabled with the isPrefixingEnabled option. To start tracking screen views, add the following code to your view controllers. - (void)viewDidAppear:(BOOL)animated { [super viewDidAppear:animated]; [[PiwikTracker sharedInstance] sendView:@&quot;Menu&quot;]; }  A screen name (required) – title of the action being tracked. The appropriate screen path will be generated for this action. It is also possible to track multiple views in one event. For that you can use the method sendViews: [[PiwikTracker sharedInstance] sendViews:@[ @&quot;menu&quot;, @&quot;view 1&quot;, @&quot;screen view 2&quot; ]];  "},{"title":"Tracking custom events​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-custom-events","content":"Requires Analytics Custm events can be used to track the user's interaction with various custom components and features of your application, such as playing a song or a video. Category and action parameters are required while the name and value are optional. [[PiwikTracker sharedInstance] sendEventWithCategory:@&quot;Video&quot; action:@&quot;Play&quot; name:@&quot;Pirates&quot; value:@185 path: @&quot;/main/actionScreen&quot;];  The sendEventWithCategory method allows to specify next parameters: A category (required) – this String defines the event category. You may define event categories based on the class of user actions ( e.g. clicks, gestures, voice commands), or you may define them based upon the features available in your application (e.g. play, pause, fast forward, etc.). An action (required) – this String defines the specific event action within the category specified. In the example, we are essentially saying that the category of the event is user clicks, and the action is a button click. A name (optional) – this String defines a label associated with the event. For example, if you have multiple button controls on a screen, you might use the label to specify the specific View control identifier that was clicked. A value (optional) – this Float defines a numerical value associated with the event. For example, if you were tracking &quot;Buy&quot; button clicks, you might log the number of items being purchased, or their total cost. A path (optional) – the path under which this event occurred. For more resources, please visit: Custom Events OverviewUltimate guide to event tracking. "},{"title":"Tracking exceptions​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-exceptions","content":"Requires Analytics Tracking exceptions allow the measurement of exceptions and errors in your app. Exceptions are tracked on the server in a similar way as screen views. [[PiwikTracker sharedInstance] sendExceptionWithDescription:@&quot;Content download error&quot;];  A description (required) – provides the exception message. Bear in mind that Piwik is not a crash tracker, use this sparingly. "},{"title":"Tracking social interactions​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-social-interactions","content":"Requires Analytics Social interactions such as likes, shares and comments in various social networks can be tracked as below. [[PiwikTracker sharedInstance] sendSocialInteractionWithAction:@&quot;like&quot; network:@&quot;Facebook&quot;];  An interaction (required) – defines the social interaction, e.g. &quot;Like&quot;. A network (required) – defines the social network associated with interaction, e.g. &quot;Facebook&quot; "},{"title":"Tracking downloads​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-downloads","content":"Requires Analytics You can track the downloads initiated by your application. [[PiwikTracker sharedInstance] sendDownload:@&quot;http://your.server.com/bonusmap.zip&quot;];  A URL (required) – the URL of the downloaded content. No prefixes are used for tracking downloads, but each event of this type use an additional parameter download whose value equals to specified URL. On the analytics panel all, downloads can be viewed in the corresponding section. "},{"title":"Tracking application installs​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-application-installs","content":"Requires Analytics You can also track installations of your application. This event is sent to the server only once per application version therefore if you wish to track installs, then you can add it in your application delegate immediately after configuring the tracker. - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { // Configure the tracker in your application delegate [PiwikTracker sharedInstanceWithSiteID:@&quot;01234567-89ab-cdef-0123-456789abcdef&quot; baseURL:[NSURL URLWithString:@&quot;https://your.piwik.pro.server.com&quot;]]; [[PiwikTracker sharedInstance] sendApplicationDownload]; return YES; }  Application installation is only tracked during the first launch. In the case of the application being installed but not run, the app installation will not be tracked. "},{"title":"Tracking outlinks​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-outlinks","content":"Requires Analytics For tracking outlinks to external websites or other apps opened from your application use the sendOutlink method: [[PiwikTracker sharedInstance] sendOutlink:@&quot;http://great.website.com&quot;];  A URL (required) – defines the outlink target. "},{"title":"Tracking search operations​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-search-operations","content":"Requires Analytics Tracking search operations allow the measurement of popular keywords used for various search operations performed inside your application. It can be done via the sendSearchWithKeyword method: [[PiwikTracker sharedInstance] sendSearchWithKeyword:@&quot;Space&quot; category:@&quot;Movies&quot; numberOfHits:@42];  keyword (required) – the searched query that was used in the app. category (optional) – specify a search category. numberOfHits (optional) – we recommend setting the search count to the number of search results displayed on the results page. When keywords are tracked with a count of 0, they will appear in the &quot;No Result Search Keyword&quot; report. "},{"title":"Tracking content impressions and interactions​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-content-impressions-and-interactions","content":"Requires Analytics You can track the impression of the ad in your application as below: [[PiwikTracker sharedInstance] sendContentImpressionWithName:@&quot;name&quot; piece:@&quot;piece&quot; target:@&quot;target&quot;];  When the user interacts with the ad by tapping on it, you can also track it with a similar method: [[PiwikTracker sharedInstance] sendContentInteractionWithName:@&quot;name&quot; interaction:@&quot;click&quot; piece:@&quot;piece&quot; target:@&quot;target&quot;];  A contentName (required) – the name of the content, e.g. &quot;Ad Foo Bar&quot;. A interaction (required) – type of interaction, e.g. click. A piece (optional) – the actual content. For instance the path to an image, video, audio, any text. A target (optional) – the target of the content e.g. the URL of a landing page. "},{"title":"Tracking goals​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-goals","content":"Requires Analytics Goaltracking is used to measure and improve your business objectives. To track goals, you first need to configure them on the server in your web panel. Goals such as, for example, subscribing to a newsletter can be tracked as below with the goal ID that you will see on the server after configuring the goal and optional revenue. The currency for the revenue can be set in the Piwik PRO Analytics settings. You can read more about goals here. [[PiwikTracker sharedInstance] sendGoalWithID:@&quot;27ecc5e3-8ae0-40c3-964b-5bd8ee3da059&quot; revenue:@30];  A goal (required) – tracking request will trigger a conversion for the goal of the website being tracked with this ID. revenue (optional) – a monetary value that was generated as revenue by this goal conversion. "},{"title":"Tracking ecommerce transactions​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-ecommerce-transactions","content":"Requires Analytics Ecommerce transactions (in-app purchases) can be tracked to help you improve your business strategy. To track a transaction you must provide two required values - the transaction identifier and grandTotal. Optionally, you can also provide values for subTotal, tax, shippingCost, discount and list of purchased items as in the example below. [[PiwikTracker sharedInstance] sendTransaction:[PiwikTransaction transactionWithBlock:^(PiwikTransactionBuilder *builder) { builder.identifier = @&quot;transactionID&quot;; builder.grandTotal = @5.0; builder.subTotal = @4.0; builder.tax = @0.5; builder.shippingCost = @1.0; builder.discount = @0.0; [builder addItemWithSku:@&quot;sku1&quot; name:@&quot;bonus&quot; category:@&quot;maps&quot; price:@2.0 quantity:@1]; [builder addItemWithSku:@&quot;sku2&quot; name:@&quot;home&quot; category:@&quot;maps&quot; price:@3.0 quantity:@1]; }]];  An identifier (required) – a unique string identifying the order grandTotal (required) – The total amount of the order, in cents subTotal (optional) – the subtotal (net price) for the order, in cents tax (optional) – the tax for the order, in cents shipping (optional) – the shipping for the order, in cents discount (optional) – the discount for the order, in cents Items (optional) – the items included in the order, use the addItemWithSku method to instantiate items "},{"title":"Tracking deep links and campaigns​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-deep-links-and-campaigns","content":"Requires Analytics Tracking campaign URLs created with the online Campaign URL Builder tool allow you to measure how different campaigns (for example with Facebook ads or direct emails) bring traffic to your application. You can register a custom URL schema in your project settings to launch your application when users tap on the campaign link. The campaign information will be sent to the server together with the next sendView event. More details about campaigns can be found in the documentation. You can track these URLs from the application delegate as below. - (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options { return [[PiwikTracker sharedInstance] sendCampaign:url.absoluteString]; }  A URL (required) – the campaign URL. The URL must contain a campaign name and keyword parameters. "},{"title":"Tracking with custom variables​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-with-custom-variables","content":"The feature will soon be disabled. We recommend using custom dimensions instead. Requires Analytics To track custom name-value pairs assigned to your users or screen views, you can use custom variables. A custom variable can have a visit scope, which means that they are assigned to the whole visit of the user or action scope meaning that they are assigned only to the next tracked action such as screen view. You can find more information about custom variables here: It is required for names and values to be encoded in UTF-8. [[PiwikTracker sharedInstance] setCustomVariableForIndex:1 name:@&quot;filter&quot; value:@&quot;lcd&quot; scope:CustomVariableScopeAction];  An index (required) – a given custom variable name must always be stored in the same &quot;index&quot; per session. For example, if you choose to store the variable name = &quot;Gender&quot; in index = 1 and you record another custom variable in index = 1, then the &quot;Gender&quot; variable will be deleted and replaced with new custom variable stored in index 1. Please note that some of the indexes are already reserved. See Default custom variables section for details. A name (required) – this String defines the name of a specific Custom Variable such as &quot;User type&quot;. Limited to 200 characters. A value (required) – this String defines the value of a specific Custom Variable such as &quot;Customer&quot;. Limited to 200 characters. A scope (required) – this String allows the specification of the tracking event type - &quot;visit&quot;, &quot;action&quot;, etc. The scope is the value from the enum CustomVariableScope and could be CustomVariableScopeVisit or CustomVariableScopeAction. "},{"title":"Tracking with custom dimensions​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-with-custom-dimensions","content":"Requires Analytics You can also use custom dimensions to track custom values as below. [[PiwikTracker sharedInstance] setCustomDimensionForID:1 value:@&quot;english&quot;];  An index (required) – a given custom dimension must always be stored in the same &quot;index&quot; per session, similar to custom variables. In example 1 is our dimension slot. A value (required) – this String defines the value of a specific custom dimension such as &quot;English&quot;. Limited to 200 characters. Assigning a value to an already used index will overwrite the previously assigned value. Note that the custom dimensions data is not sent by itself, but only with other tracking events. Custom dimensions first have to be defined on the server in your web panel. More details about custom dimensions can be found in the documentation: "},{"title":"Tracking profile attributes​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#tracking-profile-attributes","content":"Requires Audience Manager The Audience Manager stores visitors' profiles, which have data from a variety of sources. One of them can be a mobile application. It is possible to enrich the profiles with more attributes by passing any key-value pair like gender: male, favourite food: Italian, etc. It is recommended to set additional user identifiers such as email or User ID. This will allow the enrichment of existing profiles or merging profiles rather than creating a new profile. For example, if the user visited the website, browsed or filled in a form with his/her email (his data was tracked and profile created in Audience Manager) and, afterwards started using a mobile application, the existing profile will be enriched only if the email was set. Otherwise, a new profile will be created. For sending profile attributes use the sendProfileAttributeWithName method: [[PiwikTracker sharedInstance] sendProfileAttributeWithName:@&quot;food&quot; value:@&quot;chips&quot;];  A name (required) – defines profile attribute name (non-null string). A value (required) – defines profile attribute value (non-null string). Aside from attributes, each event also sends parameters, that are retrieved from the tracker instance: WEBSITE_ID - always sent,USER_ID - if It is set. Read more about the User ID,EMAIL - if It is set. Read more about the email,VISITOR_ID - always sent, ID of the mobile application user, generated by SDKDEVICE_ID - it is a device IDFA, which is not set by default (due to platform limitations). In order to set device ID see Device ID section below. Profile attributes for the user that are tracked will be shown on the Audience Manager - Profile Browser tab. Audience manager events are dispatched together with analytics events. Therefore, settings set in the tracker for analytics events processing (dispatch interval, cache size and age, etc.) will be same for audience manager events. Once the audience manager event is dispatched, it is no longer stored locally. "},{"title":"Reading user profile attributes​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#reading-user-profile-attributes","content":"Requires Audience Manager It is possible to read the attributes of a given profile, however, with some limitations. Due to of security reasons to avoid personal data leakage, it is possible to read only attributes that were enabled for API access (whitelisted) in the Attributes section of Audience Manager. To get user profile attributes use the audienceManagerGetProfileAttributes method: [[PiwikTracker sharedInstance] audienceManagerGetProfileAttributes:^(NSDictionary *profileAttributes, NSError * _Nullable error) { // do something with attributes list }];  completionBlock (required) – callback to handle request result (call is asynchronous) profileAttributes (output) – dictionary of key-value pairs, where each pair represent attribute name (key) and value. errorData (output) – in case of error only, this method will be called. This method passes the error string. "},{"title":"Checking audience membership​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#checking-audience-membership","content":"Requires Audience Manager Audience check allows one to check if the user belongs to a specific group of users defined in the audience manger panel based on analytics data and audience manager profile attributes. You can check if the user belongs to a given audience, for example, to display him/her some type of special offer like in the example below: [[PiwikTracker sharedInstance] checkMembershipWithAudienceID:@&quot;12345678-90ab-cdef-1234-567890abcdef&quot; completionBlock:^(BOOL isMember, NSError * _Nullable error) { // do something if is member or handle error }];  audienceId (required) – ID of the audience (Audience Manager -&gt; Audiences tab) completionBlock (required) – callback to handle request result (call is asynchronous) isMember (output) – a boolean value that indicates if the user belongs to an audience with a given ID error (output) – in case of error only, this method will be called. Method pass the error string. "},{"title":"Advanced usage​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#advanced-usage","content":""},{"title":"User ID​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#user-id","content":"The user ID is an additional, optional non-empty unique string identifying the user (not set by default). It can be, for example, a unique username or user's email address. If the provided user ID is sent to the analytics part together with the visitor ID (which is always automatically generated by the SDK), it allows the association of events from various platforms (for example iOS and Android) to the same user provided that the same user ID is used on all platforms. More about UserID. In order to set User ID use userID field: [PiwikTracker sharedInstance].userID = @&quot;User Name&quot;;  userID (required) – any non-empty unique string identifying the user. Passing null will delete the current user IDuserID will not be sent if the data anonymization is enabled. "},{"title":"User email address​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#user-email-address","content":"Used only by Audience Manager The user email address is another additional, optional string for user identification - if the provided user email is sent to the audience manager part when you send the custom profile attribute configured on the audience manager web panel. Similarly to the user ID, it allows the association of data from various platforms (for example iOS and Android) to the same user as long as the same email is used on all platforms. To set user email use the userEmail field: [PiwikTracker sharedInstance].userEmail = @&quot;user@email.com&quot;;  A userMail (required) – any non-null string representing email address It is recommended to set the user email to track audience manager profile attributes as it will create a better user profile. userMail will not be send if the data anonymization is enabled. "},{"title":"Visitor ID​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#visitor-id","content":"SDK uses various IDs for tracking the user. The main one is visitor ID, which is internally randomly generated once by the SDK on the first usage and is then stored locally on the device. The visitor ID will never change unless the user removes the application from the device so that all events sent from his device will always be assigned to the same user in the Piwik PRO web panel. It is also possible to set the VisitorID manually: [PiwikTracker sharedInstance].visitorID = @&quot;12345678901234fa&quot;;  When the anonymization is enabled, a new visitor id is generated each time the application is started. We recommend using userID instead of VisitorID. "},{"title":"Sessions​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#sessions","content":"A session represents a set of user's interactions with your app. By default, Analytics is closing the session after 30 minutes of inactivity, counting from the last recorded event in session and when the user will open up the app again the new session is started. You can configure the tracker to automatically close the session when users have placed your app in the background for a period of time. That period is defined by the sessionTimeout: [PiwikTracker sharedInstance].sessionTimeout = 1800  sessionTimeout (required) – session timeout time in seconds. Default: 1800 seconds (30 minutes). You can manually start a new session when sending a hit to Piwik by using the startNewSession method. [PiwikTracker sharedInstance].startNewSession;  "},{"title":"Device ID​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#device-id","content":"Used only by Audience Manager The device ID is used to track the IDFA (identifier for advertising). The IDFA is an additional, optional non-empty unique string identifying the device. If you wish to use the IDFA for tracking then you should set the device ID by yourself. Note that if you plan to send your application to the App Store and your application uses IDFA, but does not display ads, then it may be rejected in the App Store review process. You can set the IDFA as in the example below: #import &lt;AdSupport/ASIdentifierManager.h&gt; NSString *idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString]; [PiwikTracker sharedInstance].deviceID = idfa;  deviceID will not be sent if the data anonymization is enabled. "},{"title":"Dispatching​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#dispatching","content":"All tracking events are saved locally and by default. They are automatically sent to the server every 30 seconds. You can change this interval to any other number as below: [PiwikTracker sharedInstance].dispatchInterval = 0 - incoming events will be dispatched immediately[PiwikTracker sharedInstance].dispatchInterval = -1 - incoming events will not be dispatched automatically. This lets you gain full control over dispatch process, by using manual dispatch: [PiwikTracker sharedInstance].dispatchInterval = -1; [[PiwikTracker sharedInstance] sendExceptionWithDescription:@&quot;Content download error&quot;]; [PiwikTracker sharedInstance].dispatch;  A dispatchInterval (required) – dispatch interval time in seconds. In case when more than one event is in the queue, data is sent in bulk (using POST method with JSON payload). "},{"title":"Default custom variables​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#default-custom-variables","content":"The SDK, by default, automatically adds some information in custom variables about the device (index 1), system version (index 2) and app version (index 3). By default, this option is turned on. This behavior can be disabled with the following setting: [PiwikTracker sharedInstance].includeDefaultCustomVariable = NO;  In case you need to configure custom variables separately, turn off this option and see the section above about tracking custom variables. "},{"title":"Local storage limits​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#local-storage-limits","content":"You can set limits for storing events related to maximum size and time for which events are saved in local storage. By default, the maximum number of queued events is set to 500 and there is no age limit. It can be changed as below: [PiwikTracker sharedInstance].maxNumberOfQueuedEvents = 100; [PiwikTracker sharedInstance].maxAgeOfQueuedEvents = 60 * 60 * 24;  maxNumberOfQueuedEvents (required) – the maximum number of events after which events in the queue are deleted. By default, the limit is set to 500. maxAgeOfQueuedEvents (required) – time in ms after which events are deleted. By default, the limit is set to 24 60 60 = 24 hours. "},{"title":"Opt-out​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#opt-out","content":"You can disable all tracking in the application by using the opt-out feature. No events will be sent to the server if the opt-out is set. By default, opt-out is not set and events are tracked. [PiwikTracker sharedInstance].optOut = YES;  "},{"title":"Dry run​","type":1,"pageTitle":"Piwik PRO SDK for iOS","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_iOS#dry-run","content":"The SDK provides a dryRun flag that, when set, prevents any data from being sent to Piwik and instead prints them in the console. The dryRun flag should be set whenever you are testing or debugging an implementation and do not want test data to appear in your Piwik reports. To set the dry run flag, use: [PiwikTracker sharedInstance].dryRun = YES;  dryRun (required) – a flag that indicates the state of dry run mode. Set it to NO to disable dry run. "},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/markdown-features","content":"","keywords":""},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#front-matter","content":"Markdown documents have metadata at the top called Front Matter: my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md)  "},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#links","content":"Regular Markdown links are supported, using url paths or relative file paths. Let's see how to [Create a page](/create-a-page).  Let's see how to [Create a page](create-a-page.md).  Result: Let's see how to Create a page. "},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#images","content":"Regular Markdown images are supported. You can use absolute paths to reference images in the static directory (static/img/docusaurus.png): ![Docusaurus logo](/img/docusaurus.png)   You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them: ![Docusaurus logo](./img/docusaurus.png)  "},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#code-blocks","content":"Markdown code blocks are supported with Syntax highlighting. ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return ( &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt; ) } ```  src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }  "},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#admonitions","content":"Docusaurus has a special syntax to create admonitions and callouts: :::tip My tip Use this awesome feature option ::: :::danger Take care This action is dangerous :::  My tip Use this awesome feature option Take care This action is dangerous "},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#mdx-and-react-components","content":"MDX can make your documentation more interactive and allows using any React components inside Markdown: export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !  This is Docusaurus green ! This is Facebook blue ! "},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-extras/translate-your-site","content":"","keywords":""},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#configure-i18n","content":"Modify docusaurus.config.js to add support for the fr locale: docusaurus.config.js module.exports = { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };  "},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#translate-a-doc","content":"Copy the docs/tutorial/intro.md file to the i18n/fr folder: mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/tutorial/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md  Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French. "},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#start-your-localized-site","content":"Start your site on the French locale: npm run start -- --locale fr  Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated. caution In development, you can only use one locale at a same time. "},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#add-a-locale-dropdown","content":"To navigate seamlessly across languages, add a locale dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };  The locale dropdown now appears in your navbar:  "},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#build-your-localized-site","content":"Build your site for a specific locale: npm run build -- --locale fr  Or build your site to include all the locales at once: npm run build  "},{"title":"Google Ads","type":0,"sectionRef":"#","url":"/docs/analytics/integrations/google_ads","content":"","keywords":""},{"title":"Metrics​","type":1,"pageTitle":"Google Ads","url":"/docs/analytics/integrations/google_ads#metrics","content":"The table below lists metrics provided by Google Ads integration. Metric Name\tColumn ID\tScope\tTypeImpressions (Google Ads)\tgoogle_ads_impressions\texternal\tint Clicks (Google Ads)\tgoogle_ads_clicks\texternal\tint Cost (Google Ads)\tgoogle_ads_cost\texternal\tfloat Average CPC (Google Ads)\tgoogle_ads_average_cpc\texternal\tfloat CTR (Google Ads)\tgoogle_ads_ctr\texternal\tfloat ROAS (Google Ads)\tgoogle_ads_roas\tsession\tfloat Google Ads Metrics "},{"title":"Dimensions​","type":1,"pageTitle":"Google Ads","url":"/docs/analytics/integrations/google_ads#dimensions","content":"The table below lists dimensions provided by Google Ads integration. Note &quot;Database type&quot; column presents the type of source column of the dimension (in case of enum - type of the ID, in case of dynamic dimensions - not applicable). Dimension Name\tColumn ID\tScope\tType\tDatabase Type\tNullable\tNotesSource\tsource\tsession\tstr\tstring\tFalse Medium\tmedium\tsession\tstr\tstring\tFalse Source/Medium\tsource_medium\tsession\tstr\tstring\tFalse Keyword\tkeyword\tsession\tstr\tstring\tFalse Device type\tdevice_type\tsession\t[int, str]\tuint8\tTrue\tdevice_type.json &lt;/_static/json/enum/device_type.json&gt; Session entry URL\tsession_entry_url\tsession\tstr\tstring\tFalse Timestamp\ttimestamp\tsession\tdate\tnot applicable\tFalse\tby default in Raw data API Website Name\twebsite_name\tsession\t[str, str]\tnot applicable\tFalse\twebsite UUID Customer ID (Google Ads)\tgoogle_ads_customer_id\tsession\tstr_id\tstring\tFalse Customer Name (Google Ads)\tgoogle_ads_customer_name\tsession\t[str, str]\tnot applicable\tFalse Campaign ID (Google Ads)\tgoogle_ads_campaign_id\tsession\tint_id\tint64\tFalse Campaign Name (Google Ads)\tgoogle_ads_campaign_name\tsession\t[int, str]\tnot applicable\tFalse Ad Group ID (Google Ads)\tgoogle_ads_ad_group_id\tsession\tint_id\tint64\tFalse Ad Group Name (Google Ads)\tgoogle_ads_ad_group_name\tsession\t[int, str]\tnot applicable\tFalse Ad Group Ad ID (Google Ads)\tgoogle_ads_ad_group_ad_id\tsession\tstr_id\tstring\tFalse Ad Group Ad Network Type (Google Ads)\tgoogle_ads_ad_network_type\tsession\t[str, str]\tstring\tFalse\tgoogle_ads_ad_network_type.json &lt;/_static/json/enum/google_ads_ad_network_type.json&gt; Ad Group Keyword Match Type (Google Ads)\tgoogle_ads_keyword_match_type\texternal\t[str, str]\tstring\tFalse\tgoogle_ads_keyword_match_type.json &lt;/_static/json/enum/google_ads_keyword_match_type.json&gt;, not available in Raw data API Google Ads Dimensions "},{"title":"Mixed Queries​","type":1,"pageTitle":"Google Ads","url":"/docs/analytics/integrations/google_ads#mixed-queries","content":"It is possible to request both internal analytics and Google Ads metrics in a single query (for example: &quot;Sessions&quot; and &quot;Clicks (Google Ads)&quot;), however only the common dimensions listed below may be used in such queries. note Note: &quot;Database type&quot; column presents the type of source column of the dimension (in case of enum - type of the ID, in case of dynamic dimensions - not applicable). Dimension Name\tColumn ID\tScope\tType\tDatabase Type\tNullable\tNotesSource\tsource\tsession\tstr\tstring\tFalse Medium\tmedium\tsession\tstr\tstring\tFalse Source/Medium\tsource_medium\tsession\tstr\tstring\tFalse Keyword\tkeyword\tsession\tstr\tstring\tFalse Device type\tdevice_type\tsession\t[int, str]\tuint8\tTrue\tdevice_type.json &lt;/_static/json/enum/device_type.json&gt; Session entry URL\tsession_entry_url\tsession\tstr\tstring\tFalse Timestamp\ttimestamp\tsession\tdate\tnot applicable\tFalse\tby default in Raw data API Website Name\twebsite_name\tsession\t[str, str]\tnot applicable\tFalse\twebsite UUID Customer ID (Google Ads)\tgoogle_ads_customer_id\tsession\tstr_id\tstring\tFalse Customer Name (Google Ads)\tgoogle_ads_customer_name\tsession\t[str, str]\tnot applicable\tFalse Campaign ID (Google Ads)\tgoogle_ads_campaign_id\tsession\tint_id\tint64\tFalse Campaign Name (Google Ads)\tgoogle_ads_campaign_name\tsession\t[int, str]\tnot applicable\tFalse Ad Group ID (Google Ads)\tgoogle_ads_ad_group_id\tsession\tint_id\tint64\tFalse Ad Group Name (Google Ads)\tgoogle_ads_ad_group_name\tsession\t[int, str]\tnot applicable\tFalse Ad Group Ad ID (Google Ads)\tgoogle_ads_ad_group_ad_id\tsession\tstr_id\tstring\tFalse Ad Group Ad Network Type (Google Ads)\tgoogle_ads_ad_network_type\tsession\t[str, str]\tstring\tFalse\tgoogle_ads_ad_network_type.json &lt;/_static/json/enum/google_ads_ad_network_type.json&gt; Common Dimensions Warning Using dimensions that are not explicitly listed in the table above in such queries (either as query columns or as filters) will result in aBad Request response. "},{"title":"Piwik PRO SDK for Android","type":0,"sectionRef":"#","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android","content":"","keywords":""},{"title":"SDK configuration​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#sdk-configuration","content":""},{"title":"Server​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#server","content":"You need a Piwik PRO account on the cloud or an on-premises setup which your mobile app will communicate with. For details, please visit the Piwik PRO website.Create a new website (or app) in the Piwik PRO web interface.Copy and note the Website ID from &quot;Administration &gt; Websites &amp; apps &gt; Installation&quot; and your server address. "},{"title":"Client​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#client","content":"Including the library​ Add the JitPack repository to your root build.gradle file at the end of repositories:  allprojects { repositories { ... maven { url 'https://jitpack.io' } } }  Then add the dependency to the application module build.gradle file:  dependencies { implementation 'pro.piwik:sdk-framework-android:VERSION' }  Replace VERSION with the latest release name, e.g. 1.0.3. Configuration​ In order to set up the Piwik PRO tracker, you have two options: 1. Extend PiwikApplication class with your Android Application class. It forces implementation of one abstract method. That approach is used in the Piwik PRO SDK demo app as below: public class YourApplication extends PiwikApplication{ @Override public TrackerConfig onCreateTrackerConfig() { return TrackerConfig.createDefault(&quot;https://your.piwik.pro.server.com&quot;, &quot;01234567-89ab-cdef-0123-456789abcdef&quot;); } }  2. Manage the Tracker on your own. To configure the Tracker you will need a server address and website ID (you can find it in &quot;Administration &gt; Websites &amp; apps &gt; Installation&quot;): public class YourApplication extends Application { private Tracker tracker; public synchronized Tracker getTracker() { if (tracker == null) tracker = Piwik.getInstance(this).newTracker(new TrackerConfig(&quot;https://your.piwik.pro.server.com&quot;, &quot;01234567-89ab-cdef-0123-456789abcdef&quot;, &quot;Default Tracker&quot;)); return tracker; } }  It is not recommended to create multiple Tracker instances for the same target as it may lead to over-count of metrics. It is highly recommended to create and manage the tracker in the Application class (to make sure there is only one instance of the tracker). The Tracker is thread-safe and can be shared across the application. Tracker tracker = ((PiwikApplication) getApplication()).getTracker();  The application is ready to use Piwik PRO SDK. Using Piwik PRO SDK with the Kotlin programming language​ The Piwik PRO SDK is written in the Java programming language. Nevertheless calling Piwik PRO SDK interface elements in classes written in Kotlin will not be an issue as the code written in Java can be called from Kotlin in a natural way. When we edit a Kotlin class file and type in a reference to the Piwik PRO SDK component, a Kotlin syntax interface will be shown in the code completion. Example of using the method to track a view in Java: Tracker tracker = ((PiwikApplication) getApplication()).getTracker(); TrackHelper.track().screen(&quot;your_activity_path&quot;).title(&quot;Title&quot;).with(tracker);  Same example in Kotlin: val tracker: Tracker = (application as PiwikApplication).tracker TrackHelper.track().screen(&quot;your_activity_path&quot;).title(&quot;Title&quot;).with(tracker)  For more on using existing Java code in Kotlin files, see the documentation &quot;Calling Java from Kotlin﻿&quot;. "},{"title":"Using Piwik PRO SDK​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#using-piwik-pro-sdk","content":"It is recommended to use TrackerHelper class. It has methods for all common actions, which can be chained in a way that facilitates the correct order and use. Combine it with IDE autocompletion and using the SDK will be more convenient. For tracking each event with TrackHelper, you will need to pass Tracker instance. The way of getting the correct Tracker instance depends on the configuration option (see section above): 1. Your Android Application class extend PiwikApplication class Tracker tracker = ((PiwikApplication) getApplication()).getTracker();  2. You manage the Tracker yourself Tracker tracker = ((YourApplication) getApplication()).getTracker();  In further examples we will assume usage of the first option. "},{"title":"Data anonymization​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#data-anonymization","content":"Anonymization is the feature that allows tracking a user's activity for aggregated data analysis even if the user doesn't consent to track the data. If a user does not agree to be tracked, he will not be identified as the same person across multiple sessions. Personal data will not be tracked during the session (user ID, email and device ID). If the anonymization is enabled, a new visitor ID will be created each time the application starts. Anonymization is enabled by default. You can turn the anonymization on and off using the setAnonymizationState method: ((PiwikApplication) getApplication()).getTracker().setAnonymizationState(false);  You can also check the anonymization status using the isAnonymizationOn method: ((PiwikApplication) getApplication()).getTracker().isAnonymizationOn();  "},{"title":"Tracking screen views​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-screen-views","content":"Requires Analytics During a valid tracking session, you can track screen views which represent the content the user is viewing in the application. To send a visit on the screen, set the screen path and title on the tracker. This path is internally translated by the SDK to an HTTP URL as the Piwik PRO server uses URLs for tracking views. Additionally, Piwik PRO SDK uses prefixes which are inserted in a generated URL for various types of action(s). For tracking screen views it will use a prefix screen by default, however, automatic prefixing can be disabled with the tracker.setPrefixing(false) option. public class YourActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Tracker tracker = ((PiwikApplication) getApplication()).getTracker(); TrackHelper.track().screen(&quot;your_activity_path&quot;).title(&quot;Title&quot;).with(tracker); } }  A path (required) – each screen should be mapped to the URL path A title (optional) – the title of the action being tracked. To automatically use the activity-stack as a path and activity title as a name, use the overloaded screen method: public class YourActivity extends Activity { ... TrackHelper.track().screen(YourActivity).with(tracker); ... }  An activity (required) – current instance of android Activity class. In order to bind the tracker to your applications, use the screens method. This method will automatically track all open application activities(views) keeping the activity-stack as a path and activity title as the name: TrackHelper.track().screens(getApplication()).with(tracker);  Alternatively, it is also possible to define a list of views that will be sent with a single event: TrackHelper.track().screens(Arrays.asList(&quot;android_test/test1&quot;, &quot;android_test/test2&quot;)).with(tracker);  "},{"title":"Tracking custom events​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-custom-events","content":"Requires Analytics To collect data about the user's interaction with the interactive components of the application, like a button presses or the use of a particular item in the game - use event method. TrackHelper.track().event(&quot;category&quot;, &quot;action&quot;).path(&quot;/main/actionScreen&quot;).name(&quot;label&quot;).value(1000f).with(tracker);  The track method allows the specification of the following parameters: A category (required) – this String defines the event category. You may define event categories based on the class of user actions (e.g. clicks, gestures, voice commands), or you may define them based on the features available in your application (e.g. play, pause, fast forward, etc.). An action (required) – this String defines the specific event action within the category specified. In the example, we are effectively saying that the category of the event is user clicks, and the action is a button click. A name (optional) – this String defines a label associated with the event. For example, if you have multiple button controls on a screen, you may use the label to specify the specific view control identifier that was clicked. A value (optional) – this Float defines a numerical value associated with the event. For example, if you were tracking &quot;Buy&quot; button clicks, you may log the number of items being purchased or their total cost. A path (optional) – the path under which this event occurred. For more resources, please visit: Custom Events OverviewUltimate guide to event tracking. "},{"title":"Tracking exceptions​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-exceptions","content":"Requires Analytics Caught exceptions are errors in your app for which you've defined an exception handling code, such as the occasional timeout of a network connection during a request for data. Exceptions are tracked on the server in a similar way as screen views. If you provide cought exception to the exception method, URL will contain the package name, activity path, method name and line number where crash occurred. Measure a caught exception by setting the exception field values on the tracker and sending the hit, as with this example: try { // perform action } catch(Exception ex) { TrackHelper.track().exception(ex).description(&quot;Content download error&quot;).with(tracker); }  An exception (optional) – Caught exception instance. A description (optional) – additional information about the issue. Bear in mind that Piwik is not a crash tracker therefore use this sparingly. "},{"title":"Tracking social interactions​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-social-interactions","content":"Requires Analytics Social interactions such as likes, shares and comments in various social networks can be tracked as below.  TrackHelper.track().socialInteraction(&quot;Like&quot;, &quot;Facebook&quot;).with(tracker);  An interaction (required) – defines the social interaction, e.g. &quot;Like&quot;. A network (required) – defines social network associated with interaction, e.g. &quot;Facebook&quot; "},{"title":"Tracking deep links and campaigns​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-deep-links-and-campaigns","content":"Requires Analytics Tracking campaigns URLs configured with the online Campaign URL Builder tool, allow you to measure how different campaigns (for example with Facebook ads or direct emails) bring traffic to your application. For this purpose you may use a deep link with the campaign parameters. You can track these URLs from the application via the campaign method:  TrackHelper.track().campaign(&quot;https://www.example.com?pk_campaign=Email-SummerDeals&amp;pk_keyword=LearnMore&quot;);  A URL (required) – the campaign URL. HTTPS, HTTP and FTP are valid, however, the URL must contain campaign name and keyword parameters. The information contained in the campaign URL or the deep link will be tracked when the first screen event is triggered. "},{"title":"Tracking downloads​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-downloads","content":"Requires Analytics You can track the installations initiated by your application.  TrackHelper.track().sendDownload(&quot;http://your.server.com/bonusmap.zip&quot;).with(getTracker());  A URL (required) – the URL of the downloaded content. No prefixes are used for tracking downloads, but each event of this type use an additional parameter download whose value equals to specified URL. On the analytics panel, all downloads can be viewed in the corresponding section. "},{"title":"Tracking application installs​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-application-installs","content":"Requires Analytics You can also track installations of your application. This event is sent to the server only once per application installation.  TrackHelper.track().sendApplicationDownload().with(getTracker());  Application installation is only tracked during the first launch. In the case of the application being installed but not run, the app installation will not be tracked. "},{"title":"Tracking outlinks​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-outlinks","content":"Requires Analytics For tracking outlinks to external websites or other apps opened from your application use the outlink method: TrackHelper.track().outlink(new URL(&quot;yourScheme://address.app&quot;)).with(getTracker());  A outlink (required) – defines the outlink target. "},{"title":"Tracking search operations​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-search-operations","content":"Requires Analytics Tracking search operations allow the measurement of popular keywords used for various search operations performed inside your application. It can be done via the search method: TrackHelper.track().search(&quot;Space&quot;).category(&quot;Movies&quot;).count(3).with(getTracker());  A keyword (required) – the searched query that was used in the app. A category (optional) – specify a search category. A count (optional) – we recommend setting the search count to the number of search results displayed on the results page. When keywords are tracked with a count of 0, they will appear in the &quot;No Result Search Keyword&quot; report. "},{"title":"Tracking content impressions and interactions​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-content-impressions-and-interactions","content":"Requires Analytics You can track an impression of an ad in your application as below. TrackHelper.track().impression(&quot;Android content impression&quot;).piece(&quot;banner&quot;).target(&quot;https://www.dn.se/&quot;).with(getTracker());  When the user interacts with the ad by tapping on it, you can also track it with a similar method: TrackHelper.track().interaction(&quot;Android content impression&quot;, &quot;click&quot;).piece(&quot;banner&quot;).target(&quot;https://www.dn.se/&quot;).with(getTracker());  A contentName (required) – the name of the content, e.g. &quot;Ad Foo Bar&quot;. A interaction (required) – type of interaction, e.g. click. A piece (optional) – the actual content. For instance, the path to an image, video, audio or any text. A target (optional) – the target of the content. For instance the URL of a landing page. "},{"title":"Tracking goals​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-goals","content":"Requires Analytics By default, goals are defined as &quot;matching&quot; parts of the screen path or screen title. If you want to trigger a conversion manually or track some user interaction, call the method goal. Read more about what a goal is in the Help Center. TrackHelper.track().goal(&quot;27ecc5e3-8ae0-40c3-964b-5bd8ee3da059&quot;).revenue(revenue).with(tracker)  A goal (required) – a tracking request will trigger a conversion for the goal of the website being tracked with this ID. Revenue (optional) – a monetary value that has been generated as revenue by goal conversion. Create, view or manage goals is available in the Analytics tab, &quot;Goals&quot; left menu, &quot;Manage goals&quot; section. "},{"title":"Tracking ecommerce transactions​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-ecommerce-transactions","content":"Requires Analytics If your organization depends on online sales, you need detailed analysis to transform raw e-commerce stats into actionable insights. Revenue, orders, conversion rates, and a host of other product statistics can be analyzed by integrating Piwik with your e-commerce solution. SDK provides the order method that can be used for tracking the orders (including the order items). Sample usage: Tracker tracker = ((YourApplication) getApplication()).getTracker(); EcommerceItems items = new EcommerceItems(); // EcommerceItems.Item(&quot;&lt;sku&gt;&quot;).name(&quot;&lt;product&gt;&quot;).category(&quot;&lt;category&gt;&quot;).price(&lt;cents&gt;).quantity(&lt;number&gt;) items.addItem(new EcommerceItems.Item(&quot;0123456789012&quot;).name(&quot;Polo T-shirt&quot;).category(&quot;Men's T-shirts&quot;).price(3000).quantity(2)); items.addItem(new EcommerceItems.Item(&quot;0129876543210&quot;).name(&quot;Leather shoes&quot;).category(&quot;Shoes&quot;).price(40000).quantity(1)); TrackHelper.track().order(&quot;orderId&quot;,124144).subTotal(33110).tax(9890).shipping(1000).discount(0).items(items).with(tracker);  orderId (required) – a unique String identifying the order grandTotal (required) – Total amount of the order, in cents subTotal (optional) – the subTotal (net price) for the order, in cents tax (optional) – the tax for the order, in cents shipping (optional) – the shipping for the order, in cents discount (optional) – the discount for the order, in cents items (optional) – the items included in the order, use the EcommerceItems class to instantiate items "},{"title":"Tracking custom variables​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-custom-variables","content":"The feature will soon be disabled. We recommend using custom dimensions instead. Requires Analytics A custom variable is a custom name-value pair that you can assign to your users or screen views, and then visualize the reports of how many visits, conversions, etc. for each custom variable. A custom variable is defined by a name — for example, &quot;User status&quot; — and a value – for example, &quot;LoggedIn&quot; or &quot;Anonymous&quot;. It is required for names and values to be encoded in UTF-8. Each custom variable has a scope. There are two types of custom variables scope - visit scope and screen scope. The visit scope can be used for any tracking action, and the screen scope can only be applied to tracking screen views. To set the custom variable of the screen scope, use the variable method in the tracking chain: TrackHelper.track() .variable(1, &quot;filter&quot;, &quot;price&quot;) .variable(2, &quot;language&quot;, &quot;en&quot;); TrackHelper.track() .screen(&quot;/custom_vars&quot;) .title(&quot;Custom Vars&quot;) .with(getTracker());  When screen custom variable is set and the screen event is called, the screen custom variable will be removed from the list of screen custom variables. The above code can also be written in the following way. TrackHelper.track() .variable(1, &quot;filter&quot;, &quot;price&quot;) .variable(2, &quot;language&quot;, &quot;en&quot;) .screen(&quot;/custom_vars&quot;) .title(&quot;Custom Vars&quot;) .with(getTracker());  To use the custom variable of the visit scope, use the visitVariables method in the tracking chain: TrackHelper.track() .visitVariables(1, &quot;filter&quot;, &quot;price&quot;) .visitVariables(2, &quot;language&quot;, &quot;en&quot;); TrackHelper.track() .event(&quot;category&quot;, &quot;action&quot;) .with(tracker);  In contrast to the screen custom variables, the visit custom variable will not be removed when the event is called. Please note that the Default custom variables option is enabled by default. With this option turned on, use the custom variables with indexes greater than 3 or the visit scope custom variables with indexes 1-3. In case you don't need the default custom variable, you can disable it. See below the section regarding default custom variables and how to disable them. Custom variable is defined by three parameters: An index (required) – a given custom variable name must always be stored in the same &quot;index&quot; per session. For example, if you choose to store the variable name = &quot;Gender&quot; in index = 1 and you record another custom variable in index = 1, then the &quot;Gender&quot; variable will be deleted and replaced with a new custom variable stored in index 1. A name (required) – this String defines the name of a specific Custom Variable such as &quot;User type&quot; (Limited to 200 characters). A value (required) – this String defines the value of a specific Custom Variable such as &quot;Customer&quot; (Limited to 200 characters). "},{"title":"Tracking custom dimensions​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-custom-dimensions","content":"Requires Analytics To track a custom name-value pair assigned to your users or screen views, use Custom Dimensions. Note that the custom value data is not sent by itself, but only with other tracking actions such as screen views, events or other tracking action: TrackHelper.track() .dimension(1, &quot;visit&quot;) .dimension(2, &quot;dashboard&quot;) .screen(&quot;Home screen&quot;) .with(tracker);  1 and 2 are our dimension slots and visit, dashboard are the dimension values for the tracked screen view. TrackHelper.track() .dimension(1, &quot;visit&quot;) .dimension(2, &quot;billing&quot;); TrackHelper.track() .event(&quot;category&quot;, &quot;action&quot;) .with(tracker);  1 and 2 are our dimension slots and visit, billing are the dimension values for the tracked event. Once the event is triggered, the dimensions are deleted and will not be sent with the next event. If you want to send dimensions with the next event, you must set them again. "},{"title":"Tracking user profile attributes​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#tracking-user-profile-attributes","content":"Requires Audience Manager The Audience Manager stores visitors' profiles which have data from a variety of sources. One of them can be a mobile application. It is possible to enrich the profiles with more attributes by passing any key-value pair e.g. gender: male, favourite food: Italian, etc. It is recommended to set additional user identifiers such as email or User ID which will allow the enrichment of existing profiles or merging of profiles rather than creating a new profile. For example, if the user visited the website, performed some actions, filled in a form with his email (his data was tracked and profile created in Audience Manager) and Used only by Audience Manager started using a mobile application, the existing profile will be enriched only if the email was set. Otherwise, a new profile will be created. For sending profile attributes use audienceManagerSetProfileAttribute method: getTracker().setUserMail(&quot;john@doe.com&quot;); ... TrackHelper.track().audienceManagerSetProfileAttribute(&quot;food&quot;, &quot;pizza&quot;).add(&quot;color&quot;, &quot;green&quot;).with(getTracker());  A name (required) – defines the profile attribute name (non-null string). A value (required) – defines the profile attribute value (non null string). An add (chain method) – used to specify more attributes to the user within the same event. Aside from attributes, each event also sends parameters which are retrieved from the tracker instance: WEBSITE_ID - always sent,USER_ID - if it is set. Read more about the User ID,EMAIL - if it is set. Read more about the email,VISITOR_ID - always sent, ID of the mobile application user, generated by SDKDEVICE_ID - an Advertising ID that, by default, is fetched automatically when the tracker instance is created. In order to set device ID see Device ID section below. Profile attributes for the user that are tracked will be shown on the Audience Manager - Profile Browser tab. Audience manager events are dispatched together with analytics events. Therefore, settings set in the tracker for analytics events processing (dispatch interval, cache size and age, etc.) will be same for audience manager events. Once the audience manager event is dispatched, it is no longer stored locally. "},{"title":"Reading user profile attributes​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#reading-user-profile-attributes","content":"Requires Audience Manager It is possible to read the attributes of a given profile, however, with some limitations. Due to security reasons (to avoid personal data leakage), it is possible to read only attributes that were enabled for API access (whitelisted) in the Attributes section in Audience Manager. To get user profile attributes use the audienceManagerGetProfileAttributes method:  getTracker().audienceManagerGetProfileAttributes(new Tracker.OnGetProfileAttributes() { @Override public void onAttributesReceived(Map&lt;String, String&gt; attributes) { // handle result } @Override public void onError(String errorData) { errorData = TextUtils.isEmpty(errorData) ? &quot;Network error&quot;: errorData; // handle error } });  An OnGetProfileAttributes (required) – callback to handle request result (call is asynchronous), has two methods void onAttributesReceived(Map&lt;String, String&gt; attributes) and void onError(String errorData). An attributes (output) – dictionary of key-value pairs, where each pair represents the attribute name (key) and value. An errorData (output) – in case of error, only this method will be called. The method passes the error string. "},{"title":"Checking audience membership​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#checking-audience-membership","content":"Requires Audience Manager Audiences are allowed to check whether or not the user belongs to a specific group of users defined in the data manger panel based on analytics data and audience manager profile attributes. You can check if the user belongs to a given audience, for example, to show a special offer. To check it, use the checkAudienceMembership method: getTracker().checkAudienceMembership(audienceId, new Tracker.OnCheckAudienceMembership() { @Override public void onChecked(boolean isMember) { // handle result } @Override public void onError(String errorData) { // handle error } });  An audienceId (required) – ID of the audience (Audience Manager -&gt; Audiences tab) An OnCheckAudienceMembership (required) – callback to handle request result (call is asynchronous), has two methods void onChecked(boolean isMember) and void onError(String errorData) An isMember (output) – a boolean value that indicates if user belongs to audience with given ID An errorData (output) – in case of error, only this method will be called. The method passes the error string. "},{"title":"Advanced usage​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#advanced-usage","content":""},{"title":"User ID​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#user-id","content":"UserID will allow the association of events from various sources to the same user. Each time a new visitor enters your page, Piwik PRO assigns a cookie containing a random string of characters. The purpose of this cookie is for Piwik PRO to be able to recognize the same visitor whenever the website is visited again. However, instead of a random string, you can assign your visitors with your own human-friendly name (ex. visitor email). Learn more about the user ID here. In order to set UserID, use the setUserId method: getTracker().setUserId(&quot;John Doe&quot;);  A UserID (required) – any non-empty unique string identifying the user. Passing null will delete the current UserID userID will not be sent if the data anonymization is enabled. "},{"title":"User email address​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#user-email-address","content":"Used only by Audience Manager The user email address is an optional parameter for user identification. Similar to UserID, it allows the association of events from various sources to the same user. To set user email use the setUserMail method: getTracker().setUserMail(&quot;john@doe.com&quot;);  A userMail (required) – any non-null string representing email address userMail will not be send if the data anonymization is enabled. Setting up an email helps the Audience Manager to enrich existing profiles or merge profiles which come from other sources (if they also have an email). Check Tracking user profile attributes for more information. "},{"title":"Device ID​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#device-id","content":"Used only by Audience Manager The device ID is used to track the AAID (identifier for advertising). The AAID is an additional, non-empty unique string identifying the device. By default, device ID fetched automatically when the tracker instance is created. To turn off automatic fetch, use the setTrackDeviceId(boolean isTracked) method: getTracker().setTrackDeviceId(false);  To set custom deviceID, use the setDeviceId(String deviceID) method: getTracker().setDeviceId(String deviceID);  If custom deviceID value is not set, then default automatically generated deviceID value is assigned. You can get deviceID via getDeviceId() method: getTracker().getDeviceId();  deviceID will not be sent if the data anonymization is enabled. Note that if you plan to send your application to the Google Play Store and your application uses AAID, you will have to ask the user of the application for the corresponding permission. "},{"title":"Visitor ID​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#visitor-id","content":"To track user sessions on difference sources, the VisitorID parameter is used. VisitorID is randomly generated when the tracker instance is created, and stored between application launches. It is also possible to set the VisitorID manually: tracker.setVisitorId(&quot;0123456789abcdef&quot;);  A VisitorID (required) – unique visitor ID, must be 16 characters hexadecimal string. When the anonymization is enabled, a new visitor id is generated each time the application starts. Every unique visitor must be assigned a different ID and this ID must not change after it is assigned. We recommend using UserID instead of VisitorID. "},{"title":"Sessions​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#sessions","content":"A session represents a set of user's interactions with your app. By default, Analytics is closing the session after 30 minutes of inactivity, counting from the last recorded event in session and when the user will open up the app again the new session is started. You can configure the tracker to automatically close the session when users have placed your app in the background for a period of time. That period is defined by the setSessionTimeout method. tracker.setSessionTimeout(30 * 60 * 1000);  A timeout (required) – session timeout time in ms. You can manually start a new session when sending a hit to Piwik by using the startNewSession method. tracker.startNewSession();  "},{"title":"Dispatching​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#dispatching","content":"Tracked events are stored temporarily on the queue and by default dispatched in batches every 3000 miliseconds (30 seconds). This behavior can be changed with the following options: setDispatchInterval(0) - incoming events will be dispatched immediatelysetDispatchInterval(-1) - incoming events will not be dispatched automatically. This lets you gain full control over dispatch process, by using manual dispatch, as in the example below.A dispatchInterval (required) – dispatch interval time in ms.  Tracker tracker = ((MyApplication) getApplication()).getTracker(); tracker.setDispatchInterval(-1); // Catch and track exception try { cartItems = getCartItems(); } catch (Exception e) { tracker.trackException(e, e.getMessage(), false); tracker.dispatch(); cartItems = null; }  In case when more than one event is in the queue, data is sent in bulk (using POST method with JSON payload). "},{"title":"Custom queries​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#custom-queries","content":"You should be able to use all common actions through the TrackHelper utility, but in some instances, you may want full control over what is sent to the server. The base method for any event is track. You can create your own TrackMe objects, set the parameters and then send it: TrackMe trackMe = new TrackMe() trackMe.set... /* ... */ Tracker tracker = ((YourApplication) getApplication()).getTracker(); tracker.track(trackMe);  "},{"title":"Default custom variables​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#default-custom-variables","content":"SDK can automatically add information about the platform version, OS version and app version in custom variables with indexes 1-3. By default, this option is turned on. This can be changed via the setIncludeDefaultCustomVars method: getTracker().setIncludeDefaultCustomVars(false);  In case you need to configure custom variables separately, turn off this option and see the section above regarding tracking custom variables. "},{"title":"Local storage limits​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#local-storage-limits","content":"You can set limits for storing events related to maximum size and time for which events are saved in local storage as below. Events older than the set limit will be discarded on the next dispatch attempt. The Piwik backend accepts backdated events for up to 24 hours by default. To change offline cache age use the setOfflineCacheAge method: tracker.setOfflineCacheAge(80085);  A limit (required) – time in ms after which events are deleted, 0 = unlimited, -1 = disabled offline cache. By default, the limit is set to 24 60 60 * 1000 ms = 24 hours. You can also specify how large the offline cache may be. If the limit is reached, the oldest files will be deleted first. To change offline cache size use the setOfflineCacheSize method: tracker.setOfflineCacheSize(16 * 1000 * 1000);  A limit (required) – size in bytes after which events are deleted, 0 = unlimited. By default, the limit is set to 4 1024 1024 bytes = 4 Mb. "},{"title":"Opt out​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#opt-out","content":"You can enable an app-level opt-out flag that will disable Piwik PRO tracking across the entire app. Note that this flag must be set each time the app starts up and will default to false. To set the app-level opt-out, use: getTracker().setOptOut(true);  "},{"title":"Dry run​","type":1,"pageTitle":"Piwik PRO SDK for Android","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Android#dry-run","content":"The SDK provides a dryRun flag that, when set, prevents any data from being sent to Piwik and instead prints them in the console. The dryRun flag should be set whenever you are testing or debugging an implementation and do not want test data to appear in your Piwik reports. To set the dry run flag, use: getTracker().setDryRunTarget(Collections.synchronizedList(new ArrayList&lt;Packet&gt;()));  A dryRunTarget (required) – a data structure the data should be passed into List&lt;Packet&gt; type. Set it to null to disable dry run. "},{"title":"Piwik PRO SDK for Flutter","type":0,"sectionRef":"#","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter","content":"","keywords":""},{"title":"SDK Configuration​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#sdk-configuration","content":""},{"title":"Server​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#server","content":"You need a Piwik PRO account on the cloud or an on-premises setup which your mobile app will communicate with. For details, please visit the Piwik PRO website.Create a new website (or app) in the Piwik PRO web interface.Copy and note the Website ID from “Administration &gt; Websites &amp; apps &gt; Installation” and your server address. "},{"title":"Client​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#client","content":"Run this command:​ With Dart:​ $ dart pub add flutter_piwikpro With Flutter:​ $ flutter pub add flutter_piwikpro This will add a line like this to your package's pubspec.yaml (and run an implicit dart pub get): dependencies: flutter_piwikpro: ^0.0.1  Alternatively, your editor might support dart pub get or flutter pub get. Check the docs for your editor to learn more. Import it​ Now in your Dart code, you can use: import 'package:flutter_piwikpro/flutter_piwikpro.dart';  Configuration​ You'll need to configure the tracker before using any other methods - for that you will need the base URL address of your tracking server and website ID (you can find it in Administration &gt; Websites &amp; apps &gt; Installation on the web interface). await FlutterPiwikPro.sharedInstance.configureTracker(baseURL: 'https://your.piwik.pro.server.com', siteId: '01234567-89ab-cdef-0123-456789abcdef');  iOS and Android parameters:​ String baseURL - base URL of your tracking serverString siteId - ID of your website or application Usage and general info​ Every method from the sdk is async, and every method can throw exceptions - for example if you try to use sdk methods without configuring the tracker first - which you can capture using the standard try-catch approach. For example: try { final result = await FlutterPiwikPro.sharedInstance.trackDownload('http://your.server.com/bonusmap2.zip'); print(result); } catch (exception) { //handle an exception }  If a method call is succesful, most of the methods, unless specified, will return a String that describes which method was called, and which parameters were used, for example: FlutterPiwikPro - configureTracker completed with parameters: baseURL: https://your.piwik.pro.server.com, siteId: 01234567-89ab-cdef-0123-456789abcdef  "},{"title":"Using Piwik PRO SDK Flutter Wrapper​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#using-piwik-pro-sdk-flutter-wrapper","content":"Data Anonymization​ Anonymization is a feature that allows tracking a user’s activity for aggregated data analysis even if the user doesn’t consent to track the data. If a user does not agree to being tracked, he will not be identified as the same person across multiple sessions. Personal data will not be tracked during the session (i.e. user ID) If the anonymization is enabled, a new visitor ID will be created each time the application starts. Anonymization is enabled by default. You can turn the anonymization on and off by calling setAnonymizationState: await FlutterPiwikPro.sharedInstance.setAnonymizationState(true);  bool shouldAnonymize - pass true to enable anonymization, or false to disable it. Tracking Screen Views​ The basic functionality of the SDK is Tracking Screen Views which represent the content the user is viewing in the application. To track a screen you only need to provide the name of the screen. This name is internally translated by the SDK to an HTTP URL as the Piwik PRO server uses URLs for tracking views. Additionally, Piwik PRO SDK uses prefixes which are inserted in generated URLs for various types of action(s). To track screen views you can use the trackScreen method:  await FlutterPiwikPro.sharedInstance.trackScreen(screenName: &quot;menuScreen&quot;);  iOS and Android parameters:​ String path – title of the action being tracked. The appropriate screen path will be generated for this action. Additional Android only parameters:​ String? title (optional) – the title of the action being tracked. Tracking Custom Events​ Custom events can be used to track the user’s interaction with various custom components and features of your application, such as playing a song or a video. You can read more about events in the Piwik PRO documentation and ultimate guide to event tracking. To track custom events you can use the trackCustomEvent method: await FlutterPiwikPro.sharedInstance.trackCustomEvent( action: 'test action', category: 'test category', name: 'test name', value: 120);  iOS and Android parameters:​ String category – this String defines the event category. You may define event categories based on the class of user actions ( e.g. taps, gestures, voice commands), or you may define them based upon the features available in your application (e.g. play, pause, fast forward, etc.).String action – this String defines the specific event action within the category specified. In the example, we are essentially saying that the category of the event is user clicks, and the action is a button click.String? name (optional) – this String defines a label associated with the event. For example, if you have multiple button controls on a screen, you might use the label to specify the specific identifier of a button that was clicked.double? value (optional) – this Float defines a numerical value associated with the event. For example, if you were tracking “Buy” button clicks, you might log the number of items being purchased, or their total cost. Additional Android only parameters:​ String? path (optional) - the path under which this event occurred. "},{"title":"Tracking Exceptions​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-exceptions","content":"Tracking exceptions allow the measurement of exceptions and errors in your app. Exceptions are tracked on the server in a similar way as screen views, however, URLs internally generated for exceptions always use the fatal or caught prefix. To track exceptions you can use the trackException method: await FlutterPiwikPro.sharedInstance.trackException(description: &quot;description of an exception&quot;, isFatal: false);  iOS and Android parameters:​ String description – provides the exception message.bool isFatal – true if an exception is fatal. "},{"title":"Tracking Social Interactions​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-social-interactions","content":"Social interactions such as likes, shares and comments in various social networks can be tracked as below. This is tracked in a similar way as screen views. To track social interactions you can use the trackSocialInteraction method: await FlutterPiwikPro.sharedInstance.trackSocialInteraction( interaction: 'like', network: 'Facebook', target: 'Dogs');  iOS and Android parameters​ String interaction – defines the social interaction, e.g. “Like”.String network – defines the social network associated with interaction, e.g. “Facebook”String? target (optional) – the target for which this interaction occurred, e.g. “Dogs”. "},{"title":"Tracking Downloads​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-downloads","content":"You can track downloads initiated by your application by using the trackDownload method: await FlutterPiwikPro.sharedInstance.trackDownload('http://your.server.com/bonusmap2.zip');  iOS and Android parameters​ String url - URL of the downloaded content. "},{"title":"Tracking Application Installs​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-application-installs","content":"You can also track installations of your application. This event is sent to the server only once per application version (additional events won't be sent). You can track app installs using the trackAppInstall method: await FlutterPiwikPro.sharedInstance.trackAppInstall();  "},{"title":"Tracking Outlinks​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-outlinks","content":"For tracking outlinks to external websites or other apps opened from your application you can use the trackOutlink method: await FlutterPiwikPro.sharedInstance.trackOutlink('http://great.website.com');  iOS and Android parameters​ String url - defines the outlink target. "},{"title":"Tracking Search Operations​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-search-operations","content":"Tracking search operations allow the measurement of popular keywords used for various search operations performed inside your application. To track them you can use the trackSearch method: await FlutterPiwikPro.sharedInstance.trackSearch(keyword: 'Space', category: &quot;Movies&quot;, numberOfHits: 100);  iOS and Android parameters​ String keyword – the searched query that was used in the app.String category – specify a search category.int? numberOfHits(optional) – we recommend setting the search count to the number of search results displayed on the results page. When keywords are tracked with a count of 0, they will appear in the “No Result Search Keyword” report. "},{"title":"Tracking Content Impressions​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-content-impressions","content":"You can track the impression of an ad using the trackContentImpression method:  await FlutterPiwikPro.sharedInstance.trackContentImpression( contentName: &quot;name&quot;, piece: 'piece', target: 'target');  iOS and Android parameters​ String contentName – the name of the content, e.g. “Ad Foo Bar”.String? piece (optional) – the actual content. For instance the path to an image, video, audio, any text.String? target (optional) – the target of the content e.g. the URL of a landing page. "},{"title":"Tracking Content Interactions​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-content-interactions","content":"When a user interacts with an ad by tapping on it, you can track it using the trackContentInteraction method: await FlutterPiwikPro.sharedInstance.trackContentInteraction( contentName: &quot;name&quot;, piece: 'piece', target: 'target', contentInteraction: 'Clicked really hard');  iOS and Android parameters​ String contentName – the name of the content, e.g. “Ad Foo Bar”.String? piece (optional) – the actual content. For instance the path to an image, video, audio, any text.String? target (optional) – the target of the content e.g. the URL of a landing page.String? contentInteraction (optional) - a type of interaction that occured, e.g. &quot;tap&quot; "},{"title":"Tracking Goals​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-goals","content":"Goal tracking is used to measure and improve your business objectives. To track goals, you first need to configure them on the server in your web panel. Goals such as, for example, subscribing to a newsletter can be tracked as below with the goal ID that you will see on the server after configuring the goal and optional revenue. The currency for the revenue can be set in the Piwik PRO Analytics settings. You can read more about goals hereTo track goals you can use the trackGoal method: await FlutterPiwikPro.sharedInstance.trackGoal(goal: &quot;27ecc5e3-8ae0-40c3-964b-5bd8ee3da059&quot;, revenue: 102.2);  iOS and Android parameters​ int goal – a tracking request will trigger a conversion for the goal of the website being tracked with this ID.double? revenue (optional) – a monetary value that has been generated as revenue by goal conversion. "},{"title":"Tracking Ecommerce Transactions​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-ecommerce-transactions","content":"Ecommerce transactions (in-app purchases) can be tracked to help you improve your business strategy. To track a transaction you must provide two required values - the transaction identifier and grandTotal. Optionally, you can also provide values for subTotal, tax, shippingCost, discount and list of purchased items. To track an ecommerce transaction you can use the trackEcommerceTransaction method: final ecommerceTransactionItems = [ EcommerceTransactionItem(category: 'cat1', sku: 'sku1', name: 'name1', price: 20, quantity: 1), EcommerceTransactionItem(category: 'cat2', sku: 'sku2', name: 'name2', price: 10, quantity: 1), EcommerceTransactionItem(category: 'cat3', sku: 'sku3', name: 'name3', price: 30, quantity: 2), ]; await FlutterPiwikPro.sharedInstance.trackEcommerceTransaction( identifier: &quot;transactionID&quot;, grandTotal: 100, subTotal: 10, tax: 5, shippingCost: 100, discount: 6, transactionItems: ecommerceTransactionItems, );  iOS and Android parameters​ String identifier – a unique string identifying the orderint grandTotal – The total amount of the order, in centsint? subTotal (optional) – the subtotal (net price) for the order, in centsint? tax (optional) – the tax for the order, in centsint? shippingCost (optional) – the shipping for the order, in centsint? discount (optional) – the discount for the order, in centsList&lt;EcommerceTransactionItem&gt;? transactionItems (optional) – the items included in the order "},{"title":"Tracking Campaigns​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-campaigns","content":"Tracking campaign URLs created with the online Campaign URL Builder tool allow you to measure how different campaigns (for example with Facebook ads or direct emails) bring traffic to your application. You can register a custom URL schema in your project settings to launch your application when users tap on the campaign link. You can track these URLs from the application delegate as below. The campaign information will be sent to the server together with the next analytics event. More details about campaigns can be found in the documentation. To track a campaign you can use the trackCampaign method: await FlutterPiwikPro.sharedInstance.trackCampaign(&quot;http://example.org/offer.html?pk_campaign=Email-SummerDeals&amp;pk_keyword=LearnMore&quot;);  iOS and Android parameters​ String url - the campaign URL. HTTPS, HTTP and FTP are valid - the URL must contain a campaign name and keyword parameters. "},{"title":"Tracking Custom Variables​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-custom-variables","content":"The feature will soon be disabled. We recommend using custom dimensions instead. To track custom name-value pairs assigned to your users or screen views, you can use custom variables. A custom variable can have a visit scope, which means that they are assigned to the whole visit of the user or action scope meaning that they are assigned only to the next tracked action such as screen view. It is required for names and values to be encoded in UTF-8. You can add a custom variable using the trackCustomVariable method: await FlutterPiwikPro.sharedInstance.trackCustomVariable( index: 1, name: 'filter', value: 'lcd', scope: CustomVariableScope.visit);  iOS and Android parameters​ int index – a given custom variable name must always be stored in the same “index” per session. For example, if you choose to store the variable name = “Gender” in index = 1 and you record another custom variable in index = 1, then the “Gender” variable will be deleted and replaced with new custom variable stored in index 1. Please note that some of the indexes are already reserved. See Default custom variables section for details.String name – this String defines the name of a specific Custom Variable such as “User type”. Limited to 200 characters.String value – this String defines the value of a specific Custom Variable such as “Customer”. Limited to 200 characters.CustomVariableScope scope – this String allows the specification of the tracking event type - “visit”, “action”, etc. The scope is the value from the enum CustomVariableScope and can be visit or action. "},{"title":"Tracking Custom Dimensions​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-custom-dimensions","content":"You can also use custom dimensions to track custom values. Custom dimensions first have to be defined on the server in your web panel. More details about custom dimensions can be found in the documentationYou can add a custom dimension using the trackCustomDimension method: await FlutterPiwikPro.sharedInstance.trackCustomDimension(id: 1, value: 'english');  iOS and Android parameters​ int index – a given custom dimension must always be stored in the same “index” per session, similar to custom variables. In example 1 is our dimension slot.String value – this String defines the value of a specific custom dimension such as “English”. Limited to 200 characters. "},{"title":"Tracking Profile Attributes​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#tracking-profile-attributes","content":"Requires Audience Manager The Audience Manager stores visitors’ profiles, which have data from a variety of sources. One of them can be a mobile application. It is possible to enrich the profiles with more attributes by passing any key-value pair like gender: male, favourite food: Italian, etc. It is recommended to set additional user identifiers such as email or User ID. This will allow the enrichment of existing profiles or merging profiles rather than creating a new profile. For example, if the user visited the website, browsed or filled in a form with his/her email (his data was tracked and profile created in Audience Manager) and, afterwards started using a mobile application, the existing profile will be enriched only if the email was set. Otherwise, a new profile will be created. To set profile attributes you can use the trackProfileAttribute method: await FlutterPiwikPro.sharedInstance.trackProfileAttribute(name: 'food', value: 'chips');  iOS and Android parameters​ String name – defines profile attribute name (non-null string).String value – defines profile attribute value (non-null string). Aside from attributes, each event also sends parameters which are retrieved from the tracker instance: WEBSITE_ID – always sent.USER_ID – if set.EMAIL – if set.VISITOR_ID – always sent, ID of the mobile application user, generated by the SDK.DEVICE_ID – Advertising ID that, by default, is fetched automatically when the tracker instance is created (only on Android). "},{"title":"Reading User Profile Attributes​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#reading-user-profile-attributes","content":"Requires Audience Manager It is possible to read the attributes of a given profile, however, with some limitations. Due to of security reasons to avoid personal data leakage, it is possible to read only attributes that were enabled for API access (whitelisted) in the Attributes section of Audience Manager. To get user profile attributes you can use the readUserProfileAttributes method: await FlutterPiwikPro.sharedInstance.readUserProfileAttributes()  Returned Value​ Future&lt;Map&lt;String, String&gt;&gt; - this method returns a Map of key-value pairs, where each pair represent attribute name (key) and value (instead of a usual String that describes which method was called with which parameters) "},{"title":"Checking Audience Membership​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#checking-audience-membership","content":"Requires Audience Manager Checking audience membership allows one to check if the user belongs to a specific group of users defined in the audience manger panel based on analytics data and audience manager profile attributes. You can check if a user belongs to a given audience, for example, to display him/her some type of special offer. You can check audience membership using the checkAudienceMembership method: await FlutterPiwikPro.sharedInstance.checkAudienceMembership('audienceId');  iOS and Android parameters​ String audienceId – ID of the audience (Audience Manager -&gt; Audiences tab) Returned Value​ Future&lt;bool&gt; - this method returns a bool value (true if a user is a member of an audience, false otherwise) instead of a usual String that describes which method was called with which parameters. "},{"title":"Advanced usage​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#advanced-usage","content":""},{"title":"User ID​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#user-id","content":"The user ID is an additional, optional non-empty unique string identifying the user (not set by default). It can be, for example, a unique username or user’s email address. If the provided user ID is sent to the analytics part together with the visitor ID (which is always automatically generated by the SDK), it allows the association of events from various platforms (for example iOS and Android) to the same user provided that the same user ID is used on all platforms. You can read more about User ID here. You can set a user id using the setUserId method: await FlutterPiwikPro.sharedInstance.setUserId('testUserId')  iOS and Android parameters​ String id – any non-empty unique string identifying the user. Passing null will delete the current user ID "},{"title":"User Email Address​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#user-email-address","content":"The user email address is an another string used for identifying users - a provided user email is sent to the audience manager part when you send the custom profile attribute configured on the audience manager web panel. Similarly to the user ID, it allows the association of data from various platforms (for example iOS and Android) to the same user as long as the same email is used on all platforms. It is recommended to set the user email to track audience manager profile attributes as it will create a better user profile. You can set a user email using the setUserEmail method: await FlutterPiwikPro.sharedInstance.setUserEmail('user@email.com');  iOS and Android parameters​ String email – a string representing an email address "},{"title":"Visitor ID​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#visitor-id","content":"SDK uses various IDs for tracking the user. The main one is visitor ID, which is internally randomly generated once by the SDK on the first usage and is then stored locally on the device. The visitor ID will never change unless the user removes the application from the device so that all events sent from his device will always be assigned to the same user in the Piwik PRO web panel. When the anonymization is enabled, a new visitor id is generated each time the application is started. We recommend using userID instead of VisitorID. Still, you can set a visitor ID using the setVisitorId method: await FlutterPiwikPro.sharedInstance.setVisitorId('Id');  iOS and Android parameters​ String id - a string containing a new Visitor ID "},{"title":"Setting Session Timeout​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#setting-session-timeout","content":"A session represents a set of user’s interactions with your app. By default, Analytics is closing the session after 30 minutes of inactivity, counting from the last recorded event in session and when the user will open up the app again the new session is started. You can configure the tracker to automatically close the session when users have placed your app in the background for a period of time. You can change the session timeout using the setSessionTimeout method: await FlutterPiwikPro.sharedInstance.setSessionTimeout(1000)  iOS and Android parameters​ int timeoutInMilliseconds - Session timeout in milliseconds. Default: 1800000 (30 minutes) "},{"title":"Setting Dispatch Interval​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#setting-dispatch-interval","content":"All tracking events are saved locally and by default. They are automatically sent to the server every 30 seconds. You can change this interval using the setDispatchInterval method: await FlutterPiwikPro.sharedInstance.setDispatchInterval(10000)  iOS and Android parameters​ int intervalInMilliseconds - Dispatch interval in milliseconds. Default: 30000 "},{"title":"Default Custom Variables​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#default-custom-variables","content":"The SDK, by default, automatically adds some information in custom variables about the device (index 1), system version (index 2) and app version (index 3). By default, this option is turned on. In case you need to configure custom variables separately, turn off this option and see the section above about tracking custom variables. You can disable this behavior using the setIncludeDefaultVariables method: await FlutterPiwikPro.sharedInstance.setIncludeDefaultVariables(false);  iOS and Android parameters​ bool shouldInclude - a boolean value that removes Default Variables when false "},{"title":"Opt-Out​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#opt-out","content":"You can disable all tracking in the application by using the opt-out feature. No events will be sent to the server if the opt-out is set. By default, opt-out is not set and events are tracked. You can opt out of tracking using the optOut method: await FlutterPiwikPro.sharedInstance.optOut(true);  iOS and Android parameters​ bool shouldOptOut - a boolean value that disables all tracking in the app when set to true. "},{"title":"Dry Run​","type":1,"pageTitle":"Piwik PRO SDK for Flutter","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_Flutter#dry-run","content":"The SDK provides a dryRun flag that, when set, prevents any data from being sent to Piwik. The dryRun flag should be set whenever you are testing or debugging an implementation and do not want test data to appear in your Piwik reports. You can set set the dry run flag using the dryRun method: await FlutterPiwikPro.sharedInstance.dryRun(true);  iOS and Android parameters​ bool shouldDryRun - a boolean value that prevents any data being sent to a tracker when set to true "},{"title":"Accelerated Mobile Pages integration","type":0,"sectionRef":"#","url":"/docs/data-collection/other_integrations/AMP_integration","content":"","keywords":""},{"title":"Basic setup​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#basic-setup","content":"This setup allows you to track page views. Copy following code to your AMP page while replacing: &lt;INSTANCE_DOMAIN&gt; - PPAS instance domain (e.g.analytics.example.com)&lt;APP_ID&gt; - PPAS application ID (e.g.12345678-1234-1234-1234-1234567890ab)&lt;TRACKER_HASH&gt; - Cookie hash generated by JavaScript Tracking Client. Check how to get cookie hash&lt;howToGetJSTCCookieHash&gt;section for detailed information. &lt;script async custom-element=&quot;amp-analytics&quot; src=&quot;https://cdn.ampproject.org/v0/amp-analytics-0.1.js&quot;&gt;&lt;/script&gt; &lt;amp-analytics type=&quot;ppasanalytics&quot;&gt; &lt;script type=&quot;application/json&quot;&gt; { &quot;vars&quot;: { &quot;host&quot;: &quot;&lt;INSTANCE_DOMAIN&gt;&quot;, &quot;website_id&quot;: &quot;&lt;APP_ID&gt;&quot;, &quot;website_hash&quot;: &quot;&lt;TRACKER_HASH&gt;&quot; } } &lt;/script&gt; &lt;/amp-analytics&gt;  "},{"title":"How to get JavaScript Tracking Client cookie hash​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#how-to-get-javascript-tracking-client-cookie-hash","content":"If there is no non-AMP page tracked by traditional JavaScript Tracking Client, this value may be removed from configuration or left empty. It's used to guarantee that same cookie will be used by AMP and non-AMP pages on client domain. This value should be taken from the name of the ID cookie generated by JavaScript Tracking Client. Each JavaScript Tracking Client generates unique cookie name based on its configuration. Follow these instructions to get hash from cookie generated by JavaScript Tracking Client: Setup JavaScript Tracking Client on non-AMP page (if it was not done already).Open tracked page in the browser.Open developer tools in the browser and look for cookie starting with _pk_id.. Cookie name should look similar to this:_pk_id.12345678-1234-1234-1234-1234567890ab.cdef. The part after first dot is the value of App ID of the cookie (if there are multiple cookies starting with _pk_id. it may be used to identify correct cookie). After second dot you'll find the cookie hash generated by JavaScript Tracking Client (in the example its value iscdef). Copy this part and replace &lt;TRACKER_HASH&gt; with it. Here you can see how to look for JavaScript Tracking Client cookie in Google Chrome developer tools:  "},{"title":"Tracking custom events​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#tracking-custom-events","content":"To track custom event&lt;jtc-api-custom-events&gt; you should attach a trigger on the interactive page element and define event values. To do that add to the configuration thetriggerssection and set up event trigger. This example will send custom event when page element using &quot;mybutton&quot; ID will be clicked: &lt;amp-analytics type=&quot;ppasanalytics&quot;&gt; &lt;script type=&quot;application/json&quot;&gt; { &quot;vars&quot;: { &quot;host&quot;: &lt;instance_domain&gt;, &quot;website_id&quot;: &lt;app_id&gt;, &quot;website_hash&quot;: &lt;tracker_hash&gt; }, &quot;triggers&quot;: { &quot;exampleEvent&quot;: { &quot;selector&quot;: &quot;#mybutton&quot;, &quot;on&quot;: &quot;click&quot;, &quot;request&quot;: &quot;customevent&quot;, &quot;vars&quot;: { &quot;event_category&quot;: &quot;buttons&quot;, &quot;event_action&quot;: &quot;click&quot;, &quot;event_name&quot;: &quot;testButton&quot; } } } } &lt;/script&gt; &lt;/amp-analytics&gt;  These are parameters used by custom event: “selector” CSS selector for element that should be watched “on” - HTML event type “vars” - Variables that should be used by this event. Custom events expect: “event_category” - required“event_action” - required“event_name” - optional“event_value” - optional "},{"title":"Tracking download events​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#tracking-download-events","content":"To track download event&lt;jtc-api-download-and-outlink&gt; attach trigger to a link in a similar way to custom event &lt;ampCustomEvent&gt;. This example will send download event when page element using &quot;mydownload&quot; ID will be clicked: &lt;amp-analytics type=&quot;ppasanalytics&quot;&gt; &lt;script type=&quot;application/json&quot;&gt; { &quot;vars&quot;: { &quot;host&quot;: &lt;instance_domain&gt;, &quot;website_id&quot;: &lt;app_id&gt;, &quot;website_hash&quot;: &lt;tracker_hash&gt; }, &quot;triggers&quot;: { &quot;exampleEvent&quot;: { &quot;selector&quot;: &quot;#mydownload&quot;, &quot;on&quot;: &quot;click&quot;, &quot;request&quot;: &quot;download&quot;, &quot;vars&quot;: { &quot;download_url&quot;: &quot;https://example.com/whitepaper.pdf&quot; } } } } &lt;/script&gt; &lt;/amp-analytics&gt;  These are parameters used by download event: “selector” CSS selector for element that should be watched “on” - HTML event type “vars” - Variables that should be used by this event. Custom events expect: “download_url” - required "},{"title":"Tracking outlink events​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#tracking-outlink-events","content":"To track outlink event&lt;jtc-api-download-and-outlink&gt; attach trigger to a link in a similar way to custom event &lt;ampCustomEvent&gt;. This example will send outlink event when page element using &quot;myoutlink&quot; ID will be clicked: &lt;amp-analytics type=&quot;ppasanalytics&quot;&gt; &lt;script type=&quot;application/json&quot;&gt; { &quot;vars&quot;: { &quot;host&quot;: &lt;instance_domain&gt;, &quot;website_id&quot;: &lt;app_id&gt;, &quot;website_hash&quot;: &lt;tracker_hash&gt; }, &quot;triggers&quot;: { &quot;exampleEvent&quot;: { &quot;selector&quot;: &quot;#myoutlink&quot;, &quot;on&quot;: &quot;click&quot;, &quot;request&quot;: &quot;outlink&quot;, &quot;vars&quot;: { &quot;outlink_url&quot;: &quot;https://another-site.com/&quot; } } } } &lt;/script&gt; &lt;/amp-analytics&gt;  These are parameters used by outlink event: “selector” CSS selector for element that should be watched “on” - HTML event type “vars” - Variables that should be used by this event. Custom events expect: “outlink_url” - required "},{"title":"Tracking goal conversions​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#tracking-goal-conversions","content":"To track goal conversion&lt;jtc-api-goal-conversions&gt; attach trigger to a link in a similar way to custom event &lt;ampCustomEvent&gt;. This example will send goal conversion when page element using &quot;mygoal&quot; ID will be clicked: &lt;amp-analytics type=&quot;ppasanalytics&quot;&gt; &lt;script type=&quot;application/json&quot;&gt; { &quot;vars&quot;: { &quot;host&quot;: &lt;instance_domain&gt;, &quot;website_id&quot;: &lt;app_id&gt;, &quot;website_hash&quot;: &lt;tracker_hash&gt; }, &quot;triggers&quot;: { &quot;exampleEvent&quot;: { &quot;selector&quot;: &quot;#mygoal&quot;, &quot;on&quot;: &quot;click&quot;, &quot;request&quot;: &quot;goal&quot;, &quot;vars&quot;: { &quot;goal_id&quot;: &quot;1&quot;, &quot;revenue&quot;: &quot;59.99&quot; } } } } &lt;/script&gt; &lt;/amp-analytics&gt;  These are parameters used by goal event: “selector” CSS selector for element that should be watched “on” - HTML event type “vars” - Variables that should be used by this event. Custom events expect: “goal_id” - required&quot;revenue&quot; - optional "},{"title":"Track internal search events​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#track-internal-search-events","content":"To track internal search event&lt;jtc-api-site-search&gt; attach trigger to a link in a similar way to custom event &lt;ampCustomEvent&gt;. This example will send internal search event when page element using &quot;mysearch&quot; ID will be clicked: &lt;amp-analytics type=&quot;ppasanalytics&quot;&gt; &lt;script type=&quot;application/json&quot;&gt; { &quot;vars&quot;: { &quot;host&quot;: &lt;instance_domain&gt;, &quot;website_id&quot;: &lt;app_id&gt;, &quot;website_hash&quot;: &lt;tracker_hash&gt; }, &quot;triggers&quot;: { &quot;exampleEvent&quot;: { &quot;selector&quot;: &quot;#mysearch&quot;, &quot;on&quot;: &quot;click&quot;, &quot;request&quot;: &quot;search&quot;, &quot;vars&quot;: { &quot;search_keyword&quot;: &quot;apple&quot;, &quot;search_category&quot;: &quot;fruits&quot;, &quot;search_result_count&quot;: &quot;10&quot;, } } } } &lt;/script&gt; &lt;/amp-analytics&gt;  These are parameters used by internal search event: “selector” CSS selector for element that should be watched “on” - HTML event type “vars” - Variables that should be used by this event. Custom events expect: “search_keyword” - required“search_category” - required“search_result_count” - optional "},{"title":"Complete page example​","type":1,"pageTitle":"Accelerated Mobile Pages integration","url":"/docs/data-collection/other_integrations/AMP_integration#complete-page-example","content":"This example shows complete AMP page with 2 buttons. It will send page view, custom event and goal conversion. &lt;!doctype html&gt; &lt;html amp lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;AMP example page&lt;/title&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;link rel=&quot;canonical&quot; href=&quot;example.html&quot;&gt; &lt;style amp-boilerplate&gt;body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}&lt;/style&gt;&lt;noscript&gt;&lt;style amp-boilerplate&gt;body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}&lt;/style&gt;&lt;/noscript&gt; &lt;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&lt;/script&gt; &lt;script async custom-element=&quot;amp-analytics&quot; src=&quot;https://cdn.ampproject.org/v0/amp-analytics-0.1.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;amp-analytics type=&quot;ppasanalytics&quot;&gt; &lt;script type=&quot;application/json&quot;&gt; { &quot;vars&quot;: { &quot;host&quot;: &quot;example.piwik.pro&quot;, &quot;website_id&quot;: &quot;12345678-1234-1234-1234-1234567890ab&quot;, &quot;website_hash&quot;: &quot;cdef&quot; }, &quot;triggers&quot;: { &quot;trackRecommendation&quot;: { &quot;on&quot;: &quot;click&quot;, &quot;selector&quot;: &quot;#recommend&quot;, &quot;request&quot;: &quot;customevent&quot;, &quot;vars&quot;: { &quot;event_category&quot;: &quot;social&quot;, &quot;event_action&quot;: &quot;recommend&quot;, &quot;event_name&quot;: &quot;News letter&quot; } }, &quot;trackSubscription&quot;: { &quot;on&quot;: &quot;click&quot;, &quot;selector&quot;: &quot;#subscribe&quot;, &quot;request&quot;: &quot;goal&quot;, &quot;vars&quot;: { &quot;goal_id&quot;: &quot;1&quot; } } } } &lt;/script&gt; &lt;/amp-analytics&gt; &lt;h1&gt;Welcome&lt;/h1&gt; &lt;div&gt; &lt;button id=&quot;recommend&quot;&gt;Share this page with friends&lt;/button&gt; &lt;/div&gt; &lt;div&gt; &lt;button id=&quot;subscribe&quot;&gt;Subscribe to news letter&lt;/button&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;  "},{"title":"Piwik PRO Library for Next.js","type":0,"sectionRef":"#","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#installation","content":"To use this package in your project, run the following command. "},{"title":"npm​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#npm","content":"npm install @piwikpro/next-piwik-pro  "},{"title":"Yarn​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#yarn","content":"yarn add @piwikpro/next-piwik-pro  "},{"title":"Basic setup​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#basic-setup","content":"In your Next.js Project, include the default PiwikProProvider in the _app.tsx file. To set up the Piwik PRO Tag Manager container in the app, include the initialization code in your App. In the arguments, pass your account name and your container id as parameters (marked 'accountName' and 'containerId' in the example below). _app.tsx​ import PiwikProProvider from '@piwikpro/next-piwik-pro' function App({ Component, pageProps }: AppProps) { return ( &lt;&gt; &lt;PiwikProProvider accountName='accountName' containerId='43e4bca4-e220-43df-acfc-40fef7e25105' &gt; &lt;Component {...pageProps} /&gt; &lt;/PiwikProProvider&gt; &lt;/&gt; ) }  "},{"title":"Setup with environmental variables​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#setup-with-environmental-variables","content":"If you plan to use environmental variables to config your Piwik account you can do it with adding them to your .env file. Remember that variables to be visible in component need to be named with NEXT_PUBLIC_ prefix, in other cases they will be visible only in Node context but not in Next. .env​ NEXT_PUBLIC_ACCOUNT_NAME=accountName NEXT_PUBLIC_CONTAINER_ID=43e4bca4-e220-43df-acfc-40fef7e25105  _app.tsx​ function App({ Component, pageProps }: AppProps) { return ( &lt;&gt; &lt;PiwikProProvider accountName={process.env.NEXT_PUBLIC_ACCOUNT_NAME} containerId={process.env.NEXT_PUBLIC_CONTAINER_ID} &gt; &lt;Component {...pageProps} /&gt; &lt;/PiwikProProvider&gt; &lt;/&gt; ) }  "},{"title":"Setup with nonce​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#setup-with-nonce","content":"The nonce attribute is useful to allow-list specific elements, such as a particular inline script or style elements. It can help you to avoid using the CSP unsafe-inline directive, which would allow-list all inline scripts or styles. If you want your nonce to be passed to the script, pass it as the third argument when calling the script initialization method. _app.tsx​ import PiwikProProvider from '@piwikpro/next-piwik-pro' function App({ Component, pageProps }: AppProps) { return ( &lt;&gt; &lt;PiwikProProvider accountName='accountName' containerId='43e4bca4-e220-43df-acfc-40fef7e25105' nonce='nonce-string' &gt; &lt;Component {...pageProps} /&gt; &lt;/PiwikProProvider&gt; &lt;/&gt; ) }  "},{"title":"Supported methods list and usage​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#supported-methods-list-and-usage","content":"To use methods in your page you need to include usePiwikPro from the library. import { usePiwikPro } from '@piwikpro/next-piwik-pro'  Then you need to define modules you want to use and initialize it from previously included usePiwikPro context. In example below you can see the initialization of the PageViews module. const { PageViews } = usePiwikPro()  You can use those methods in all hooks and props for ex. useEffect or onClick. "},{"title":"useEffect​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#useeffect","content":"useEffect(() =&gt; { PageViews.trackPageView('optional title') }, [])  "},{"title":"onClick​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#onclick","content":"&lt;button onClick={() =&gt; { CustomEvent.trackEvent('Post', pageData.title) }} &gt; CustomEvent.trackEvent button &lt;/button&gt;  Below you can view the sample usage of the avialable methods from modules. "},{"title":"Analytics​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#analytics","content":"Send page views and virtual page views​ const { PageViews } = usePiwikPro() PageViews.trackPageView('optional title')  User management​ Collection of methods to handle users and visitors data through the Piwik PRO API. Methods​ UserManagement.setUserId(userID) - Sets user ID, which will help identify a user of your application across many devices and browsers. userID (string) – Required Non-empty, unique ID of a user in application UserManagement.resetUserId() - Clears previously set userID, e.g. when visitor logs out.UserManagement.getUserId() - Returns currently used userID value (set with setUserId()).UserManagement.getVisitorId() - Returns 16-character hex ID of the visitor.UserManagement.getVisitorInfo() - Returns visitor information. Return type string[]. String array with the following visitor info: [0] - new visitor flag indicating new, (&quot;1&quot;) or returning (&quot;0&quot;) visitor[1] - visitor ID (16-character hex number)[2] - first visit timestamp (UNIX epoch time)[3] - previous visit count (&quot;0&quot; for first visit)[4] - current visit timestamp (UNIX epoch time)[5] - last visit timestamp (UNIX epoch time or &quot;&quot; if N/A)[6] - last e-commerce order timestamp (UNIX epoch time or &quot;&quot; if N/A) Example usage​ const { UserManagement } = usePiwikPro() UserManagement.setUserId('UserId') UserManagement.resetUserId()  Some of the methods are getting data from the API and they need to be called asynchronously. They provide data that can be shown on the page. This need to be done with defining async function in your hook body and setting the state of the variable. Like on example below. const { UserManagement } = usePiwikPro() const [userId, setUserId] = useState&lt;string&gt;('') const [visitorId, setVisitorId] = useState&lt;string&gt;('') const [visitorInfo, setVisitorInfo] = useState&lt;any&gt;('') const callAsyncMethods = async () =&gt; { const uId = await UserManagement.getUserId() setUserId(uId) const vId = await UserManagement.getVisitorId() setVisitorId(vId) const vInfo = await UserManagement.getVisitorInfo() setVisitorInfo(vInfo) } callAsyncMethods()  You have access to those variables in you page body. Example access below. &lt;p&gt;&lt;code&gt;UserManamement.getUserId()&lt;/code&gt; - {userId}&lt;/p&gt; &lt;p&gt;&lt;code&gt;UserManamement.getVisitorId()&lt;/code&gt; - {visitorId}&lt;/p&gt; &lt;p&gt; &lt;code&gt;UserManamement.getVisitorInfo()&lt;/code&gt; -{' '} {JSON.stringify(visitorInfo)} &lt;/p&gt;  Custom Events​ Collection of methods to handle custom events, not described in the other categories. Methods​ CustomEvent.trackEvent(category, action[, name[, value[, dimensions]]]) - Tracks custom event, e.g. when visitor interacts with the page. category (string) – Required Event categoryaction (string) – Required Event actionname (string) – Optional Event namevalue (number) – Optional Event value Example usage​ const { CustomEvent } = usePiwikPro() CustomEvent.trackEvent('Post', pageData.title)  Site search​ Collection of methods to track site search data, through the Piwik PRO API. Methods​ SiteSearch.trackSiteSearch(keyword[, category[, resultCount[, dimensions]]]) - Tracks search requests on a website. keyword (string) – Required What keyword the visitor entered into the search boxcategory (string|Array&lt;string&gt;) – Optional Category selected in the search enginesearchCount (number) – Optional The number of search results showndimensions (object) – Optional Custom dimensions to pass along with the site search event Example usage​ const { SiteSearch } = usePiwikPro() SiteSearch.trackSiteSearch('keyword', 'category', 5)  E-commerce​ Collection of methods to handle e-commerce events through the Piwik PRO API. Methods​ eCommerce.addEcommerceItem(productSKU[, productName[, productCategory[, productPrice[, productQuantity]]]]) - Adds a product to a virtual shopping cart. If a product with the same SKU is in the cart, it will be removed first. Does not send any data to the Collecting &amp; Processing Pipeline. productSKU (string) – Required Product stock-keeping unitproductName (string) – Optional Product nameproductCategory (string|Array&lt;string&gt;) – Optional Product category or an array of up to 5 categoriesproductPrice (number) – Optional Product priceproductQuantity (number) – Optional The number of units eCommerce.removeEcommerceItem(productSKU) - Removes a product with the provided SKU from a virtual shopping cart. If multiple units of that product are in the virtual cart, all of them will be removed. Does not send any data to the Collecting &amp; Processing Pipeline. productSKU (string) – Required stock-keeping unit of a product to remove eCommerce.clearEcommerceCart() - Removes all items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing Pipeline. eCommerce.getEcommerceItems() - Returns a copy of items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing Pipeline. Returns: Object containing all tracked items (format: Object&lt;productSKU, Array[productSKU, productName, productCategory, price, quantity]&gt;) eCommerce.setEcommerceView([productSKU[, productName[, productCategory[, productPrice]]]]) - Tracks product or category view. Must be followed by a page view. productSKU (string) – Optional Product stock-keeping unitproductName (string) – Optional Product nameproductCategory (string|Array&lt;string&gt;) – Optional Category or an array of up to 5 categoriesproductPrice (number) – Optional Product price eCommerce.trackEcommerceCartUpdate(cartAmount) - Tracks items present in a virtual shopping cart (registered with addEcommerceItem). cartAmount (number) – Required The total value of items in the cart eCommerce.trackEcommerceOrder(orderID, orderGrandTotal[, orderSubTotal[, orderTax[, orderShipping[, orderDiscount]]]]) - Tracks a successfully placed e-commerce order with items present in a virtual cart (registered using addEcommerceItem). orderID (string) – Required String uniquely identifying an orderorderGrandTotal (number) – Required Order Revenue grand total - tax, shipping and discount includedorderSubTotal (number)– Optional Order subtotal - without shippingorderTax (number)– Optional Order tax amountorderShipping (number) – Optional Order shipping costorderDiscount (number) – Optional Order discount amount Example usage​ const { eCommerce } = usePiwikPro() eCommerce.addEcommerceItem('1', 'ProductName', 'Items', 69, 1) eCommerce.removeEcommerceItem('1') eCommerce.trackEcommerceOrder('id', 50) eCommerce.trackEcommerceCartUpdate(2) eCommerce.setEcommerceView('1') eCommerce.clearEcommerceCart()  Some of the methods are getting data from the API and they need to be called asynchronously. They provide data that can be shown no the page. This need to be done with defining async function in your hook body and setting the state of the variable. Like on example below. const { eCommerce } = usePiwikPro() const [eCommerceItems, setECommerceInfo] = useState&lt;any&gt;('') const callAsyncMethods = async () =&gt; { const ecItem = await eCommerce.getEcommerceItems() setECommerceInfo(ecItem) } callAsyncMethods()  You have access to those variables in you page body. Example below. &lt;p&gt; &lt;code&gt;eCommerce.getEcommerceItems()&lt;/code&gt; -{' '} {JSON.stringify(eCommerceItems)} &lt;/p&gt;  Content Tracking​ Collection of methods to track impressions through the Piwik PRO API. Methods​ ContentTracking.trackContentImpression(contentName, contentPiece, contentTarget) - Tracks manual content impression event. contentName (string) – Required Name of a content blockcontentPiece (string) – Required Name of the content that was displayed (e.g. link to an image)contentTarget (string) – Required Where the content leads to (e.g. URL of some external website) ContentTracking.trackContentInteraction(contentInteraction, contentName, contentPiece, contentTarget) - Tracks manual content interaction event. contentInteraction (string) – Required Type of interaction (e.g. &quot;click&quot;)contentName (string) – Required Name of a content blockcontentPiece (string) – Required Name of the content that was displayed (e.g. link to an image)contentTarget (string) – Required Where the content leads to (e.g. URL of some external website) Example usage​ const { ContentTracking } = usePiwikPro() ContentTracking.trackContentImpression( 'contentName', 'contentPiece', 'contentTarget' ) ContentTracking.trackContentInteraction( 'contentInteracion', 'contentName', 'contentPiece', 'contentTarget' )  Downloads and outlinks​ Collection of methods to manually tracks outlink or download events through the Piwik PRO API. Methods​ DownloadAndOutlink.trackLink(linkAddress, linkType[, dimensions[, callback]]) - Manually tracks outlink or download event with provided values. linkAddress (string) – Required URL address of the linklinkType (string) – Required Type of the link, &quot;link&quot; for outlink, &quot;download&quot; for downloaddimensions (object) – Optional Custom dimensions to pass along with the link eventcallback (function) – Optional Function that should be called after tracking the link DownloadAndOutlink.enableLinkTracking([trackMiddleAndRightClicks]) - Enables automatic link tracking. By default, left, right and middle clicks on links will be treated as opening a link. Opening a link to an external site (different domain) creates an outlink event. Opening a link to a downloadable file creates a download event. trackMiddleAndRightClicks (boolean) – Optional Whether to treat middle and right clicks as opening a link. The default value is true. DownloadAndOutlink.setLinkClasses(classes) - Sets a list of class names that indicate whether a link is an outlink and not download. classes (Array&lt;string&gt;) – Required CSS class name or an array of class names DownloadAndOutlink.setDownloadClasses(classes) - Sets a list of class names that indicate whether a list is a download and not an outlink. classes (Array&lt;string&gt;) – Required CSS class name or an array of class names DownloadAndOutlink.addDownloadExtensions(extensions)Adds new extensions to the download extensions list. extensions (Array&lt;string&gt;) – Required List of extensions to be added as an array, e.g. [&quot;7z&quot;,&quot;apk&quot;,&quot;mp4&quot;]. DownloadAndOutlink.removeDownloadExtensions(extensions) - Removes extensions from the download extensions list. extensions (Array&lt;string&gt;) – Required List of extensions to remove as an array, e.g. [&quot;zip&quot;, &quot;rar&quot;]. DownloadAndOutlink.setLinkTrackingTimer(milliseconds) - When a visitor produces an events and closes the page immediately afterwards, e.g. when opening a link, the request might get cancelled. To avoid loosing the last event this way, JavaScript Tracking Client will lock the page for a fraction of a second (if wait time hasn’t passed), giving the request time to reach the Collecting &amp; Processing Pipeline. setLinkTrackingTimer allows to change the default lock/wait time of 500ms. milliseconds (number) – Required How many milliseconds a request needs to reach the Collecting &amp; Processing Pipeline. DownloadAndOutlink.setIgnoreClasses(classes) - Set a list of class names that indicate a link should not be tracked. classes (Array&lt;string&gt;) – Required CSS class name or an array of class names Example usage​ const { DownloadAndOutlink } = usePiwikPro() DownloadAndOutlink.trackLink('http://localhost:3000', 'link') DownloadAndOutlink.enableLinkTracking(true) DownloadAndOutlink.setLinkClasses(['this-is-an-outlink']) DownloadAndOutlink.setDownloadClasses(['this-is-a-download']) DownloadAndOutlink.addDownloadExtensions(['zip', 'rar']) DownloadAndOutlink.removeDownloadExtensions(['doc', 'xls']) DownloadAndOutlink.setLinkTrackingTimer(10) DownloadAndOutlink.setIgnoreClasses(['do-not-track'])  Some of the methods are getting data from the API and they need to be called asynchronously. They provide data that can be shown no the page. This need to be done with defining async function in your hook body and setting the state of the variable. Like on example below. const { DownloadAndOutlink } = usePiwikPro() const [linkTrackingTimer, setLinkTrackingTimer] = useState&lt;string&gt;('') const callAsyncMethods = async () =&gt; { const lTrackingTimer = await DownloadAndOutlink.getLinkTrackingTimer() setLinkTrackingTimer(lTrackingTimer) }  You have access to those variables in you page body. Example below. &lt;p&gt; &lt;code&gt;DownloadAndOutlink.getLinkTrackingTimer()&lt;/code&gt; -{' '} {linkTrackingTimer} &lt;/p&gt;  Goal Conversions​ Collection of methods to manually tracks goal conversions through the Piwik PRO API. Methods​ GoalConversions.trackGoal(goalID[, conversionValue[, dimensions]]) - Tracks manual goal conversion. goalID (number|string) – Required Goal ID (integer or UUID), conversionValue (number) – Optional Conversion value (revenue), dimensions (object) – Optional Custom dimensions to pass along with the conversion Example usage​ const { GoalConversions } = usePiwikPro() // function trackGoal(goalId: string | number, conversionValue: number, dimensions?: Object | undefined): void GoalConversions.trackGoal(1, 30)  Custom Dimensions​ Collection of methods to manage custom dimentsions through the Piwik PRO API. Methods​ CustomDimensions.setCustomDimensionValue(customDimensionID, customDimensionValue - Sets a custom dimension to be used later. customDimensionID (number) – Required ID of a custom dimension, customDimensionValue (string) – Required Value of a custom dimension CustomDimensions.deleteCustomDimension(customDimensionID) - Removes a custom dimension with the specified ID. customDimensionID (number) – Required ID of a custom dimension CustomDimensions.getCustomDimensionValue(customDimensionID)- Returns the value of a custom dimension with the specified ID. Returns: Value set with setCustomDimensionValue (e.g. loginStatus). Return type: string customDimensionID (number)– Required ID of a custom dimension. Example usage​ const { CustomDimensions } = usePiwikPro() CustomDimensions.setCustomDimensionValue('customDimensionId', 'value') CustomDimensions.getCustomDimensionValue('customDimensionId') CustomDimensions.deleteCustomDimension('customDimensionId')  Some of the methods are getting data from the API and they need to be called asynchronously. They provide data that can be shown on the page. This need to be done with defining async function in your hook body and setting the state of the variable. Like on example below. const { UserManagement } = usePiwikPro() const [customDimValue, setCustomDimValue] = useState&lt;string&gt;('') const callAsyncMethods = async () =&gt; { const cDimValue = await CustomDimensions.getCustomDimensionValue(12) setCustomDimValue(cDimValue) } callAsyncMethods()  You have access to those variables in you page body. Example access below. &lt;p&gt; &lt;code&gt;CustomDimensions.getCustomDimensionValue()&lt;/code&gt; - {customDimValue} &lt;/p&gt;  "},{"title":"Tag Manager​","type":1,"pageTitle":"Piwik PRO Library for Next.js","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_NextJS#tag-manager","content":"Data layer​ A data layer is a data structure on your site or app where you can store data and access it with tools like Tag Manager. You can include any data you want in your data layer. Methods​ DataLayer.push(data) - Adds an event to a data layer. data - Required data value without type. Example usage​ const { DataLayer } = usePiwikPro() DataLayer.push('data')  "},{"title":"Piwik PRO Library for React","type":0,"sectionRef":"#","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#installation","content":""},{"title":"NPM​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#npm","content":"To use this package in your project, run the following command. npm install @piwikpro/react-piwik-pro  "},{"title":"Basic setup​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#basic-setup","content":"In your React Project, include the default PiwikPro in the highest level application module. ie index. To set up the Piwik PRO Tag Manager container in the app, the easiest way is to call the PiwikPro.initialize() method. PiwikPro.initialize() must be initialized using this function before any of the other tracking functions will record any data. In the arguments, pass your app ID and your account URL as parameters (marked 'container-id' and 'container-url' in the example below). import PiwikPro from '@piwikpro/react-piwik-pro'; PiwikPro.initialize('container-id', 'container-url'); ReactDOM.render(&lt;App /&gt;, document.getElementById('root'))  "},{"title":"Piwik PRO Services​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#piwik-pro-services","content":""},{"title":"Send Custom Events​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#send-custom-events","content":"import { CustomEvent } from '@piwikpro/react-piwik-pro' export class TestFormComponent { onUserInputName() { ... CustomEvent.trackEvent('user_register_form', 'enter_name', 'Name', 'Value'); } onUserInputEmail() { ... CustomEvent.trackEvent('user_register_form', 'enter_email', 'Email', 'Value'); } onSubmit() { ... CustomEvent.trackEvent('user_register_form', 'submit', 'Sent'); } }  "},{"title":"Send page views and virtual page views​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#send-page-views-and-virtual-page-views","content":"import { PageViews } from '@piwikpro/react-piwik-pro'; ... const App = () =&gt; { PageViews.trackPageView('optional title'); return ...; } export default App  "},{"title":"API​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#api","content":""},{"title":"Page Views Service​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#page-views-service","content":"A page view is the most basic type of a tracked event. It represents a single page viewing action. Import​ import { PageViews } from '@piwikpro/react-piwik-pro'  Methods​ trackPageView(customPageTitle?: string) - Tracks a visit on the page that the function was run on. "},{"title":"User Management​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#user-management","content":"Import​ import { UserManagement } from '@piwikpro/react-piwik-pro'  Methods​ getUserId() - The function that will return user ID.setUserId(userId: string) - user ID is an additional parameter that allows you to aggregate data. When set up, you will be able to search through sessions by this parameter, filter reports through it or create Multi attribution reports using User ID.resetUserId() - Clears previously set userID, e.g. when visitor logs out.getVisitorId() - Returns 16-character hex ID of the visitor.getVisitorInfo() - Returns visitor information in an array: new visitor flag indicating new (1) or returning (0) visitorvisitor ID (UUID)first visit timestamp (Unix epoch time)previous visit count (0 for first visit)current visit timestamp (Unix epoch time)last visit timestamp (Unix epoch time or '' if N/A)last e-commerce order timestamp (Unix epoch time or '' if N/A) "},{"title":"Custom Event​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#custom-event","content":"Custom events enable tracking visitor actions that are not predefined in the existing JavaScript Tracking Client API, allowing web analysts to accurately measure and analyze any domain. Import​ import { CustomEvent } from '@piwikpro/react-piwik-pro'  Methods​ trackEvent(category: string, action: string, name?: string, value?: number) - Tracks a custom event, e.g. when a visitor interacts with the page. "},{"title":"Site search Service​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#site-search-service","content":"Site search tracking gives you insights into how visitors interact with the search engine on your website - what they search for and how many results they get back. Import​ import { SiteSearch } from '@piwikpro/react-piwik-pro'  Methods​ trackSiteSearch(keyword: string, category?: string, searchCount?: number, dimensions?: Object) - Tracks search requests on a website. "},{"title":"E-Commerce Service​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#e-commerce-service","content":"Import​ import { eCommerce } from '@piwikpro/react-piwik-pro'  Methods​ addEcommerceItem(productSKU: string, productName: string, productCategory: string | string[], productPrice: number, productQuantity: number) - Adds a product to a virtual shopping cart. If a product with the same SKU is in the cart, it will be removed first. Does not send any data to the Collecting &amp; Processing Pipeline.removeEcommerceItem(productSKU: string) - Removes a product with the provided SKU from a virtual shopping cart. If multiple units of that product are in the virtual cart, all of them will be removed. Does not send any data to the Collecting &amp; Processing Pipeline.clearEcommerceCart() - Removes all items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing Pipeline.getEcommerceItems() - Returns a copy of items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing PipelinetrackEcommerceOrder() - Tracks a successfully placed e-commerce order with items present in a virtual cart (registered using addEcommerceItem).trackEcommerceCartUpdate(cartAmount: number) - Tracks items present in a virtual shopping cart (registered with addEcommerceItem)setEcommerceView(productSKU: string, productName?: string, productCategory?: string[], productPrice?: string) - Tracks product or category view. Must be followed by a page view. "},{"title":"Content Tracking Service​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#content-tracking-service","content":"Content Tracking lets you track what content is visible on your site and how users interact with it. Import​ import { ContentTracking } from '@piwikpro/react-piwik-pro'  "},{"title":"Methods​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#methods-5","content":"trackContentImpression(contentName: string, contentPiece: string, contentTarget: string) - Tracks manual content impression event.trackContentInteraction(contentInteraction: string, contentName: string, contentPiece: string, contentTarget: string) - Tracks manual content interaction event. "},{"title":"Download and outlink Service​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#download-and-outlink-service","content":"Import​ import { DownloadAndOutlink } from '@piwikpro/react-piwik-pro'  Methods​ trackLink(url: string, linkType: string, customData?: object, callback?: (params: any) =&gt; void) - Manually tracks outlink or download event with provided values.enableLinkTracking(enable: boolean) - Enables or disables automatic link tracking. If enabled, left, right and middle clicks on links will be treated as opening a link. Opening a links to an external site (different domain) creates an outlink event. Opening a link to a downloadable file creates a download event.setLinkClasses(classes: string[]) - Sets a list of class names that indicate whether a link is an outlink and not download.setDownloadClasses(classes: string[]) - Sets a list of class names that indicate whether a list is a download and not an outlink.setDownloadExtensions(extensions: string[]) - Overwrites the list of file extensions indicating that a link is a download.addDownloadExtensions(extensions: string[]) - Adds new extensions to the download extensions list.removeDownloadExtensions(extensions: string[]) - Removes extensions from the download extensions list.setLinkTrackingTimer(time: number) - When a visitor produces an events and closes the page immediately afterwards, e.g. when opening a link, the request might get cancelled. To avoid loosing the last event this way, JavaScript Tracking Client will lock the page for a fraction of a second (if wait time hasn’t passed), giving the request time to reach the Collecting &amp; Processing Pipeline.getLinkTrackingTimer() - Returns lock/wait time after a request set by setLinkTrackingTimer.setIgnoreClasses(classes: string[]) - Set a list of class names that indicate a link should not be tracked. "},{"title":"Goal Conversions​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#goal-conversions","content":"Goals let you define important actions registered in your application and track conversions when the conditions for the action are fulfilled. Import​ import { GoalConversions } from '@piwikpro/react-piwik-pro'  Methods​ trackGoal(goalId: number | string, conversionValue: number, dimensions?: Object) - Tracks manual goal conversion. "},{"title":"Custom Dimensions​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#custom-dimensions","content":"Import​ import { CustomDimensions } from '@piwikpro/react-piwik-pro'  Methods​ setCustomDimensionValue(customDimensionId: string | number, customDimensionValue: string) - Sets a custom dimension value to be used later.deleteCustomDimension(customDimensionId: string) - Removes a custom dimension with the specified ID.getCustomDimensionValue(customDimensionId: string | number) - Returns the value of a custom dimension with the specified ID. "},{"title":"Data Layer​","type":1,"pageTitle":"Piwik PRO Library for React","url":"/docs/data-collection/web/frameworks/Piwik_PRO_Library_for_React#data-layer","content":"A data layer is a data structure on your site or app where you can store data and access it with tools like Tag Manager. You can include any data you want in your data layer. Import​ import { DataLayer } from '@piwikpro/react-piwik-pro';  Methods​ push(dataLayerObject: Object) - Adds an event to a data layer. "},{"title":"Columns","type":0,"sectionRef":"#","url":"/docs/analytics/columns","content":"","keywords":""},{"title":"Metrics​","type":1,"pageTitle":"Columns","url":"/docs/analytics/columns#metrics","content":"The table below lists core metrics that may be used in queries. Additional metrics may be created using dimension transformations. Metric Name\tColumn ID\tScope\tTypeEvents\tevents\tsession\tint Consent form impressions\tconsent_form_impressions\tevent\tint Consent form clicks\tconsent_form_clicks\tevent\tint First consents\tconsents_first\tevent\tint Changed consents\tconsents_changed\tevent\tint Full consents\tconsents_full\tevent\tint Any consents\tconsents_any\tevent\tint No consents\tconsents_none\tevent\tint No decisions\tconsents_no_decision\tevent\tint Analytics consents\tconsents_analytics\tevent\tint A/B testing personalization consents\tconsents_ab_testing_personalization\tevent\tint Conversion tracking consents\tconsents_conversion_tracking\tevent\tint Marketing automation consents\tconsents_marketing_automation\tevent\tint Remarketing consents\tconsents_remarketing\tevent\tint User feedback consents\tconsents_user_feedback\tevent\tint Custom consent 1\tconsents_custom_1\tevent\tint Page views\tpage_views\tsession\tint Unique page views\tunique_page_views\tsession\tint Entries\tentries\tsession\tint Exits\texits\tsession\tint Bounces\tbounces\tsession\tint Sessions\tsessions\tsession\tint Visitors\tvisitors\tsession\tint % of returning visitors\treturning_visitors_rate\tsession\tfloat Users\tusers\tsession\tint Visitor IPs\tvisitor_ips\tsession\tint Outlinks\toutlinks\tsession\tint Unique outlinks\tunique_outlinks\tsession\tint Downloads\tdownloads\tsession\tint Unique downloads\tunique_downloads\tsession\tint Searches\tsearches\tsession\tint Unique searches\tunique_searches\tsession\tint Custom events\tcustom_events\tsession\tint Unique custom events\tunique_custom_events\tsession\tint Content impressions\tcontent_impressions\tsession\tint Unique content impressions\tunique_content_impressions\tsession\tint Content interactions\tcontent_interactions\tsession\tint Unique content interactions\tunique_content_interactions\tsession\tint Ecommerce conversions\tecommerce_conversions\tsession\tint Total quantity\ttotal_quantity\tevent\tint Ecommerce abandoned carts\tecommerce_abandoned_carts\tsession\tint Unique purchases\tunique_purchases\tevent\tint Entry rate\tentry_rate\tsession\tfloat Exit rate\texit_rate\tsession\tfloat Exit rate events\texit_rate_events\tsession\tfloat Bounce rate\tbounce_rate\tsession\tfloat Bounce rate\tbounce_rate_events\tsession\tfloat Content interaction rate\tcontent_interaction_rate\tsession\tfloat Ecommerce conversion rate\tecommerce_conversion_rate\tsession\tfloat Events per session\tevents_per_session\tsession\tfloat Goal conversions\tgoal_conversions\tsession\tint Unique goal conversions\tunique_goal_conversions\tsession\tint Goal conversion rate\tgoal_conversion_rate\tsession\tfloat Base Metrics "},{"title":"Dimensions​","type":1,"pageTitle":"Columns","url":"/docs/analytics/columns#dimensions","content":"The table below lists core dimensions that may be used in queries. Note: &quot;Database type&quot; column presents the type of source column of the dimension (in case of enum - type of the ID, in case of dynamic dimensions - not applicable). Dimension Name\tColumn ID\tScope\tType\tDatabase Type\tNullable\tNotesVisitor ID\tvisitor_id\tsession\thex\tuint64\tFalse\tby default in Raw data API User ID\tuser_id\tsession\tstr\tstring\tFalse Cookie ID\tcookie_id\tsession\thex\tuint64\tFalse Returning visitor\tvisitor_returning\tsession\t[int, str]\tuint8\tFalse\tvisitor_returning.json &lt;/_static/json/enum/visitor_returning.json&gt; Session number\tvisitor_session_number\tsession\tint\tuint16\tFalse Days since last session\tvisitor_days_since_last_session\tsession\tint\tuint16\tTrue Days since first session\tvisitor_days_since_first_session\tsession\tint\tuint16\tTrue Days since order\tvisitor_days_since_order\tsession\tint\tuint16\tTrue Events in session\tsession_total_events\tsession\tint\tuint16\tFalse Session time\tsession_total_time\tsession\tint\tuint32\tFalse Page views in session\tsession_total_page_views\tsession\tint\tuint16\tFalse Outlinks in session\tsession_total_outlinks\tsession\tint\tuint16\tFalse Downloads in session\tsession_total_downloads\tsession\tint\tuint16\tFalse Site searches in session\tsession_total_site_searches\tsession\tint\tuint16\tFalse Custom events in session\tsession_total_custom_events\tsession\tint\tuint16\tFalse Content impressions in session\tsession_total_content_impressions\tsession\tint\tuint16\tFalse Content interactions in session\tsession_total_content_interactions\tsession\tint\tuint16\tFalse Goal conversions in session\tsession_total_goal_conversions\tsession\tint\tuint16\tFalse Ecommerce conversions in session\tsession_total_ecommerce_conversions\tsession\tint\tuint16\tFalse Abandoned carts in session\tsession_total_abandoned_carts\tsession\tint\tuint16\tFalse Unique page views in session\tsession_unique_page_views\tsession\tint\tuint16\tFalse Unique outlinks in session\tsession_unique_outlinks\tsession\tint\tuint16\tFalse Unique downloads in session\tsession_unique_downloads\tsession\tint\tuint16\tFalse Unique site searches in session\tsession_unique_searches\tsession\tint\tuint16\tFalse Unique custom events in session\tsession_unique_custom_events\tsession\tint\tuint16\tFalse Unique content impressions in session\tsession_unique_content_impressions\tsession\tint\tuint16\tFalse Unique content interactions in session\tsession_unique_content_interactions\tsession\tint\tuint16\tFalse Goals converted in session (uuid)\tsession_goal_uuids\tsession\tarray(uuid)\tarray of string(16)\tFalse Shopping stage\tsession_ecommerce_status\tsession\t[int, str]\tuint8\tFalse\tsession_ecommerce_status.json &lt;/_static/json/enum/session_ecommerce_status.json&gt; Source\tsource\tsession\tstr_nocase\tstring\tFalse Medium\tmedium\tsession\tstr_nocase\tstring\tFalse Source/Medium\tsource_medium\tsession\tstr_nocase\tstring\tFalse Keyword\tkeyword\tsession\tstr\tstring\tFalse Channel\treferrer_type\tsession\t[int, str]\tuint8\tFalse\treferrer_type.json &lt;/_static/json/enum/referrer_type.json&gt; Referrer URL\treferrer_url\tsession\tstr\tstring\tFalse Campaign name\tcampaign_name\tsession\tstr\tstring\tFalse Campaign ID\tcampaign_id\tsession\tstr\tstring\tFalse Campaign content\tcampaign_content\tsession\tstr\tstring\tFalse Google Click ID\tcampaign_gclid\tsession\tstr\tstring\tTrue Operating system\toperating_system\tsession\t[str, str]\tstring(3)\tTrue\toperating_system.json &lt;/_static/json/enum/operating_system.json&gt; Operating system version\toperating_system_version\tsession\tstr\tstring\tFalse Browser engine\tbrowser_engine\tsession\tstr\tstring\tFalse Browser name\tbrowser_name\tsession\t[str, str]\tstring(2)\tTrue\tbrowser_name.json &lt;/_static/json/enum/browser_name.json&gt; Browser version\tbrowser_version\tsession\tstr\tstring\tFalse Browser language\tbrowser_language_iso639\tsession\t[str, str]\tstring(2)\tTrue\tbrowser_language_iso639.json &lt;/_static/json/enum/browser_language_iso639.json&gt; Browser fingerprint\tbrowser_fingerprint\tsession\tint\tuint64\tFalse\tnot available in Queries API Device type\tdevice_type\tsession\t[int, str]\tuint8\tTrue\tdevice_type.json &lt;/_static/json/enum/device_type.json&gt; Device brand\tdevice_brand\tsession\t[str, str]\tstring(2)\tTrue\tdevice_brand.json &lt;/_static/json/enum/device_brand.json&gt; Device model\tdevice_model\tsession\tstr\tstring\tFalse Resolution\tresolution\tsession\tstr\tstring\tTrue Resolution width\tresolution_width\tsession\tint\tuint16\tTrue Resolution height\tresolution_height\tsession\tint\tuint16\tTrue PDF plugin\tplugin_pdf\tsession\tint(0,1)\tuint8\tFalse Flash plugin\tplugin_flash\tsession\tint(0,1)\tuint8\tFalse Java plugin\tplugin_java\tsession\tint(0,1)\tuint8\tFalse Director plugin\tplugin_director\tsession\tint(0,1)\tuint8\tFalse QuickTime plugin\tplugin_quicktime\tsession\tint(0,1)\tuint8\tFalse RealPlayer plugin\tplugin_realplayer\tsession\tint(0,1)\tuint8\tFalse Windows Media Player plugin\tplugin_windowsmedia\tsession\tint(0,1)\tuint8\tFalse Gears plugin\tplugin_gears\tsession\tint(0,1)\tuint8\tFalse Silverlight plugin\tplugin_silverlight\tsession\tint(0,1)\tuint8\tFalse Cookie support\tplugin_cookie\tsession\tint(0,1)\tuint8\tFalse Continent\tlocation_continent_iso_code\tsession\t[str, str]\tstring(2)\tTrue\tlocation_continent_iso_code.json &lt;/_static/json/enum/location_continent_iso_code.json&gt; Country\tlocation_country_name\tsession\t[str, str]\tstring\tTrue\tISO 3166-2 codes (e.g. &quot;PL&quot;) Subdivision\tlocation_subdivision_1_name\tsession\t[str, str]\tstring\tTrue\tISO 3166-2 codes (e.g. &quot;PL-DS&quot;) Subdivision 2\tlocation_subdivision_2_name\tsession\t[str, str]\tstring\tTrue\tISO 3166-2 codes (e.g. &quot;ES-M&quot;) City\tlocation_city_name\tsession\t[int, str]\tstring\tTrue\tunique identifiers as specified by GeoNames Designated market area\tlocation_metro_code\tsession\t[str, str]\tstring(3)\tTrue\tDeprecated. Available only in old reports. Latitude\tlocation_latitude\tsession\tfloat\tfloat64\tTrue Longitude\tlocation_longitude\tsession\tfloat\tfloat64\tTrue Provider\tlocation_provider\tsession\tstr\tstring\tFalse Organization\tlocation_organization\tsession\tstr\tstring\tFalse Session exit URL\tsession_exit_url\tsession\tstr\tstring\tFalse Session exit title\tsession_exit_title\tsession\tstr\tstring\tFalse Session entry URL\tsession_entry_url\tsession\tstr\tstring\tFalse Session entry title\tsession_entry_title\tsession\tstr\tstring\tFalse Session second URL\tsession_second_url\tsession\tstr\tstring\tFalse Session second title\tsession_second_title\tsession\tstr\tstring\tFalse Session bounce\tis_bounce\tsession\tint(0,1)\tuint8\tFalse Event ID\tevent_id\tevent\tint\tuint64\tFalse\tby default in Raw data API Session ID\tsession_id\tsession\tint\tuint64\tFalse\tby default in Raw data API Exit view\tis_exit\tevent\tint(0,1)\tuint8\tFalse\tnot available in Queries API Entry view\tis_entry\tevent\tint(0,1)\tuint8\tFalse\tnot available in Queries API Event type\tevent_type\tevent\t[int, str]\tuint8\tFalse\tevent_type.json &lt;/_static/json/enum/event_type.json&gt; Page URL\tevent_url\tevent\tstr\tstring\tFalse Page title\tevent_title\tevent\tstr\tstring\tFalse Outlink URL\toutlink_url\tevent\tstr\tstring\tFalse Download URL\tdownload_url\tevent\tstr\tstring\tFalse Search keyword\tsearch_keyword\tevent\tstr\tstring\tFalse Search category\tsearch_category\tevent\tstr\tstring\tFalse Search results count\tsearch_results_count\tevent\tint\tuint16\tTrue Custom event category\tcustom_event_category\tevent\tstr\tstring\tFalse Custom event action\tcustom_event_action\tevent\tstr\tstring\tFalse Custom event name\tcustom_event_name\tevent\tstr\tstring\tFalse Custom event value\tcustom_event_value\tevent\tfloat\tfloat64\tTrue Content name\tcontent_name\tevent\tstr\tstring\tFalse Content piece\tcontent_piece\tevent\tstr\tstring\tFalse Content target\tcontent_target\tevent\tstr\tstring\tFalse Previous page view URL\tprevious_event_url\tevent\tstr\tstring\tFalse Previous page view title\tprevious_event_title\tevent\tstr\tstring\tFalse Next page view URL\tnext_event_url\tevent\tstr\tstring\tFalse Next page view title\tnext_event_title\tevent\tstr\tstring\tFalse Event index\tevent_index\tevent\tint\tuint16\tFalse\tnot available in Queries API Page view index\tpage_view_index\tevent\tint\tuint16\tTrue\tnot available in Queries API Time on page\ttime_on_page\tevent\tint\tuint32\tTrue Page generation time\tpage_generation_time\tevent\tfloat\tfloat64\tTrue Goal name\tgoal_id\tevent\t[int, str]\tint32\tTrue\tremoved, to identify Goals, use goal_uuid Goal name (uuid)\tgoal_uuid\tevent\t[str, str]\tstring(16)\tTrue\tgoal UUID from Analytics Goal revenue\tgoal_revenue\tevent\tfloat\tfloat64\tTrue Lost revenue\tlost_revenue\tevent\tfloat\tfloat64\tTrue Order ID\torder_id\tevent\tstr\tstring\tFalse Unique item count\titem_count\tevent\tint\tuint16\tTrue Revenue\trevenue\tevent\tfloat\tfloat64\tTrue Revenue (Subtotal)\trevenue_subtotal\tevent\tfloat\tfloat64\tTrue Revenue (Tax)\trevenue_tax\tevent\tfloat\tfloat64\tTrue Revenue (Shipping)\trevenue_shipping\tevent\tfloat\tfloat64\tTrue Revenue (Discount)\trevenue_discount\tevent\tfloat\tfloat64\tTrue Time until DOM is ready\ttiming_dom_interactive\tevent\tint\tuint32\tTrue Time to interact\ttiming_event_end\tevent\tint\tuint32\tTrue Consent form view source\tconsent_source\tevent\t[int, str]\tuint8\tTrue\tconsent_source.json &lt;/_static/json/enum/consent_source.json&gt; Consent form interaction type\tconsent_form_button\tevent\t[int, str]\tuint8\tTrue\tconsent_form_button.json &lt;/_static/json/enum/consent_form_button.json&gt; Consent scope\tconsent_scope\tevent\t[int, str]\tuint8\tTrue\tconsent_scope.json &lt;/_static/json/enum/consent_scope.json&gt; Consent action\tconsent_action\tevent\t[int, str]\tuint8\tTrue\tconsent_action.json &lt;/_static/json/enum/consent_action.json&gt; Analytics consent\tconsent_type_analytics\tevent\tint(0,1)\tuint8\tTrue AB testing personalization consent\tconsent_type_ab_testing_personalization\tevent\tint(0,1)\tuint8\tTrue Conversion tracking consent\tconsent_type_conversion_tracking\tevent\tint(0,1)\tuint8\tTrue Marketing automation consent\tconsent_type_marketing_automation\tevent\tint(0,1)\tuint8\tTrue Remarketing consent\tconsent_type_remarketing\tevent\tint(0,1)\tuint8\tTrue User feedback consent\tconsent_type_user_feedback\tevent\tint(0,1)\tuint8\tTrue Custom consent 1\tconsent_type_custom_1\tevent\tint(0,1)\tuint8\tTrue Event custom dimension 1\tevent_custom_dimension_1\tevent\tstr\tstring\tFalse Event custom dimension 2\tevent_custom_dimension_2\tevent\tstr\tstring\tFalse Event custom dimension 3\tevent_custom_dimension_3\tevent\tstr\tstring\tFalse Event custom dimension 4\tevent_custom_dimension_4\tevent\tstr\tstring\tFalse Event custom dimension 5\tevent_custom_dimension_5\tevent\tstr\tstring\tFalse Event custom variable key 1\tevent_custom_variable_key_1\tevent\tstr\tstring\tFalse Event custom variable value 1\tevent_custom_variable_value_1\tevent\tstr\tstring\tFalse Event custom variable key 2\tevent_custom_variable_key_2\tevent\tstr\tstring\tFalse Event custom variable value 2\tevent_custom_variable_value_2\tevent\tstr\tstring\tFalse Event custom variable key 3\tevent_custom_variable_key_3\tevent\tstr\tstring\tFalse Event custom variable value 3\tevent_custom_variable_value_3\tevent\tstr\tstring\tFalse Event custom variable key 4\tevent_custom_variable_key_4\tevent\tstr\tstring\tFalse Event custom variable value 4\tevent_custom_variable_value_4\tevent\tstr\tstring\tFalse Event custom variable key 5\tevent_custom_variable_key_5\tevent\tstr\tstring\tFalse Event custom variable value 5\tevent_custom_variable_value_5\tevent\tstr\tstring\tFalse Session custom dimension 1\tsession_custom_dimension_1\tsession\tstr\tstring\tFalse Session custom dimension 2\tsession_custom_dimension_2\tsession\tstr\tstring\tFalse Session custom dimension 3\tsession_custom_dimension_3\tsession\tstr\tstring\tFalse Session custom dimension 4\tsession_custom_dimension_4\tsession\tstr\tstring\tFalse Session custom dimension 5\tsession_custom_dimension_5\tsession\tstr\tstring\tFalse Session custom variable key 1\tsession_custom_variable_key_1\tsession\tstr\tstring\tFalse Session custom variable value 1\tsession_custom_variable_value_1\tsession\tstr\tstring\tFalse Session custom variable key 2\tsession_custom_variable_key_2\tsession\tstr\tstring\tFalse Session custom variable value 2\tsession_custom_variable_value_2\tsession\tstr\tstring\tFalse Session custom variable key 3\tsession_custom_variable_key_3\tsession\tstr\tstring\tFalse Session custom variable value 3\tsession_custom_variable_value_3\tsession\tstr\tstring\tFalse Session custom variable key 4\tsession_custom_variable_key_4\tsession\tstr\tstring\tFalse Session custom variable value 4\tsession_custom_variable_value_4\tsession\tstr\tstring\tFalse Session custom variable key 5\tsession_custom_variable_key_5\tsession\tstr\tstring\tFalse Session custom variable value 5\tsession_custom_variable_value_5\tsession\tstr\tstring\tFalse Timestamp\ttimestamp\tsession\tdate\tnot applicable\tFalse\tby default in Raw data API Local hour\tlocal_hour\tsession\tint\tnot applicable\tFalse Time of redirections\tredirections_time\tevent\tint\tnot applicable\tTrue Domain Lookup Time\tdomain_lookup_time\tevent\tint\tnot applicable\tTrue Server Connection Time\tserver_connection_time\tevent\tint\tnot applicable\tTrue Server Response Time\tserver_response_time\tevent\tint\tnot applicable\tTrue Page Rendering Time\tpage_rendering_time\tevent\tint\tnot applicable\tTrue IPv4 address\tipv4_address\tsession\tipv4\tnot applicable\tTrue IPv6 address\tipv6_address\tsession\tipv6\tnot applicable\tTrue Website Name\twebsite_name\tsession\t[str, str]\tnot applicable\tFalse\twebsite UUID Base Dimensions Note Please note that the number of available custom slots (dimensions, variables) depends on your organisation's configuration. "},{"title":"Transformations​","type":1,"pageTitle":"Columns","url":"/docs/analytics/columns#transformations","content":"The tables below list all transformations that may be used to transform dimensions to metrics or different dimensions. Transformation Name\tTransformation ID\tSource Types\tResult TypeUnique Count\tunique_count\tint, str\tint Min\tmin\tfloat, int\t(as source) Max\tmax\tfloat, int\t(as source) Average\taverage\tfloat, int\tfloat Median\tmedian\tfloat, int\t(as source) Sum\tsum\tfloat, int\t(as source) Dimension To Metric Transformations Transformation Name\tTransformation ID\tSource Types\tResult TypeDate To Day\tto_date\tdate, datetime\tdate Date To Start Of Hour\tto_start_of_hour\tdatetime\tdatetime Date To Start Of Week\tto_start_of_week\tdate, datetime\tdate Date To Start Of Month\tto_start_of_month\tdate, datetime\tdate Date To Start Of Quarter\tto_start_of_quarter\tdate, datetime\tdate Date To Start Of Year\tto_start_of_year\tdate, datetime\tdate Date To Hour Of Day\tto_hour_of_day\tdatetime\tint Date To Day Of Week\tto_day_of_week\tdate, datetime\tint Date To Month Number\tto_month_number\tdate, datetime\tint Lowercase\tlower\tstr\tstr URL To Path\tto_path\tstr\tstr URL To Domain\tto_domain\tstr\tstr URL Strip Query String\tstrip_qs\tstr\tstr Dimension To Dimension Transformations "},{"title":"Piwik PRO SDK for React Native","type":0,"sectionRef":"#","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#installation","content":"npm install @piwikpro/react-native-piwik-pro-sdk  "},{"title":"Configuration​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#configuration","content":"In order to set up the Piwik PRO tracker you have to call init method passing a server address and website ID (you can find it in Administration -&gt; Sites &amp; apps): import PiwikProSdk from &quot;@piwikpro/react-native-piwik-pro-sdk&quot;; // ... await PiwikProSdk.init('https://your.piwik.pro.server.com', '01234567-89ab-cdef-0123-456789abcdef')  Parameters: serverAddress: string (required) – URL of your Piwik PRO server.websiteId: string (required) – ID of your website or application. Note: Each tracking method is implemented as a Promise which will be rejected if the PiwikProSdk has not been initialized. "},{"title":"Using Piwik PRO SDK​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#using-piwik-pro-sdk","content":""},{"title":"Data anonymization​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#data-anonymization","content":"Anonymization is the feature that allows tracking a user’s activity for aggregated data analysis even if the user doesn’t consent to track the data. If a user does not agree to be tracked, he will not be identified as the same person across multiple sessions. Personal data will not be tracked during the session (i.e. user ID, device ID). If the anonymization is enabled, a new visitor ID will be created each time the application starts. Anonymization is enabled by default. You can turn the anonymization on and off using the setAnonymizationState method: await PiwikProSdk.setAnonymizationState(false);  Parameters: anonymizationState: boolean (required) – new anonymization state. You can also check the anonymization status using the isAnonymizationOn method: const anonymizationState = await PiwikProSdk.isAnonymizationOn();  Returns: anonymizationState: boolean – current anonymization state. "},{"title":"Tracking screen views​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-screen-views","content":"Requires Analytics During a valid tracking session, you can track screen views which represent the content the user is viewing in the application. To track a screen you only need to provide the screen path. This path is internally translated by the SDK to an HTTP URL as the Piwik PRO server uses URLs for tracking views. Additionally, Piwik PRO SDK uses prefixes which are inserted in a generated URL for various types of action(s). For tracking screen views it will use a prefix 'screen' by default, however, automatic prefixing can be disabled with the setPrefixing(false) option. const options = { title: 'actionTitle', customDimensions: { 1: 'some custom dimension value' }, }; await PiwikProSdk.trackScreen(`your_screen_path`, options);  Parameters: path: string (required) – screen path (it will be mapped to the URL path).options – screen tracking options, object containing four properties (all of them are optional): title: string – the title of the action being tracked (it will be omitted in iOS application).customDimensions – the object specifying custom dimensions.screenCustomVariables – the object specifying screen custom variables.visitCustomVariables – the object specifying visit custom variables. "},{"title":"Tracking custom events​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-custom-events","content":"Requires Analytics To collect data about the user’s interaction with the interactive components of the application, like a button presses or the use of a particular item in the game – use event method. const options = { name: 'customEvent', path: 'some/path', value: 1.5, customDimensions: { 1: 'some custom dimension value' }, } await PiwikProSdk.trackCustomEvent(`custom_event`, 'custom_event_action', options);  Parameters: category: string (required) – event category. You may define event categories based on the class of user actions (e.g. clicks, gestures, voice commands), or you may define them based on the features available in your application (e.g. play, pause, fast forward, etc.).action: string (required) – specific event action within the category specified. In the example, we are effectively saying that the category of the event is user clicks, and the action is a button click.options – custom event options, object containing five properties (all of them are optional): name: string – label associated with the event. For example, if you have multiple button controls on a screen, you may use the label to specify the specific view control identifier that was clicked.value: number – float, numerical value associated with the event. For example, if you were tracking 'Buy' button clicks, you may log the number of items being purchased or their total cost.path: string – the path under which this event occurred (it will be omitted in iOS application).customDimensions – the object specifying custom dimensions.visitCustomVariables – the object specifying visit custom variables. For more resources, please visit documentation. "},{"title":"Tracking exceptions​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-exceptions","content":"Requires Analytics Caught exceptions are errors in your app for which you’ve defined an exception handling code, such as the occasional timeout of a network connection during a request for data. Exceptions are tracked on the server in a similar way as screen views, however, action internally generated for exceptions always uses the 'fatal' or 'caught' prefix, and additionally the 'exception' prefix if isPrefixingOn() option is enabled (true). Measure a caught exception by setting the exception field values on the tracker and sending the hit, as with this example: const options = { visitCustomVariables: { 4: { name: 'food', value: 'pizza' } }, customDimensions: { 1: 'some custom dimension value' }, }; await PiwikProSdk.trackException('exception', false, options);  Parameters: description: string (required) – the exception message.isFatal: boolean (required) – true if an exception is fatal. Determines whether the exception prefix will be 'fatal' or 'caught'.options – exception tracking options, object containing two properties (all of them are optional): customDimensions – the object specifying custom dimensions.visitCustomVariables – the object specifying visit custom variables. "},{"title":"Tracking social interactions​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-social-interactions","content":"Requires Analytics Social interactions such as likes, shares and comments in various social networks can be tracked as below. This, again, is tracked in a similar way as with screen views but the 'social' prefix is used when the default isPrefixing() option is enabled. const options = { visitCustomVariables: { 4: { name: 'food', value: 'pizza' } }, target: 'Photo', }; await PiwikProSdk.trackSocialInteraction(`Like`, 'Facebook', options);  Parameters: interaction: string (required) – the social interaction, e.g. 'Like'.network: string (required) – social network associated with interaction, e.g. 'Facebook'.options – social interaction tracking options, object containing three properties (all of them are optional): target: string – the target for which this interaction occurred, e.g. 'Photo'.customDimensions – the object specifying custom dimensions.visitCustomVariables – the object specifying visit custom variables. The generated URL corresponds to string, which includes the network, interaction and target parameters separated by slash. "},{"title":"Tracking downloads​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-downloads","content":"Requires Analytics You can track the downloads initiated by your application: const options = { visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackDownload(`http://your.server.com/bonusmap.zip`, options);  Parameters: url: string (required) – URL of the downloaded content.options – download tracking options, object containing two properties (all of them are optional): customDimensions – object specifying custom dimensions.visitCustomVariables – object specifying visit custom variables. All downloads can be viewed in the corresponding section in the analytics panel. Note: Generated URLs may differ between Android and iOS. "},{"title":"Tracking outlinks​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-outlinks","content":"Requires Analytics For tracking outlinks to external websites or other apps opened from your application use the trackOutlink method: const options = { visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackOutlink(`http://your.server.com/bonusmap.zip`, options);  Parameters: URL (required) – outlink target. HTTPS, HTTP and FTP are valid.options – outlinks tracking options, object containing two properties (all of them are optional): customDimensions – object specifying custom dimensions.visitCustomVariables – object specifying visit custom variables. "},{"title":"Tracking search operations​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-search-operations","content":"Requires Analytics Tracking search operations allow the measurement of popular keywords used for various search operations performed inside your application. It can be done via the trackSearch method: const options = { category: `Movies`, count: 3, visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackSearch('Space', options);  Parameters: keyword: string (required) – searched query that was used in the app.options – search tracking options, object containing four properties (all of them are optional): category: string – search category.count: number – we recommend setting the search count to the number of search results displayed on the results page. When keywords are tracked with a count of 0, they will appear in the 'No Result Search Keyword' report.customDimensions – object specifying custom dimensions.visitCustomVariables – object specifying visit custom variables. "},{"title":"Tracking content impressions and interactions​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-content-impressions-and-interactions","content":"Requires Analytics You can track an impression of an ad in your application as below. const options = { piece: 'banner', target: 'https://www.dn.se/', visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackImpression('Some content impression', options);  When the user interacts with the ad by tapping on it, you can also track it with a similar method: const options = { piece: 'banner', target: 'https://www.dn.se/', visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackInteraction('Some content interaction', options);  Parameters: contentName: string (required) – name of the content, e.g. 'Ad Foo Bar'.options – impression tracking options, object containing four properties (all of them are optional): piece: string – actual content. For instance, path to the image, video, audio or any text.target: string – the target of the content. For instance the URL of a landing page.customDimensions – object specifying custom dimensions.visitCustomVariables – object specifying visit custom variables. "},{"title":"Tracking goals​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-goals","content":"Requires Analytics Goal tracking is used to measure and improve your business objectives. To track goals, you first need to configure them on the server in your web panel. Goals such as, for example, subscribing to a newsletter can be tracked as below with the goal ID that you will see on the server after configuring the goal and optional revenue. The currency for the revenue can be set in the Piwik PRO Analytics settings. You can read more about goals here. const options = { revenue: 30, visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackGoal(1, options);  Parameters: goal: number (required) – tracking request will trigger a conversion for the goal of the website being tracked with this ID.options – goal tracking options, object containing three properties (all of them are optional): revenue: number – monetary value that was generated as revenue by this goal conversion.customDimensions – object specifying custom dimensions.visitCustomVariables – object specifying visit custom variables. "},{"title":"Tracking ecommerce transactions​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-ecommerce-transactions","content":"Requires Analytics Ecommerce transactions (in-app purchases) can be tracked to help you improve your business strategy. To track a transaction you must provide two required values – the transaction identifier and grandTotal. Optionally, you can also provide values for subTotal, tax, shippingCost, discount and list of purchased items as in the example below. const options: TrackEcommerceOptions = { discount: 0, shipping: 1000, subTotal: 33110, tax: 9890, items: [ { sku: '0123456789012', category: &quot;Men's T-shirts&quot;, name: 'Polo T-shirt', price: 3000, quantity: 2, }, ], visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackEcommerce('order_1', 124144, options);  Parameters: orderId: string (required) – unique string identifying the order.grandTotal: number (required) – total amount of the order, in cents.options – goal tracking options, object containing five properties (all of them are optional): subTotal: number – subtotal (net price) for the order, in cents.tax: number – tax for the order, in cents.shipping: number – shipping for the order, in cents.discount: number – discount for the order, in cents.items – items included in the order, array of objects containing five required properties: sku: string – identifier of the item.name: string – name of the item.category: string – category of the item.price: string – price of the single item, in cents.quantity: string – quantity of the item. customDimensions – object specifying custom dimensions.visitCustomVariables – object specifying visit custom variables. "},{"title":"Tracking campaigns​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-campaigns","content":"Requires Analytics Tracking campaigns URLs configured with the online Campaign URL Builder tool allow you to measure how different campaigns (for example with Facebook ads or direct emails) bring traffic to your application: const options = { visitCustomVariables: 4: { name: 'food', value: 'pizza' }, customDimensions: { 1: 'beta', 2: 'gamma', }, }; await PiwikProSdk.trackCampaign('http://example.org/offer.html?pk_campaign=Email-SummerDeals&amp;pk_keyword=LearnMore', options);  Parameters: url: string (required) – the campaign URL. HTTPS, HTTP and FTP are valid, however, the URL must contain campaign name and keyword parameters.options – campaign tracking options, object containing two properties (all of them are optional): customDimensions – object specifying custom dimensions.visitCustomVariables – object specifying visit custom variables. Note: On iOS the campaign information will be sent to the server together with the next analytics event. "},{"title":"Tracking custom variables​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-custom-variables","content":"The feature will soon be disabled. We recommend using custom dimensions instead. Requires Analytics A custom variable is a custom name-value pair that you can assign to your users or screen views, and then visualize the reports of how many visits, conversions, etc. occurred for each custom variable. A custom variable is defined by a name – for example, 'User status' – and a value – for example, 'LoggedIn' or 'Anonymous'. It is required for names and values to be encoded in UTF-8. Each custom variable has a scope. There are two types of custom variables scope – visit scope and screen scope. The visit scope can be used for any tracking action, and the screen scope can only be applied to tracking screen views. To set the custom variable of the screen scope, use the screenCustomVariables object, for the visit scope – visitCustomVariables in the screen tracking method options: const options = { screenCustomVariables: { 4: { name: 'food', value: 'pizza' } }, visitCustomVariables: { 5: { name: 'drink', value: 'water' } }, }; await PiwikProSdk.trackScreen(`your_screen_path`, options);  Please note that for the Default custom variables option, use the custom variables of the visit scope with indexes 1-3. Custom variables of each scope is the object with the following format: const customVariables = { 4: { name: 'food', value: 'pizza' }, 5: { name: 'drink', value: 'water' }, }  where: index: number, the key (required) – a given custom variable name must always be stored in the same 'index' per session. For example, if you choose to store the variable with name 'Gender' in index 1 and you record another custom variable in index 1, then the 'Gender' variable will be deleted and replaced with a new custom variable stored in index 1.name: string (required) – the name of a specific custom variable such as 'User type' (Limited to 200 characters).value: string (required) – the value of a specific custom variable such as 'Customer' (Limited to 200 characters). "},{"title":"Tracking custom dimensions​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-custom-dimensions","content":"Requires Analytics To track a custom key-value pair assigned to your users or screen views, use custom dimensions. Note that the custom value data is not sent by itself, but only with other tracking actions such as screen views, events or other tracking actions (see the documentation of other tracking methods), for example: const customDimensions = { 1: 'dashboard', 2: 'menu', } await PiwikProSdk.trackScreen(`your_screen_path`, { customDimensions });  1 and 2 are dimension IDs. dashboard, menu are the dimension values for the tracked screen view event. "},{"title":"Tracking user profile attributes​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#tracking-user-profile-attributes","content":"Requires Audience Manager The Audience Manager stores visitors’ profiles which have data from a variety of sources. One of them can be a mobile application. It is possible to enrich the profiles with more attributes by passing any key-value pair e.g. gender: male, favourite food: Italian, etc. It is recommended to set additional user identifiers such as email or user ID which will allow the enrichment of existing profiles or merging of profiles rather than creating a new profile. For example, if the user visited the website, performed some actions, filled in a form with his email (his data was tracked and profile created in Audience Manager) and afterwards started using a mobile application, the existing profile will be enriched only if the email was set. Otherwise, a new profile will be created. For sending profile attributes use trackProfileAttributes method: const profileAttributes: TrackProfileAttributes = [ { name: 'food', value: 'pizza' }, { name: 'drink', value: 'water' }, ]; // Profile attributes can be also a single object: // const profileAttributes: TrackProfileAttributes = { name: 'food', value: 'pizza' }; await PiwikProSdk.trackProfileAttributes(profileAttributes);  Parameters: profileAttributes – an object or an array of objects with two required properties: name: string (required) – profile attribute name.value: string (required) – the profile attribute value. Aside from attributes, each event also sends parameters which are retrieved from the tracker instance: WEBSITE_ID – always sent.USER_ID – if set. Read more about the User ID.EMAIL – if set. Read more about the email.VISITOR_ID – always sent, ID of the mobile application user, generated by the SDK.DEVICE_ID – Advertising ID that, by default, is fetched automatically when the tracker instance is created (only on Android). Profile attributes for the user that are tracked will be shown on the Audience Manager -&gt; Profile Browser tab. "},{"title":"Reading user profile attributes​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#reading-user-profile-attributes","content":"Requires Audience Manager It is possible to read the attributes of a given profile, however, with some limitations. Due to security reasons (to avoid personal data leakage), it is possible to read only attributes that were enabled for API access (whitelisted) in the Attributes section in the Audience Manager. You can get user profile attributes in the following manner: const attributes = await PiwikProSdk.getProfileAttributes(); console.log(attributes); // {&quot;device_type&quot;: &quot;desktop&quot;, ...}  Returns: attributes: object – dictionary of key-value pairs, where each pair represents the attribute name (key) and value. In case of error (for example when user profile does not yet exist), returns error message. "},{"title":"Checking audience membership​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#checking-audience-membership","content":"Requires Audience Manager Audiences are allowed to check whether or not the user belongs to a specific group of users defined in the data manger panel based on analytics data and audience manager profile attributes. You can check if the user belongs to a given audience, for example, to show a special offer. To check it, use the checkAudienceMembership method: const audienceId = 'a83d4aac-faa6-4746-96eb-5ac110083f8e'; const isMember = await PiwikProSdk.checkAudienceMembership(audienceId); console.log(isMember); // true  Parameters: audienceId: string (required) – ID of the audience (Audience Manager -&gt; Audiences). Returns: isMember: boolean – value indicating whether user belongs to the audience with given ID or error message if an error occurred. "},{"title":"Advanced usage​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#advanced-usage","content":""},{"title":"User ID​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#user-id","content":"The user ID is an additional, optional non-empty unique string identifying the user (not set by default). It can be, for example, a unique username or user’s email address. If the provided user ID is sent to the analytics part together with the visitor ID, it allows the association of events from various platforms (for example iOS and Android) to the same user provided that the same user ID is used on all platforms. More about user ID. In order to set user ID use the setUserId method: await PiwikProSdk.setUserId(&quot;John Doe&quot;);  Parameters: userId: string (required) – any non-empty unique string identifying the user. Passing null will delete the current user ID. You can obtain current user ID value with getUserId: const currentUserId = await PiwikProSdk.getUserId();  Returns: userId: string – current user ID. "},{"title":"User email address​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#user-email-address","content":"Used only by Audience Manager The user email address is an optional parameter for user identification. Similar to user ID, it allows the association of events from various sources to the same user. To set user email use the setUserEmail method: await PiwikProSdk.setUserEmail('john@doe.com');  Parameters: email: string (required) – non-empty string representing email address. Setting up an email helps the Audience Manager to enrich existing profiles or merge profiles which come from other sources (if they also have an email). Check Tracking user profile attributes for more information. You can obtain current user email value with getUserEmail: const currentUserEmail = await PiwikProSdk.getUserEmail();  Returns: email: string – current user email. "},{"title":"Visitor ID​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#visitor-id","content":"To track user sessions on different sources, the visitor ID parameter is used. Visitor ID is randomly generated when the tracker instance is created, and stored between application launches. It is also possible to reset the visitor ID manually: await PiwikProSdk.setVisitorId(&quot;0123456789abcdef&quot;);  Parameters: visitorId: string (required) – unique visitor ID, must be 16 characters hexadecimal string. Every unique visitor must be assigned a different ID and this ID must not change after it is assigned. We recommend using user ID instead of visitor ID. You can check current visitor ID value with getVisitorId: const currentVisitorId = await PiwikProSdk.getVisitorId();  Returns: visitorId: string – current visitor ID. "},{"title":"Sessions​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#sessions","content":"A session represents a set of user’s interactions with your app. By default, Analytics is closing the session after 30 minutes of inactivity, counting from the last recorded event in session and when the user will open up the app again the new session is started. You can configure the tracker to automatically close the session when users have placed your app in the background for a period of time. That period is defined by the setSessionTimeout: await PiwikProSdk.setSessionTimeout(1800);  Parameters: sessionTimeout: number (required) – session timeout time in seconds. Default: 1800 seconds (30 minutes). You can obtain current sessionTimeout value with getSessionTimeout: const currentSessionTimeout = await PiwikProSdk.getSessionTimeout(); console.log(currentSessionTimeout); // 1800  Returns: sessionTimeout: number – current session timeout value in seconds. You can manually start a new session when sending a hit to Piwik by using the startNewSession method. await PiwikProSdk.startNewSession();  "},{"title":"Dispatching​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#dispatching","content":"Tracked events are stored temporarily on the queue and dispatched in batches every 30 seconds (default setting). This behavior can be changed in the following way: const dispatchInterval = 25; // 25 seconds await PiwikProSdk.setDispatchInterval(dispatchInterval);  Parameters: dispatchInterval: number (required) – new dispatch interval (in seconds). If dispatchValue is equal to 0 then events will be dispatched immediately. When its value is negative then events will not be dispatched automatically. This gives you full control over dispatch process using manual dispatch: await PiwikProSdk.dispatch();  You can obtain current dispatchInterval value with getDispatchInterval: const currentDispatchInterval = await PiwikProSdk.getDispatchInterval();  Returns: dispatchInterval: number – current dispatch interval (in seconds) or negative number if automatic dispatch has been disabled. "},{"title":"Default custom variables​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#default-custom-variables","content":"SDK can automatically add information about the platform version, OS version and app version in custom variables with indexes 1-3. By default, this option is turned on. This can be changed via the setIncludeDefaultCustomVars method: await PiwikProSdk.setIncludeDefaultCustomVariables(true);  Parameters: includeDefaultCustomVariables: boolean (required) – flag that determines whether default custom variables should be added to each tracking event. The status of the option can be checked with getIncludeDefaultCustomVariables: const includeDefaultCustomVariables = await PiwikProSdk.getIncludeDefaultCustomVariables();  Returns: includeDefaultCustomVariables: boolean – flag that determines whether default custom variables should be added to each tracking event. "},{"title":"Opt out​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#opt-out","content":"You can set an app-level opt-out flag that will disable Piwik PRO tracking across the entire app. Note that this flag must be set each time the app starts up and by default is set to false. To enable the app-level opt-out, use: await PiwikProSdk.setOptOut(true);  Parameters: optOut: boolean (required) – flag that determines whether opt-out is enabled. You can obtain current optOut value with getOptOut: const currentOptOutState = await PiwikProSdk.getOptOut(); console.log(currentOptOutState); // false  Returns: optOut: boolean – current opt-out state. "},{"title":"Dry run​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#dry-run","content":"The SDK provides a dryRun flag that, when set, prevents any data from being sent to Piwik. The dryRun flag should be set whenever you are testing or debugging an implementation and do not want test data to appear in your Piwik reports. To set the dryRun flag, use: await PiwikProSdk.setDryRun(true);  Parameters: dryRun: boolean (required) – flag that determines whether dry run is enabled. You can obtain current dryRun value with getDryRun: const currentDryRunState = await PiwikProSdk.getDryRun();  Returns: dryRun: boolean – current dry run state. "},{"title":"Prefixing​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#prefixing","content":"In case of tracking events like screen view, exception or social interaction event path in the tracker will contain corresponding prefix. You can disable prefixing with: await PiwikProSdk.setPrefixing(false);  Parameters: prefixingEnabled: boolean (required) – flag that determines whether prefixing is enabled You can also check the prefixing status using the isPrefixingOn method: const currentPrefixingState = await PiwikProSdk.isPrefixingOn(); console.log(currentPrefixingState); // false  Returns: prefixingEnabled: boolean – current prefixing state. "},{"title":"License​","type":1,"pageTitle":"Piwik PRO SDK for React Native","url":"/docs/data-collection/mobile/Piwik_PRO_SDK_for_React_Native#license","content":"MIT "},{"title":"api","type":0,"sectionRef":"#","url":"/docs/data-collection/web/javascript_tracking_client/api","content":"","keywords":""},{"title":"Command queue​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#command-queue","content":"Code snippet with tracking code sets up globally accessible command queue _paq. Users can issue commands by pushing them onto the command queue with _paq.push function. This is the recommended method of calling tracking functions. _paq.push(command) Issues a command, e.g. track page view, custom event, site search etc. param Array\\&lt;string&gt; command Array containing a tracking function'sname followed by its arguments. The number of arguments and their meaning are determined by the tracking function. Example of usage (tracking a custom event by pushing a command to the command queue): _paq.push([&quot;trackEvent&quot;, &quot;video&quot;, &quot;video-paused&quot;, &quot;intro.mp4&quot;, 15.2]);  Commands pushed onto the command queue will be executed once the JavaScript Tracking Client loads. After that, _paq.push becomes synchronous, meaning each command is executed at the moment of push. "},{"title":"JavaScript Tracking Client object​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#javascript-tracking-client-object","content":"JavaScript Tracking Client object offers an alternative method of calling tracking functions. While it's more difficult to access than thecommand queue&lt;jtc-api-command-queue&gt;, it allows to read the return value of a tracking function and makes multi-tracker setups possible. JavaScript Tracking Client object can be accessed usingPiwik.getTracker&lt;jtc-api-Piwik.getTracker&gt; orPiwik.getAsyncTracker&lt;jtc-api-Piwik.getAsyncTracker&gt; function. Piwik.getTracker(trackerUrl, siteId) Getter for JavaScript Tracking Client object. param string trackerUrl Required URL for JavaScript Tracking Client param string siteId Required Site ID that will be linked to tracked data. returns JavaScript Tracking Client instance rtype object Example of usage (accessing JavaScript Tracking Client object and tracking a custom event): var jstc = Piwik.getTracker(&quot;https://example.com/&quot;, &quot;45e07cbf-c8b3-42f3-a6d6-a5a176f623ef&quot;); jstc.trackEvent(&quot;video&quot;, &quot;video-paused&quot;, &quot;intro.mp4&quot;, 15.2);  To access internal JavaScript Tracking Client object used for asynchronous tracking you must use the Piwik.getAsyncTracker. Piwik.getAsyncTracker(trackerUrl, siteId) Getter for JavaScript Tracking Client instance. param string trackerUrl Required URL for JavaScript Tracking Client param string siteId Required Site ID that will be linked to tracked data. returns JavaScript Tracking Client instance rtype object Example of usage (accessing JavaScript Tracking Client object and tracking a custom event): var jstc = Piwik.getAsyncTracker(&quot;https://example.com/&quot;, &quot;45e07cbf-c8b3-42f3-a6d6-a5a176f623ef&quot;); jstc.trackEvent(&quot;video&quot;, &quot;video-paused&quot;, &quot;intro.mp4&quot;, 15.2); JavaScript Tracking Client object is also accessible through thiskeyword in a special command pushed to command queue, where the first element of the command array is a custom function. : _paq.push([function () { // *this* is a JavaScript Tracking Client object this.addEcommerceItem(&quot;01725334&quot;, &quot;USB-C chord&quot;) console.log(this.getEcommerceItems()); }]); Warning JavaScript Tracking Client object can't be accessed before JavaScript Tracking Client file loads (usually a ppms.js file). "},{"title":"Tracking functions​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#tracking-functions","content":"Tracking functions collect and send data to Collecting &amp; Processing Pipeline. They can be called on a JavaScript Tracking Client object&lt;jtc-api-jstc-object&gt; or pushed to the command queue&lt;jtc-api-command-queue&gt; as commands. "},{"title":"Page views​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#page-views","content":"trackPageView([customPageTitle]) Tracks page view of the page that the function was run on. param string customPageTitle Optional Custom page title, used only for this event Example of usage: Command queue _paq.push([&quot;trackPageView&quot;]); JavaScript Tracking Client object jstc.trackPageView(); Note To overwrite page title for all events that will happen on the page (until a reload), use setDocumentTitle&lt;jtc-api-setDocumentTitle&gt;function. Note trackPageView is included in the default JavaScript Tracking Client setup snippet. It's likely you're already using it. "},{"title":"Custom events​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#custom-events","content":"trackEvent(category, action[, name[, value[, dimensions]]]) Tracks custom event, e.g. when visitor interacts with the page. param string category Required Event category param string action Required Event action param string name Optional Event name param number value Optional Event value param object dimensions Optional Custom dimensions&lt;jtc-api-custom-dimensions-object&gt;to pass along with the custom event Example of usage (tracking when the visitor clicks on the cancel button with exit intent): Command queue _paq.push([&quot;trackEvent&quot;, &quot;Exit intent&quot;, &quot;Click on button&quot;, &quot;Cancel&quot;]); JavaScript Tracking Client object jstc.trackEvent(&quot;Exit intent&quot;, &quot;Click on button&quot;, &quot;Cancel&quot;);  "},{"title":"Goal conversions​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#goal-conversions","content":"trackGoal(goalID[, conversionValue[, dimensions]]) Tracks manual goal conversion. param number|string goalID Required Goal ID (integer or UUID) param number conversionValue Optional Conversion value (revenue) param object dimensions Optional Custom dimensions&lt;jtc-api-custom-dimensions-object&gt;to pass along with the conversion Example of usage (tracking conversion of goal 1 with value 15): Command queue _paq.push([&quot;trackGoal&quot;, 1, 15]); JavaScript Tracking Client object jstc.trackGoal(1, 15);  "},{"title":"Site search​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#site-search","content":"trackSiteSearch(keyword[, category[, resultCount[, dimensions]]]) Tracks search requests on a website. param string keyword Required What keyword the visitor entered into the search box param string|Array\\&lt;string&gt; category Optional Category selected in the search engine param number searchCount Optional The number of search results shown param object dimensions Optional Custom dimensions&lt;jtc-api-custom-dimensions-object&gt;to pass along with the site search event Example of usage: Command queue _paq.push([&quot;trackSiteSearch&quot;, &quot;stove&quot;, undefined, 20]); JavaScript Tracking Client object jstc.trackSiteSearch(&quot;stove&quot;, undefined, 20);  "},{"title":"E-commerce​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#e-commerce","content":"addEcommerceItem(productSKU[, productName[, productCategory[, productPrice[, productQuantity]]]]) Adds a product to a virtual shopping cart. If a product with the same SKU is in the cart, it will be removed first. Does not send any data to the Collecting &amp; Processing Pipeline. param string productSKU Required Product stock-keeping unit param string productName Optional Product name param string|Array\\&lt;string&gt; productCategory Optional Product category or an array of up to 5 categories param number productPrice Optional Product price param number productQuantity Optional The number of units Example of usage: Command queue _paq.push([&quot;addEcommerceItem&quot;, &quot;craft-311&quot;, &quot;Unicorn Iron on Patch&quot;, &quot;Crafts &amp; Sewing&quot;, 499, 3]); JavaScript Tracking Client object jstc.addEcommerceItem(&quot;craft-311&quot;, &quot;Unicorn Iron on Patch&quot;, &quot;Crafts &amp; Sewing&quot;, 499, 3); Note This function does not send any data to Collecting &amp; Processing Pipeline. It only prepares the virtual shopping cart to be sent withtrackEcommerceCartUpdate&lt;jtc-api-trackEcommerceCartUpdate&gt; ortrackEcommerceOrder&lt;jtc-api-trackEcommerceOrder&gt;. Warning The state of the virtual shopping cart is not persisted in browser storage. You must add all products again after a page reload. Warning Adding a product with a SKU that has been previously added will first remove the old product, e.g.: Command queue _paq.push([&quot;addEcommerceItem&quot;, &quot;72625151&quot;, &quot;Yellow notebook 150 pages&quot;, &quot;School supplies&quot;, 10.00, 1]); // 1 item with sku 72625151 _paq.push([&quot;addEcommerceItem&quot;, &quot;72625151&quot;, &quot;Yellow notebook 150 pages&quot;, &quot;School supplies&quot;, 10.00, 2]); // 2 items with sku 72625151, not 3! JavaScript Tracking Client object jstc.addEcommerceItem(&quot;72625151&quot;, &quot;Yellow notebook 150 pages&quot;, &quot;School supplies&quot;, 10.00, 1); // 1 item with sku 72625151 jstc.addEcommerceItem(&quot;72625151&quot;, &quot;Yellow notebook 150 pages&quot;, &quot;School supplies&quot;, 10.00, 2); // 2 items with sku 72625151, not 3!  removeEcommerceItem(productSKU) Removes a product with the provided SKU from a virtual shopping cart. If multiple units of that product are in the virtual cart, all of them will be removed. Does not send any data to the Collecting &amp; Processing Pipeline. param string productSKU Required stock-keeping unit of a product to remove Example of usage: Command queue _paq.push([&quot;removeEcommerceItem&quot;, &quot;craft-311&quot;]); JavaScript Tracking Client object jstc.removeEcommerceItem(&quot;craft-311&quot;); Note This function does not send any data to Collecting &amp; Processing Pipeline. It only prepares the virtual shopping cart to be sent withtrackEcommerceCartUpdate&lt;jtc-api-trackEcommerceCartUpdate&gt; ortrackEcommerceOrder&lt;jtc-api-trackEcommerceOrder&gt;. Warning The state of the virtual shopping cart is not persisted in browser storage. You must add all products again after a page reload. clearEcommerceCart() Removes all items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing Pipeline. Example of usage: Command queue _paq.push([&quot;clearEcommerceCart&quot;]); JavaScript Tracking Client object jstc.clearEcommerceCart(); Note This function does not send any data to Collecting &amp; Processing Pipeline. It only prepares the virtual shopping cart to be sent withtrackEcommerceCartUpdate&lt;jtc-api-trackEcommerceCartUpdate&gt; ortrackEcommerceOrder&lt;jtc-api-trackEcommerceOrder&gt;. Warning The state of the virtual shopping cart is not persisted in browser storage. You must add all products again after a page reload. getEcommerceItems() Returns a copy of items from a virtual shopping cart. Does not send any data to the Collecting &amp; Processing Pipeline. returns Object containing all tracked items (format: Object&lt;productSKU, Array[productSKU, productName, productCategory, price, quantity]&gt;) rtype object Example of usage: Command queue _paq.push([function () { console.log(this.getEcommerceItems()); }]); JavaScript Tracking Client object console.log(jstc.getEcommerceItems()); Example return value: { &quot;52441051&quot;: [&quot;52441051&quot;, &quot;SUPER Notebook 15\\&quot; Ocean Blue&quot;, &quot;Laptops&quot;, 2200, 1], &quot;19287236&quot;: [&quot;19287236&quot;, &quot;Earbuds COOL PRO x300 BT&quot;, &quot;Accessories&quot;, 85, 2], } Warning The state of the virtual shopping cart is not persisted in browser storage. You must add all products again after a page reload. setEcommerceView([productSKU[, productName[, productCategory[, productPrice]]]]) Tracks product or category view. Must be followed by a page view&lt;jtc-api-page-views&gt;. param string productSKU Optional Product stock-keeping unit. param string productName Optional Product name. param string|Array\\&lt;string&gt; productCategory Optional Category or an array of up to 5 categories. param number productPrice Optional Product price. When tracking product views, provide productSKU and optionally other parameters. When tracking category views, provide only productCategory. SkipproductSKU, productName and productPrice parameters supplyingundefined where necessary. Example of usage: Command queue _paq.push([&quot;setEcommerceView&quot;, undefined, undefined, &quot;Crafts &amp; Sewing&quot;]); // category view _paq.push([&quot;trackPageView&quot;]); _paq.push([&quot;setEcommerceView&quot;, &quot;craft-311&quot;, &quot;Unicorn Iron on Patch&quot;, &quot;Crafts &amp; Sewing&quot;, 499]); // product view _paq.push([&quot;trackPageView&quot;]); JavaScript Tracking Client object jstc.setEcommerceView(undefined, undefined, &quot;Crafts &amp; Sewing&quot;); // category view jstc.trackPageView(); jstc.setEcommerceView(&quot;craft-311&quot;, &quot;Unicorn Iron on Patch&quot;, &quot;Crafts &amp; Sewing&quot;, 499); // product view jstc.trackPageView(); Warning setEcommerceView does not send data itself. It must be followed by a call to trackPageView&lt;jtc-api-trackPageView&gt;. trackEcommerceCartUpdate(cartAmount) Tracks items present in a virtual shopping cart (registered withaddEcommerceItem&lt;jtc-api-addEcommerceItem&gt;); param number cartAmount Required The total value of items in the cart Example of usage: Command queue _paq.push([&quot;trackEcommerceCartUpdate&quot;, 250]); JavaScript Tracking Client object jstc.trackEcommerceCartUpdate(250); Why JavaScript Tracking Client doesn't count cartAmount by itself? Why user must do this? Warning Make sure all products from the cart have been registered usingaddEcommerceItem before tracking a cart update. Remember that when a page is reloaded, the cart resets and all products must be registered again. trackEcommerceOrder(orderID, orderGrandTotal[, orderSubTotal[, orderTax[, orderShipping[, orderDiscount]]]]) Tracks a successfully placed e-commerce order with items present in a virtual cart (registered usingaddEcommerceItem&lt;jtc-api-addEcommerceItem&gt;). param string orderID Required String uniquely identifying an order param number orderGrandTotal Required Order Revenue grand total - tax, shipping and discount included param number orderSubTotal Optional Order subtotal - without shipping param number orderTax Optional Order tax amount param number orderShipping Optional Order shipping cost param number orderDiscount Optional Order discount amount Example of usage: Command queue _paq.push([&quot;trackEcommerceOrder&quot;, &quot;3352&quot;, 499, 399, 0, 100]); JavaScript Tracking Client object jstc.trackEcommerceOrder(&quot;3352&quot;, 499, 399, 0, 100);  Warning trackEcommerceOrder function clears the list with registered e-commerce items. "},{"title":"Custom Variables​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#custom-variables","content":"5.5 We strongly advise using custom dimensions instead. setCustomVariable(index, name[, value[, scope]]) Sets a custom variable that can be used later. param number index Required Index from 1 to 5 where the variable is stored param string name Required Name of the variable param string value Optional Value of the variable, limited to 200 characters param string scope Optional Scope of the variable, &quot;visit&quot; or &quot;page&quot;. The default value is &quot;visit&quot;. Example of usage: Command queue _paq.push([&quot;setCustomVariable&quot;, 1, &quot;AspectRatio&quot;, &quot;16:9&quot;, &quot;visit&quot;]); JavaScript Tracking Client object jstc.setCustomVariable(1, &quot;AspectRatio&quot;, &quot;16:9&quot;, &quot;visit&quot;); Note A custom variable with the &quot;visit&quot; scope will be saved for an entire session, you don't need to set it on every page. Warning Index is separate for each variable scope. deleteCustomVariable(index[, scope]) Removes a previously set custom variable. param number index Required Number from 1 to 5 where variable is stored param string scope Optional Scope of the variable, &quot;visit&quot; or &quot;page&quot;. The default value is &quot;visit&quot;. Example of usage: Command queue _paq.push([&quot;deleteCustomVariable&quot;, 1, &quot;visit&quot;]); JavaScript Tracking Client object jstc.deleteCustomVariable(1, &quot;visit&quot;);  getCustomVariable(index[, scope]) Returns the value of a previously set custom variable. param number index Required Number from 1 to 5 where variable is stored param string scope Optional Scope of the variable, &quot;visit&quot; or &quot;page&quot;. The default value is &quot;visit&quot;. returns Custom variable value as an array with name and value if the custom variable exists (e.g. [&quot;theme&quot;, &quot;dark-01&quot;]) or false if it doesn't. rtype string[]|boolean Example of usage: Command queue _paq.push([function() { console.log(this.getCustomVariable(1, &quot;visit&quot;)); }]); JavaScript Tracking Client object console.log(jstc.getCustomVariable(1, &quot;visit&quot;));  storeCustomVariablesInCookie() Enables storing &quot;visit&quot; type custom variables in a first party cookie. Example of usage: Command queue _paq.push([&quot;storeCustomVariablesInCookie&quot;]); JavaScript Tracking Client object jstc.storeCustomVariablesInCookie();  "},{"title":"Custom Dimensions​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#custom-dimensions","content":"setCustomDimensionValue(customDimensionID, customDimensionValue) 15.3 Sets a custom dimension to be used later. param number customDimensionID Required ID of a custom dimension param string customDimensionValue Required Value of a custom dimension Example of usage: Command queue _paq.push([&quot;setCustomDimensionValue&quot;, 3, &quot;loginStatus&quot;]); JavaScript Tracking Client object jstc.setCustomDimensionValue(3, &quot;loginStatus&quot;); Warning When you set a custom dimension, its value will be used in all tracking requests within a page load. Warning This function does not send any data to the Collecting &amp; Processing Pipeline. It prepares a custom dimension to be sent with following events, e.g. page view, e-commerce events, outlink or download events. deleteCustomDimension(customDimensionID) Removes a custom dimension with the specified ID. param number customDimensionID Required ID of a custom dimension Example of usage: Command queue _paq.push([&quot;deleteCustomDimension&quot;, 3]); JavaScript Tracking Client object jstc.deleteCustomDimension(3);  getCustomDimensionValue(customDimensionID) 15.3 Returns the value of a custom dimension with the specified ID. param number customDimensionID Required ID of a custom dimension returns Value set withsetCustomDimensionValue&lt;jtc-api-setCustomDimensionValue&gt; (e.g.&quot;loginStatus&quot;) rtype string Example of usage: Command queue _paq.push([function() { console.log(this.getCustomDimensionValue(3)); }]); JavaScript Tracking Client object console.log(jstc.getCustomDimensionValue(3));  setCustomDimension(customDimensionID, customDimensionValue) 15.3 Function setCustomDimension is deprecated due to the difficulty of use (passed values should be URL encoded). Please usesetCustomDimensionValue&lt;jtc-api-setCustomDimensionValue&gt; instead. Sets a custom dimension to be used later. param number customDimensionID Required ID of a custom dimension param string customDimensionValue Required Value of a custom dimension (should be URL encoded) Example of usage: Command queue _paq.push([&quot;setCustomDimension&quot;, 3, &quot;loginStatus&quot;]); JavaScript Tracking Client object jstc.setCustomDimension(3, &quot;loginStatus&quot;); Warning When you set a Custom Dimension, that value will be used in all tracking requests within a page load. Warning This function does not send any data to the Collecting &amp; Processing Pipeline. It sets a Custom Dimension to be sent with following events, e.g. page view, e-commerce events, outlink or download events. getCustomDimension(customDimensionID) 15.3 Function getCustomDimension is deprecated due to the difficulty of use (returned values are URL-encoded). Please usegetCustomDimensionValue&lt;jtc-api-getCustomDimensionValue&gt; instead. Returns the value of a custom dimension. param number customDimensionID Required ID of a custom dimension returns Value set with setCustomDimension&lt;jtc-api-setCustomDimension&gt;(e.g. &quot;loginStatus&quot;) rtype string Example of usage: Command queue _paq.push([ function() { console.log(this.getCustomDimension(3)); }]); JavaScript Tracking Client object console.log(jstc.getCustomDimension(3));  Custom dimensions object​ Some tracking functions accept an optional dimensions parameter. You can use it to pass additional custom dimensions along with the tracked event. Custom dimension object might look like this: { &quot;dimension1&quot;: &quot;hello&quot;, &quot;dimension4&quot;: &quot;nice%20to%20see%20you&quot;, &quot;dimension5&quot;: &quot;goodbye&quot; }  Warning Keys in a custom dimension object must be in &quot;dimensionX&quot; format, where X is the ID of a custom dimension. Keys that don't match this format will be ignored. Warning Custom dimension values must be percent-encoded. To encode a string, pass it through encodeURIComponent function, e.g.encodeURIComponent(&quot;Äpfel?&quot;). "},{"title":"Content Tracking​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#content-tracking","content":"Impressions​ trackAllContentImpressions() Scans the entire DOM for content blocks and tracks impressions after all page elements load. It does not send duplicates on repeated calls unlesstrackPageView was called in between trackAllContentImpressionsinvocations. Example of usage: Command queue _paq.push([&quot;trackAllContentImpressions&quot;]); JavaScript Tracking Client object jstc.trackAllContentImpressions();  trackVisibleContentImpressions([checkOnScroll[, watchInterval]]) Scans DOM for all visible content blocks and tracks impressions. param boolean checkOnScroll Optional Whether to scan for visible content on scroll event. Default value: true. param number watchInterval Optional Delay, in milliseconds, between scans for new visible content. Periodic checks can be disabled by passing 0. Default value: 750. Example of usage: Command queue _paq.push([&quot;trackVisibleContentImpressions&quot;, true, 2000]); JavaScript Tracking Client object jstc.trackVisibleContentImpressions(true, 2000); Warning Neither option can be changed after the initial setup. Warning trackVisibleContentImpressions will not detect content blocks placed in a scrollable element. trackContentImpressionsWithinNode(domNode) Scans domNode (with its children) for all content blocks and tracks impressions. param Node domNode Required DOM node with content blocks (elements withdata-track-content attribute) inside Example of usage: Command queue var element = document.querySelector(&quot;#impressionContainer&quot;); _paq.push([&quot;trackContentImpressionsWithinNode&quot;, element]); JavaScript Tracking Client object var element = document.querySelector(&quot;#impressionContainer&quot;); jstc.trackContentImpressionsWithinNode(element); Note It can be used with trackVisibleContentImpressions to track only visible content impressions. trackContentImpression(contentName, contentPiece, contentTarget) Tracks manual content impression event. param string contentName Required Name of a content block param string contentPiece Required Name of the content that was displayed (e.g. link to an image) param string contentTarget Required Where the content leads to (e.g. URL of some external website) Example of usage: Command queue _paq.push([&quot;trackContentImpression&quot;, &quot;promo-video&quot;, &quot;https://example.com/public/promo-01.mp4&quot;, &quot;https://example.com/more&quot;]); JavaScript Tracking Client object jstc.trackContentImpression(&quot;promo-video&quot;, &quot;https://example.com/public/promo-01.mp4&quot;, &quot;https://example.com/more&quot;);  logAllContentBlocksOnPage() Print all content blocks to the console for debugging purposes. Example of usage: Command queue _paq.push([&quot;logAllContentBlocksOnPage&quot;]); JavaScript Tracking Client object jstc.logAllContentBlocksOnPage(); Example output: [ { &quot;name&quot;: &quot;promo-video&quot;, &quot;piece&quot;: &quot;https://example.com/public/promo-01.mp4&quot;, &quot;target&quot;: &quot;https://example.com/more&quot; } ]  Interactions​ trackContentInteractionNode(domNode[, contentInteraction]) Tracks interaction with a block in domNode. Can be called from code placed in onclick attribute. param Node domNode Required Node marked as content block or containing content blocks. If content block can't be found, nothing will tracked. param string contentInteraction Optional Name of interaction (e.g. &quot;click&quot;). Default value:&quot;Unknown&quot;. Example of usage: Command queue var domNode = document.querySelector(&quot;#add-image&quot;); _paq.push([&quot;trackContentInteractionNode&quot;, domNode, &quot;clicked&quot;]); JavaScript Tracking Client object var domNode = document.querySelector(&quot;#add-image&quot;); jstc.trackContentInteractionNode(domNode, &quot;clicked&quot;); Example of usage in onclick attribute: &lt;button onclick=&quot;function(){_paq.push(['trackContentInteractionNode', this, 'clicked']);}&quot;&gt;Click me!&lt;/button&gt;  trackContentInteraction(contentInteraction, contentName, contentPiece, contentTarget) Tracks manual content interaction event. param string contentInteraction Required Type of interaction (e.g. &quot;click&quot;) param string contentName Required Name of a content block param string contentPiece Required Name of the content that was displayed (e.g. link to an image) param string contentTarget Required Where the content leads to (e.g. URL of some external website) Example of usage: Command queue _paq.push([&quot;trackContentInteraction&quot;, &quot;clicked&quot;, &quot;trackingWhitepaper&quot;, &quot;document&quot;, &quot;http://cooltracker.tr/whitepaper&quot;]); JavaScript Tracking Client object jstc.trackContentInteraction(&quot;clicked&quot;, &quot;trackingWhitepaper&quot;, &quot;document&quot;, &quot;http://cooltracker.tr/whitepaper&quot;); Warning Use this function in conjunction with trackContentImpression, as it can only be mapped with an impression by contentName. "},{"title":"Download and Outlink​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#download-and-outlink","content":"trackLink(linkAddress, linkType[, dimensions[, callback]]) Manually tracks outlink or download event with provided values. param string linkAddress Required URL address of the link param string linkType Required Type of the link, &quot;link&quot; for outlink, &quot;download&quot;for download param object dimensions Optional Custom dimensions&lt;jtc-api-custom-dimensions-object&gt;to pass along with the link event param function callback Optional Function that should be called after tracking the link Example of usage: Command queue _paq.push([&quot;trackLink&quot;, &quot;http://www.example.com/example&quot;, &quot;link&quot;]); JavaScript Tracking Client object jstc.trackLink(&quot;http://www.example.com/example&quot;, &quot;link&quot;); Example of usage in onclick attribute: &lt;button onclick=&quot;_paq.push(['trackLink', 'http://www.example.com/example', 'link'])&quot;&gt; Click me! &lt;/button&gt;  enableLinkTracking([trackMiddleAndRightClicks]) Enables automatic link tracking. By default, left, right and middle clicks on links will be treated as opening a link. Opening a link to an external site (different domain) creates an outlink event. Opening a link to a downloadable file creates a download event. param boolean trackMiddleAndRightClicks Optional Whether to treat middle and right clicks as opening a link. The default value is true. Example of usage: Command queue _paq.push([&quot;trackPageView&quot;]); _paq.push([&quot;enableLinkTracking&quot;]); JavaScript Tracking Client object jstc.trackPageView(); jstc.enableLinkTracking(); Note enableLinkTracking is a part of the default Tag Manager's tracking code snippet. It's likely your setup already has it. Note Outlink events are tracked only when a link points to a different (external) domain. If that domain belongs to you and you don't want to track outlinks when visitors open it, usesetDomains&lt;jtc-api-setDomains&gt; function to define internal domains and subdomains. Warning enableLinkTracking should be called right after the firsttrackPageView or trackEvent. disableLinkTracking() Disables automatic link tracking (if it was enabled previously withenableLinkTracking). Example of usage: Command queue _paq.push([&quot;disableLinkTracking&quot;]); JavaScript Tracking Client object jstc.disableLinkTracking();  setIgnoreClasses(classes) Set a list of class names that indicate a link should not be tracked. param string|Array\\&lt;string&gt; classes Required CSS class name or an array of class names Example of usage: Command queue _paq.push([&quot;setIgnoreClasses&quot;, [&quot;do-not-track&quot;, &quot;ignore-link&quot;]]); JavaScript Tracking Client object jstc.setIgnoreClasses([&quot;do-not-track&quot;, &quot;ignore-link&quot;]); Note Elements with piwik-ignore and piwik_ignore classes are always ignored. setLinkClasses(classes) Sets a list of class names that indicate whether a link is an outlink and not download. param string|Array\\&lt;string&gt; classes Required CSS class name or an array of class names Example of usage: Command queue _paq.push([&quot;setLinkClasses&quot;, &quot;this-is-an-outlink&quot;]); JavaScript Tracking Client object jstc.setLinkClasses(&quot;this-is-an-outlink&quot;); Note Elements with piwik-link or piwik_link class are always treated as outlinks. setDownloadClasses(classes) Sets a list of class names that indicate whether a list is a download and not an outlink. param string|Array\\&lt;string&gt; classes Required CSS class name or an array of class names Example of usage: Command queue _paq.push([&quot;setDownloadClasses&quot;, &quot;this-is-a-download&quot;]); JavaScript Tracking Client object jstc.setDownloadClasses(&quot;this-is-a-download&quot;); Note Elements with download attribute, piwik-download class orpiwik_download class are always treated as downloads. Note Links containing a known file extension&lt;jtc-api-setDownloadExtensions&gt;will be treated as a downloads as well. setDownloadExtensions(extensions) Overwrites the list of file extensions indicating that a link is a download. param string|Array\\&lt;string&gt; extensions Required List of extensions to be set. Can be written as string, e.g. &quot;zip|rar&quot;, or an array, e.g. [&quot;zip&quot;, &quot;rar&quot;]. Links containing a known file extension are treated as downloads and not outlinks. We check for extensions at the end of URL path and in query parameter values. Below are examples of URL with extensions detected. http://example.com/path/file**.zip**http://example.com/path/file**.zip**\\#hellohttp://example.com/path/file**.zip**?a=102http://example.com/path/?a=file**.zip**http://example.com/path/?a=file**.zip**\\&amp;b=29 The default download extensions list contains the following extensions: 7z, aac, apk, arc, arj, asf, asx, avi, azw3, bin,csv, deb, dmg, doc, docx, epub, exe, flv, gif, gz,gzip, hqx, ibooks, jar, jpg, jpeg, js, mobi, mp2,mp3, mp4, mpg, mpeg, mov, movie, msi, msp, odb, odf,odg, ods, odt, ogg, ogv, pdf, phps, png, ppt, pptx,qt, qtm, ra, ram, rar, rpm, sea, sit, tar, tbz,tbz2, bz, bz2, tgz, torrent, txt, wav, wma, wmv,wpd, xls, xlsx, xml, z, zip Example of usage: Command queue _paq.push([&quot;setDownloadExtensions&quot;, &quot;mhj|docx&quot;]); JavaScript Tracking Client object jstc.setDownloadExtensions(&quot;mhj|docx&quot;); Warning The list of download extensions is not persisted in the browser. It has to be configured on every page load. addDownloadExtensions(extensions) Adds new extensions to the download extensions list. param string|Array\\&lt;string&gt; extensions Required List of extensions to be added. Can be written as string, e.g. &quot;7z|apk|mp4&quot;, or an array, e.g. [&quot;7z&quot;,&quot;apk&quot;,&quot;mp4&quot;]. Warning The list of download extensions is not persisted in the browser. It has to be configured on every page load. Example of usage: Command queue _paq.push([&quot;addDownloadExtensions&quot;, &quot;mhj|docx&quot;]); JavaScript Tracking Client object jstc.addDownloadExtensions(&quot;mhj|docx&quot;);  removeDownloadExtensions(extensions) Removes extensions from the download extensions list. param string|Array\\&lt;string&gt; extensions Required List of extensions to remove. Can be written as string, e.g. &quot;zip|rar&quot;, or an array, e.g. [&quot;zip&quot;, &quot;rar&quot;]. Example of usage: Command queue _paq.push([&quot;removeDownloadExtensions&quot;, &quot;mhj|docx&quot;]); JavaScript Tracking Client object jstc.removeDownloadExtensions(&quot;mhj|docx&quot;); Warning The list of download extensions is not persisted in the browser. It has to be configured on every page load. getConfigDownloadExtensions() Returns current download extensions list used by the JSTC. return List of download extensions (e.g.[&quot;mhj&quot;, &quot;docx&quot;]). rtype string[] Example of usage: Command queue _paq.push([function () { console.log(this.getConfigDownloadExtensions()); }]); JavaScript Tracking Client object console.log(jstc.getConfigDownloadExtensions());  "},{"title":"User management​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#user-management","content":"setUserId(userID) Sets user ID, which will help identify a user of your application across many devices and browsers. param string userID Required Non-empty, unique ID of a user in application Example of usage: Command queue _paq.push([&quot;setUserId&quot;, &quot;19283&quot;]); JavaScript Tracking Client object jstc.setUserId(&quot;19283&quot;); is user id persistent? getUserId() Returns currently used user ID value (set with setUserId). return User ID value (e.g. &quot;19283&quot;) rtype string Example of usage: Command queue _paq.push([function () { console.log(this.getUserId()); }]); JavaScript Tracking Client object console.log(jstc.getUserId());  resetUserId() Clears previously set userID, e.g. when visitor logs out. Example of usage: Command queue _paq.push([&quot;resetUserId&quot;]); JavaScript Tracking Client object jstc.resetUserId();  setUserIsAnonymous(isAnonymous) Enables or disables anonymous tracking (anonymous = without consent). Does not send any data to Collecting &amp; Processing Pipeline. The next emitted event will have anonymous mode set accordingly. param boolean isAnonymous Required Whether visitor is anonymous Example of usage: Command queue _paq.push([&quot;setUserIsAnonymous&quot;, true]); JavaScript Tracking Client object jstc.setUserIsAnonymous(true);  deanonymizeUser() Disables anonymous tracking and sends deanonymization event to theCollecting &amp; Processing Pipeline. Recommended method for disabling anonymous tracking. Example of usage: Command queue _paq.push([&quot;deanonymizeUser&quot;]); JavaScript Tracking Client object jstc.deanonymizeUser();  setSessionIdStrictPrivacyMode(isStrict) Enables or disables strict privacy option in the tracker. When enabled tracker will not send information that can be used to fully or partially identify individual client browser even when persistent cookies are disabled. The information about browser that is blocked by this setting: screen resolution and installed browser plugins (e.g. PDF, Flash, Silverlight, Java, QuickTime, RealAudio, etc.). param boolean isStrict Required Defines if tracker should use strict privacy mode. Example of usage: Command queue _paq.push([&quot;setSessionIdStrictPrivacyMode&quot;, true]); JavaScript Tracking Client object jstc.setSessionIdStrictPrivacyMode(true);  getVisitorId() Returns 16-character hex ID of the visitor. return Visitor ID (e.g. &quot;0123456789abcdef&quot; rtype string Example of usage: Command queue _paq.push([function () { console.log(this.getVisitorId()); }]); JavaScript Tracking Client object console.log(jstc.getVisitorId());  getVisitorInfo() Returns visitor information. rtype string[] returns String array with the following visitor info: new visitor flag indicating new (&quot;1&quot;) or returning (&quot;0&quot;) visitorvisitor ID (16-character hex number)first visit timestamp (UNIX epoch time)previous visit count (&quot;0&quot; for first visit)current visit timestamp (UNIX epoch time)last visit timestamp (UNIX epoch time or &quot;&quot; if N/A)last e-commerce order timestamp (UNIX epoch time or &quot;&quot; if N/A) Example of usage: Command queue _paq.push([function () { console.log(this.getVisitorInfo()); }]); JavaScript Tracking Client object console.log(jstc.getVisitorInfo()); Example output: [ &quot;0&quot;, &quot;6d85cb0b727eca52&quot;, &quot;1624261490&quot;, &quot;12&quot;, &quot;1631115486&quot;, &quot;1631115483&quot;, &quot;1630590788&quot; ]  "},{"title":"Cookie management​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#cookie-management","content":"enableCookies() Enables all first party cookies. Cookies will be created on the next tracking request. Example of usage: Command queue _paq.push([&quot;enableCookies&quot;]); JavaScript Tracking Client object jstc.enableCookies(); Note JavaScript Tracking Client has cookies enabled by default. disableCookies() Disables all first party cookies. Existing cookies will be deleted in the next page view. Example of usage: Command queue _paq.push([&quot;disableCookies&quot;]); JavaScript Tracking Client object jstc.disableCookies();  deleteCookies() Deletes existing tracking cookies on the next page view. Example of usage: Command queue _paq.push([&quot;deleteCookies&quot;]); JavaScript Tracking Client object jstc.deleteCookies();  hasCookies() Returns true if cookies are enabled in this browser. return Status of cookies support by the browser (e.g. true) rtype boolean Example of usage: Command queue _paq.push([function () { console.log(this.hasCookies()); }]); JavaScript Tracking Client object console.log(jstc.hasCookies());  setCookieNamePrefix(prefix) Sets the prefix for analytics tracking cookies. Default is &quot;_pk_&quot;. param string prefix Required String that will replace default analytics tracking cookies prefix. Example of usage: Command queue _paq.push([&quot;setCookieNamePrefix&quot;, &quot;_examplePrefix_&quot;]); JavaScript Tracking Client object jstc.setCookieNamePrefix(&quot;_examplePrefix_&quot;);  setCookieDomain(domain) Sets the domain for the analytics tracking cookies. param string domain Required Domain that will be set as cookie domain. For enabling subdomain you can use wildcard sign or dot. Example of usage: Command queue _paq.push([&quot;setCookieDomain&quot;, &quot;.example.com&quot;]); JavaScript Tracking Client object jstc.setCookieDomain(&quot;.example.com&quot;);  getCookieDomain() Returns domain of the analytics tracking cookies (set withsetCookieDomain). return Domain of the analytics tracking cookies (e.g. &quot;.example.com&quot;) rtype string Example of usage: Command queue _paq.push([function () { console.log(this.getCookieDomain()); }]); JavaScript Tracking Client object console.log(jstc.getCookieDomain());  setCookiePath(path) Sets the analytics tracking cookies path. param string path Required Path that will be set, default is &quot;/&quot;. Example of usage: Command queue _paq.push([&quot;setCookiePath&quot;, &quot;/blog/&quot;]); JavaScript Tracking Client object jstc.setCookiePath(&quot;/blog/&quot;);  getCookiePath() Returns the analytics tracking cookies path. return Analytics tracking cookies path (e.g. &quot;/blog/&quot;). rtype string Example of usage: Command queue _paq.push([function () { console.log(this.getCookiePath()); }]); JavaScript Tracking Client object console.log(jstc.getCookiePath());  setSecureCookie(secure) Toggles the secure cookie flag on all first party cookies (if you are using HTTPS). param boolean secure Required Whether to add secure flag to cookies. Example of usage: Command queue _paq.push([&quot;setSecureCookie&quot;, true]); JavaScript Tracking Client object jstc.setSecureCookie(true);  setVisitorCookieTimeout(seconds) Sets the expiration time of visitor cookies. param number seconds Required Number of seconds after which the cookie will expire. Default is 13 months. Example of usage: Command queue _paq.push([&quot;setVisitorCookieTimeout&quot;, 33955200]); JavaScript Tracking Client object jstc.setVisitorCookieTimeout(33955200);  getConfigVisitorCookieTimeout() Returns expiration time of visitor cookies (in milliseconds). return Expiration time of visitor cookies in milliseconds (e.g.33955200000) rtype number Example of usage: Command queue _paq.push([function () { console.log(this.getConfigVisitorCookieTimeout()); }]); JavaScript Tracking Client object console.log(jstc.getConfigVisitorCookieTimeout());  setReferralCookieTimeout(seconds) Sets the expiration time of referral cookies. param number seconds Required Number of seconds after which the cookie will expire. Default is 6 months. Example of usage: Command queue _paq.push([&quot;setReferralCookieTimeout&quot;, 15768000]); JavaScript Tracking Client object jstc.setReferralCookieTimeout(15768000);  setSessionCookieTimeout(seconds) Sets the expiration time of session cookies. param number seconds Required Number of seconds after which the cookie will expire. Default is 30 minutes. Example of usage: Command queue _paq.push([&quot;setSessionCookieTimeout&quot;, 1800000]); JavaScript Tracking Client object jstc.setSessionCookieTimeout(1800000);  getSessionCookieTimeout() Returns expiration time of session cookies. return Expiration time of session cookies rtype number Example of usage: Command queue _paq.push([function () { console.log(this.getSessionCookieTimeout()); }]); JavaScript Tracking Client object console.log(jstc.getSessionCookieTimeout());  setVisitorIdCookie() Sets cookie containing analytics ID in browser. Example of usage: Command queue _paq.push([&quot;setVisitorIdCookie&quot;]); JavaScript Tracking Client object jstc.setVisitorIdCookie(); Note It's needed only when JavaScript Tracking Client instance is created without use of _paq.push and script needs to know analytics IDbefore first tracking request is sent. Make sure that it is called after all methods that configure cookie are called (e.g.setCookieNamePrefix, setCookieDomain, setCookiePath, etc.). "},{"title":"Cross domain linking​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#cross-domain-linking","content":"enableCrossDomainLinking() Enables cross domain linking. Visitors across domains configured withsetDomains&lt;jtc-api-setDomains&gt; function will be linked by passing visitor ID parameter in links. Example of usage: Command queue _paq.push([&quot;enableCrossDomainLinking&quot;]); JavaScript Tracking Client object jstc.enableCrossDomainLinking();  disableCrossDomainLinking() Disables cross domain linking. Example of usage: Command queue _paq.push([&quot;disableCrossDomainLinking&quot;]); JavaScript Tracking Client object jstc.disableCrossDomainLinking();  isCrossDomainLinkingEnabled() Returns boolean telling whether cross domain linking is enabled. return Status of cross domain linking (e.g. true) rtype boolean Example of usage: Command queue _paq.push([function () { console.log(this.isCrossDomainLinkingEnabled()); }]); JavaScript Tracking Client object console.log(jstc.isCrossDomainLinkingEnabled());  setCrossDomainLinkingTimeout(seconds) Changes the time in which two visits across domains will be linked. The default timeout is 180 seconds (3 minutes). param number seconds Required Number of seconds in which two visits across domains will be linked Example of usage: Command queue _paq.push([&quot;setCrossDomainLinkingTimeout&quot;, 180]); JavaScript Tracking Client object jstc.setCrossDomainLinkingTimeout(180);  getCrossDomainLinkingUrlParameter() Returns the name of a cross domain URL parameter (query parameter by default) holding visitor ID. This is &quot;pk_vid&quot; by default. return Name of a cross domain URL parameter (e.g. &quot;pk_vid&quot;) rtype string Example usage: Command queue _paq.push([function () { console.log(this.getCrossDomainLinkingUrlParameter()); }]); JavaScript Tracking Client object console.log(jstc.getCrossDomainLinkingUrlParameter()); Note If your application creates links dynamically, you'll have to add this parameter manually, e.g. var url = &quot;http://myotherdomain.com/path/?&quot; + jstc.getCrossDomainLinkingUrlParameter(); $element.append('&lt;a href=&quot;' + url + '&quot;&gt;link&lt;/a&gt;');  customCrossDomainLinkDecorator(urlDecorator) Sets custom cross domains URL decorator for injecting visitor ID into URLs. Used when cross domain linking is enabled (see :jsenableCrossDomainLinking). param function urlDecorator Required Function injecting a parameter to a URL address urlDecorator(url, value, name) Decorator function accepts link URL, parameter name, parameter value (visitor ID) and returns a URL containing the parameter data. param string url Required Link URL param string value Required Value of visitor ID that should be passed via URL param string name Required Name of visitor ID parameter used by JavaScript Tracking Client (can be customized) return Decorated URL or null (no change in URL) rtype string|null Example of usage (value sent via URL query parameter - equivalent of default implementation): Command queue _paq.push([&quot;customCrossDomainLinkDecorator&quot;, function (url, value, name) { var parsedUrl = new URL(url); parsedUrl.searchParams.append(name, value); return parsedUrl.href; }]); JavaScript Tracking Client object jstc.customCrossDomainLinkDecorator(function (url, value, name) { var parsedUrl = new URL(url); parsedUrl.searchParams.append(name, value); return parsedUrl.href; }]); Is anyone actually overwriting the default decorator? customCrossDomainLinkVisitorIdGetter(urlParser) Sets custom cross domain URL parser for extracting visitor ID from URLs. Should extract data injected by URL decorator (set via :jscustomCrossDomainLinkDecorator). The getter should return visitor ID extracted from page URL (used by :jsenableCrossDomainLinking). param function urlParser Required Function extracting a visitor ID from a URL address urlParser(url, name) Parser function accepts page URL, parameter name and returns parameter value (visitor ID). param string url Required Page URL param string name Required Name of parameter holding visitor ID return Visitor ID value (parsed from URL) rtype string Example usage (value sent via URL query parameter - equivalent of default implementation): Command queue _paq.push([&quot;customCrossDomainLinkVisitorIdGetter&quot;, function (url, name) { return (new URL(url)).searchParams.get(name) || &quot;&quot;; }]); JavaScript Tracking Client object jstc.customCrossDomainLinkVisitorIdGetter(function (url, name) { return (new URL(url)).searchParams.get(name) || &quot;&quot;; }); Is anyone actually overwriting the default visitor ID getter? "},{"title":"JavaScript Tracking Client configuration​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#javascript-tracking-client-configuration","content":"addTracker(trackerUrl, siteId) Creates new JavaScript Tracking Client instance. param string trackerUrl Required URL for JavaScript Tracking Client param string siteId Required Site ID that will be linked to tracked data. return JavaScript Tracking Client instance rtype object Example of usage: Command queue _paq.push([&quot;addTracker&quot;, &quot;https://example.piwik.pro/piwik.php&quot;, &quot;45e07cbf-c8b3-42f3-a6d6-a5a176f623ef&quot;]); JavaScript Tracking Client object jstc.addTracker(&quot;https://example.piwik.pro/piwik.php&quot;, &quot;45e07cbf-c8b3-42f3-a6d6-a5a176f623ef&quot;);  setTrackerUrl(url) Overrides Piwik tracking URL set at the JSTC initiation. param string url Required Path to Piwik tracking URL (e.g.&quot;https://example.piwik.pro/piwik.php&quot;) Example of usage: Command queue _paq.push([&quot;setTrackerUrl&quot;, &quot;https://example.piwik.pro/piwik.php&quot;]); JavaScript Tracking Client object jstc.setTrackerUrl(&quot;https://example.piwik.pro/piwik.php&quot;);  getTrackerUrl() Returns the Piwik tracking URL used by tracker (either default, set during tracker initiation or override value set with setTrackerUrl). return Piwik tracking URL (e.g. &quot;https://example.piwik.pro/piwik.php&quot;) rtype string Example of usage: Command queue _paq.push([function () { console.log(this.getTrackerUrl()); }]); JavaScript Tracking Client object console.log(jstc.getTrackerUrl()); return Currently used Piwik tracking URL (e.g.&quot;https://example.piwik.pro/&quot;) rtype string setAPIUrl(url) Overrides HTTP API URL for tracking endpoint that was set at the tracker initiation. The use of this function is discouraged, as JavaScript Tracking Client should select the correct URL. 16.17 This method is outdated, use setTrackerUrl instead. param string url Required Path to HTTP API URL (e.g. &quot;https://example.piwik.pro&quot;) Example of usage: Command queue _paq.push([&quot;setAPIUrl&quot;, &quot;https://example.piwik.pro/piwik.php&quot;]); JavaScript Tracking Client object jstc.setAPIUrl(&quot;https://example.piwik.pro/piwik.php&quot;);  getPiwikUrl() Returns the HTTP API URL used by tracker (either default, set during tracker initiation or override value set with setAPIUrl). return Currently used HTTP API URL (e.g.&quot;https://example.piwik.pro/piwik.php&quot;) rtype string 16.17 This method is outdated, use getTrackerUrl instead. Example of usage: Command queue _paq.push([function () { console.log(this.getPiwikUrl()); }]); JavaScript Tracking Client object console.log(jstc.getPiwikUrl());  setSiteId(siteId) Sets site ID that wil be linked to tracked data. param string siteId Required Site ID that will be linked to tracked data. Example of usage: Command queue _paq.push([&quot;setSiteId&quot;, &quot;45e07cbf-c8b3-42f3-a6d6-a5a176f623ef&quot;]); JavaScript Tracking Client object jstc.setSiteId(&quot;45e07cbf-c8b3-42f3-a6d6-a5a176f623ef&quot;);  getSiteId() Returns site ID linked to tracked data. return Site ID linked to tracked data (e.g.&quot;45e07cbf-c8b3-42f3-a6d6-a5a176f623ef&quot;) rtype string Example of usage: Command queue _paq.push([function () { console.log(this.getSiteId()); }]); JavaScript Tracking Client object console.log(jstc.getSiteId());  setDomains(domains) Allows to define a list of internal domains. Used in outlink tracking&lt;jtc-api-download-and-outlink&gt; for determining whether a link is an outlink and in cross domain linking&lt;jtc-api-cross-domain-linking&gt; for determining which links should have visitor ID parameter injected. param Array\\&lt;string&gt; domains Required A list of internal domains. Domains can contain wildcard character (&quot;*&quot;) or leading dot. Example of usage: Command queue _paq.push([&quot;setDomains&quot;, [&quot;.example.com&quot;, &quot;.example.co.uk&quot;]]); JavaScript Tracking Client object jstc.setDomains([&quot;.example.com&quot;, &quot;.example.co.uk&quot;]);  getDomains() Returns list of internal domains (set with setDomains and used inoutlink tracking&lt;jtc-api-download-and-outlink&gt;). return List of internal domains (e.g. [&quot;.example.com&quot;, &quot;.example.co.uk&quot;] rtype string[] Example of usage: Command queue _paq.push([function () { console.log(this.getDomains()); }]); JavaScript Tracking Client object console.log(jstc.getDomains());  setCustomUrl(customUrl) The function that will override tracked page URL. Tracker will use current page URL if custom URL was not set. param string customUrl Required Value that will override default URL of the tracked page. Example of usage: Command queue _paq.push([&quot;setCustomUrl&quot;, &quot;https://example.com/virtual-page&quot;]); JavaScript Tracking Client object jstc.setCustomUrl(&quot;https://example.com/virtual-page&quot;);  getCurrentUrl() Returns the current URL of the page. The custom URL will be returned if set with setCustomUrl. return Currently tracked page URL (e.g.&quot;https://example.com/virtual-page&quot;) rtype string Example of usage: Command queue _paq.push([function () { console.log(this.getCurrentUrl()); }]); JavaScript Tracking Client object console.log(jstc.getCurrentUrl());  setReferrerUrl(url) The function that will override the detected HTTP referrer. param string url Required Value that will override HTTP referrer. Example of usage: Command queue _paq.push([&quot;setReferrerUrl&quot;, &quot;https://example.com/previous-page&quot;]); JavaScript Tracking Client object jstc.setReferrerUrl(&quot;https://example.com/previous-page&quot;);  discardHashTag(enableFilter) When enabled, JSTC will remove URL fragment identifier from all tracked URLs (e.g. current page URL, referer URL, etc.). param boolean enableFilter Required If set to true, URL fragment identifier will be removed from tracked URLs. Example of usage: Command queue _paq.push([&quot;discardHashTag&quot;, true]); JavaScript Tracking Client object jstc.discardHashTag(true);  setDocumentTitle(title) Overwrites document title internally. All events sent afterwards will use the provided document title. The title shown in a browser window is not affected. param string title Required Custom title Example of usage: Command queue _paq.push([&quot;setDocumentTitle&quot;, document.title.toLocaleLowerCase()]); JavaScript Tracking Client object jstc.setDocumentTitle(document.title.toLocaleLowerCase());  setTimingDataSamplingOnPageLoad(sampling) Configures page performance data collection. With non-zero sampling (10 by default), some page views will issue a page performance measurement. param number sampling Required Page performance sampling, integer between 0 and 100. 0 disables page performance data collection. 100 measures every page load. Example of usage: Command queue _paq.push([&quot;setTimingDataSamplingOnPageLoad&quot;, 0]); // disables page performance data collection _paq.push([&quot;setTimingDataSamplingOnPageLoad&quot;, 10]); // 10% of page views will by followed by a page performance measurement, this is the default behavior _paq.push([&quot;setTimingDataSamplingOnPageLoad&quot;, 30]); // 30% of page views will be followed by a page performance measurement _paq.push([&quot;setTimingDataSamplingOnPageLoad&quot;, 100]); // 100% of page views will be followed by a page performance measurement JavaScript Tracking Client object jstc.setTimingDataSamplingOnPageLoad(0); // disables page performance data collection jstc.setTimingDataSamplingOnPageLoad(10); // 10% of page views will by followed by a page performance measurement, this is the default behavior jstc.setTimingDataSamplingOnPageLoad(30); // 30% of page views will be followed by a page performance measurement jstc.setTimingDataSamplingOnPageLoad(100); // 100% of page views will be followed by a page performance measurement Note The default sampling value is 10, meaning 10% of page loads will be measured. Warning This setting will have an effect only if it's used before thetrackPageView. Warning If a page is closed before it fully loads (e.g. visitor closes the tab immediately after opening the page), page performance data will not be collected. disablePerformanceTracking() Disables sending page performance metrics for page views. Page performance metrics are enabled by default, but on SPA pages they are correct only for the first page view. All following page views in SPA don't reload whole page so in such cases it's better to disable page performance tracking to avoid reporting invalid loading times for such pages. Example of usage: Command queue _paq.push([&quot;disablePerformanceTracking&quot;]); JavaScript Tracking Client object jstc.disablePerformanceTracking();  getTimingDataSamplingOnPageLoad() Returns page performance sampling number. return Percentage of page performance sampling (e.g. 10) rtype number Example of usage: Command queue _paq.push([function () { console.log(this.getTimingDataSamplingOnPageLoad()); }]); JavaScript Tracking Client object console.log(jstc.getTimingDataSamplingOnPageLoad());  enableHeartBeatTimer() When a visitor is not producing any events (e.g. because they are reading an article or watching a video), we don't know if they are still on the page. This might skew page statistics, e.g. time on page value.Heartbeat timer allows us to determine how much time visitors spend on a page by sending heartbeats to the Collecting &amp; Processing Pipelineas long as the page is in focus. Example of usage: Command queue _paq.push([&quot;enableHeartBeatTimer&quot;]); JavaScript Tracking Client object jstc.enableHeartBeatTimer(); Note The first heartbeat will be sent 15 seconds after the page load. The time between heartbeats increases with the number of heartbeats sent and stops at 5 minutes. When a page looses focus, heartbeats will be paused until the focus is restored. The last heartbeat is sent 30 minutes after the page view. disableHeartBeatTimer() Disables sending heartbeats if they were previously enabled byenableHeartBeatTimer. Example of usage: Command queue _paq.push([&quot;disableHeartBeatTimer&quot;]); JavaScript Tracking Client object jstc.disableHeartBeatTimer();  setLinkTrackingTimer(milliseconds) When a visitor produces an events and closes the page immediately afterwards, e.g. when opening a link, the request might get cancelled. To avoid loosing the last event this way, JavaScript Tracking Client will lock the page for a fraction of a second (if wait time hasn't passed), giving the request time to reach the Collecting &amp; Processing Pipeline. setLinkTrackingTimer allows to change the default lock/wait time of 500ms. param number milliseconds Required How many milliseconds a request needs to reach theCollecting &amp; Processing Pipeline. Example of usage: Command queue _paq.push([&quot;setLinkTrackingTimer&quot;, 100]); JavaScript Tracking Client object jstc.setLinkTrackingTimer(100); Note Requests sent using beacon method do not lock the page. Note Contrary to what the function name suggests, setLinkTrackingTimeraffects all other types of events. In recent versions of JavaScript Tracking Client, links are sent using beacon method if available. getLinkTrackingTimer() Returns page exit delay (in milliseconds). Default delay can be changed with setLinkTrackingTimer&lt;jtc-api-setLinkTrackingTimer&gt;. return Page exit delay (e.g. 500) rtype number Example of usage: Command queue _paq.push([function () { console.log(this.getLinkTrackingTimer()); }]); JavaScript Tracking Client object console.log(jstc.getLinkTrackingTimer());  setSiteInspectorSetup(enable) Site Inspectoris a Chrome browser extension that helps visualize analytics data (e.g. click heat map, scroll map) on tracked pages. Default configuration of JavaScript Tracking Client will add configuration for this extension (in a page HTML), but it is possible to disable this behavior if you don't need it. param boolean enable Required Whether to enable site inspector support. Example of usage: Command queue _paq.push([&quot;setSiteInspectorSetup&quot;, false]); JavaScript Tracking Client object jstc.setSiteInspectorSetup(false);  "},{"title":"Miscellaneous​","type":1,"pageTitle":"api","url":"/docs/data-collection/web/javascript_tracking_client/api#miscellaneous","content":"ping() Ping method sends requests that are not related to any visitor action, but can still update the session. the most common use for this method is updating session custom dimensions or custom variables. Example of usage: Command queue _paq.push([&quot;ping&quot;]); JavaScript Tracking Client object jstc.ping();  addListener(domElement) Adds automatic link tracking to an HTML element. Can be used to track links added to a document after page load. param DOMElement domElement Required Element that should be tracked like a link. Example of usage: Command queue _paq.push([&quot;addListener&quot;, document.querySelector(&quot;#dynamically-added-link&quot;)]); JavaScript Tracking Client object jstc.addListener(document.querySelector(&quot;#dynamically-added-link&quot;)); Shouldn't this function be private? Is it of any use to developers? They can track link manually. setRequestMethod(method) Sets the request method. GET and POST are valid methods. GET is the default. param string method Required Method that will be used in requests. Either &quot;GET&quot; or&quot;POST&quot;. Example of usage: Command queue _paq.push([&quot;setRequestMethod&quot;, &quot;POST&quot;]); JavaScript Tracking Client object jstc.setRequestMethod(&quot;POST&quot;); Mention same domain or CORS setup for &quot;POST&quot; method setRequestContentType(contentType) Sets Content-Type header of tracking requests. Used when tracking using &quot;POST&quot; method (set bysetRequestMethod&lt;jtc-api-setRequestMethod&gt;). param string contentType Required Content-Type value to be set. Example of usage: Command queue _paq.push([&quot;setRequestContentType&quot;, &quot;text/plain&quot;]); JavaScript Tracking Client object jstc.setRequestContentType(&quot;text/plain&quot;);  setCustomRequestProcessing(function) Allows to access and modify query string before sending a page view or ping request. param function function Required Function accepting a query string and returning another query string. Example of usage: Command queue _paq.push([&quot;setCustomRequestProcessing&quot;, function (query) { var modifiedQuery = query.replace(&quot;rec=1&quot;, &quot;rec=0&quot;); return modifiedQuery; }]); JavaScript Tracking Client object jstc.setCustomRequestProcessing(function (query) { var modifiedQuery = query.replace(&quot;rec=1&quot;, &quot;rec=0&quot;); return modifiedQuery; }); Consider removing/deprecating this method for two reasons: 1. It only affects pings and page views 2. It is hard to use - doing anything useful with it requires parsing query parameter string enableJSErrorTracking(unique) Enables tracking of unhandled JavaScript errors. param boolean unique Optional When set to true, tracker will send only unique errors from a page (duplicated errors will be ignored). Default: true. Note Browsers may limit information about error details if it occurs in script loaded from different origin (seedetails). Example of usage: Command queue _paq.push([&quot;enableJSErrorTracking&quot;]); JavaScript Tracking Client object jstc.enableJSErrorTracking();  trackError(error) Attempts to send error tracking request using same format as native errors caught by :jsenableJSErrorTracking. Such error request will still follow rules set for tracker, so it will be sent only when JS error tracking is enabled (:jsenableJSErrorTracking function was called before this attempt). It will also respect rules for tracking only unique errors. param Error error Required Error object (e.g. caught with try...catch) Example of usage: Command queue _paq.push([&quot;trackError&quot;, new Error(&quot;Uncaught SyntaxError&quot;)]); JavaScript Tracking Client object jstc.trackError(new Error(&quot;Uncaught SyntaxError&quot;));  getTrackingSource() Returns tracking source name and version that identifies the library sending tracking requests. The default tracking source is jstc and can be overwritten using setTrackingSource&lt;jtc-api-setTrackingSource&gt;function. returns An array with tracking source name and version, e.g. [&quot;jstc&quot;, &quot;2.3.1&quot;] rtype string[] Example of usage: Command queue _paq.push([function() { var nameAndVersion = this.getTrackingSource(); console.log(&quot;name: &quot; + nameAndVersion[0]); console.log(&quot;version: &quot; + nameAndVersion[1]); }]); JavaScript Tracking Client object var nameAndVersion = jstc.getTrackingSource(); console.log(&quot;name: &quot; + nameAndVersion[0]); console.log(&quot;version: &quot; + nameAndVersion[1]);  setTrackingSource(name, version) Overwrites the default tracking source. param string name Required Tracking source name, e.g. &quot;custom-source&quot; param string version Optional Tracking source version in Semantic Versioning format, e.g. &quot;1.0.0&quot;. If skipped, the version will not change. Example of usage: Command queue _paq.push([&quot;setTrackingSource&quot;, &quot;custom-source&quot;, &quot;1.0.0&quot;]); JavaScript Tracking Client object jstc.setTrackingSource(&quot;custom-source&quot;, &quot;1.0.0&quot;);  setGenerationTimeMs(generationTime) Overrides reported time needed to download current page (by default this value is fetched from DOM Timing API). 16.17 Server generation time is phased out in favor of page performance metrics. param number generationTime Required Time that server took to generate current page (in milliseconds). Example of usage: Command queue _paq.push([&quot;setGenerationTimeMs&quot;, 2546]); JavaScript Tracking Client object jstc.setGenerationTimeMs(2546);  appendToTrackingUrl(appendToUrl) Appends provided query string to each tracking request. param string appendToUrl Required Custom query string that will be attached to each tracking request (e.g. &quot;lat=140&amp;long=100&quot;). Parameter names and values should be already URL encoded. Example of usage: Command queue _paq.push([&quot;appendToTrackingUrl&quot;, &quot;lat=140&amp;long=100&quot;]); JavaScript Tracking Client object jstc.appendToTrackingUrl(&quot;lat=140&amp;long=100&quot;);  setDoNotTrack(enable) When enabled it will disable sending tracking requests. 16.17 This mechanism is phased out in favor of anonymous tracking. You can check how to set it uphere. param boolean enable Required When set to true, no tracking tracking requests will be sent. Example of usage: Command queue _paq.push([&quot;setDoNotTrack&quot;, true]); JavaScript Tracking Client object jstc.setDoNotTrack(true);  killFrame() Checks if tracked page is displayed from inside of aframe and it'll replace browser URL with tracked page URL in such cases (displaying page inside a frame can be a phishing scam). 16.17 It'll be removed in future versions since it falls outside of JSTC main use case (page tracking). Example of usage: Command queue _paq.push([&quot;killFrame&quot;]); JavaScript Tracking Client object jstc.killFrame();  redirectFile(url) Checks if tracked page is displayed from a local file (URL displayed by browser starts with file:///) and replaces browser URL with provided URL in such cases. 16.17 It'll be removed in future versions since it falls outside of JSTC main use case (page tracking). param string url Required URL that should be loaded. Example of usage: Command queue _paq.push([&quot;redirectFile&quot;]); JavaScript Tracking Client object jstc.redirectFile();  getNumTrackedPageViews() Returns a number of page views tracked so far without loading new page. Traditional sites will always show 1 so it's mostly useful on SPA pages that use trackPageView without loading a new page. return Number of page views tracked so far without loading new page rtype number Example of usage: Command queue _paq.push([function() { console.log(this.getNumTrackedPageViews()); }]); JavaScript Tracking Client object console.log(jstc.getNumTrackedPageViews());  getConfigIdPageView() Returns current page view ID. This value is generated with each use oftrackPageView. If new value is different ten last value, then JSTC is currently tracking a new page. return Page view ID (e.g. &quot;abCdE1&quot;) rtype string Example of usage: Command queue _paq.push([function() { console.log(this.getConfigIdPageView()); }]); JavaScript Tracking Client object console.log(jstc.getConfigIdPageView());  trackHeartBeat() Sends heartbeat event manually. This heartbeat event will follow rules that are used in other heartbeat events (e.g. it'll be sent only if tracked page has focus). 16.17 It was used to sent event that would extend visitor session but internal rules on when heartbeat could be sent could cause confusion when event was or wasn't sent. Since introduction of the ping method, you should use that instead. Example of usage: Command queue _paq.push([&quot;trackHeartBeat&quot;]); JavaScript Tracking Client object this.trackHeartBeat();  setCountPreRendered(enable) Sets prerender event sending policy. If enabled, theprerenderwill send events immediately. Otherwise sending events will be delayed until the page will be displayed to the viewer. param boolean enable Required Prerender event sending policy (e.g. true) Example of usage: Command queue _paq.push([&quot;setCountPreRendered&quot;, true]); JavaScript Tracking Client object jstc.setCountPreRendered(true);  "}]